
encoder_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003204  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003398  08003398  00013398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033c4  080033c4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080033c4  080033c4  000133c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080033cc  080033cc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033cc  080033cc  000133cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080033d0  080033d0  000133d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080033d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000026c  2000000c  080033e0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  080033e0  00020278  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a114  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000188a  00000000  00000000  0002a150  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bb0  00000000  00000000  0002b9e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ae8  00000000  00000000  0002c590  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000153e9  00000000  00000000  0002d078  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007b1d  00000000  00000000  00042461  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00087f89  00000000  00000000  00049f7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d1f07  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003120  00000000  00000000  000d1f84  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003380 	.word	0x08003380

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08003380 	.word	0x08003380

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b972 	b.w	80004d0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	4688      	mov	r8, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14b      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000212:	428a      	cmp	r2, r1
 8000214:	4615      	mov	r5, r2
 8000216:	d967      	bls.n	80002e8 <__udivmoddi4+0xe4>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0720 	rsb	r7, r2, #32
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	fa20 f707 	lsr.w	r7, r0, r7
 800022a:	4095      	lsls	r5, r2
 800022c:	ea47 0803 	orr.w	r8, r7, r3
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbb8 f7fe 	udiv	r7, r8, lr
 800023c:	fa1f fc85 	uxth.w	ip, r5
 8000240:	fb0e 8817 	mls	r8, lr, r7, r8
 8000244:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000248:	fb07 f10c 	mul.w	r1, r7, ip
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18eb      	adds	r3, r5, r3
 8000252:	f107 30ff 	add.w	r0, r7, #4294967295
 8000256:	f080 811b 	bcs.w	8000490 <__udivmoddi4+0x28c>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8118 	bls.w	8000490 <__udivmoddi4+0x28c>
 8000260:	3f02      	subs	r7, #2
 8000262:	442b      	add	r3, r5
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0fe 	udiv	r0, r3, lr
 800026c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fc0c 	mul.w	ip, r0, ip
 8000278:	45a4      	cmp	ip, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	192c      	adds	r4, r5, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x290>
 8000286:	45a4      	cmp	ip, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x290>
 800028c:	3802      	subs	r0, #2
 800028e:	442c      	add	r4, r5
 8000290:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000294:	eba4 040c 	sub.w	r4, r4, ip
 8000298:	2700      	movs	r7, #0
 800029a:	b11e      	cbz	r6, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c6 4300 	strd	r4, r3, [r6]
 80002a4:	4639      	mov	r1, r7
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xbe>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80eb 	beq.w	800048a <__udivmoddi4+0x286>
 80002b4:	2700      	movs	r7, #0
 80002b6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ba:	4638      	mov	r0, r7
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f783 	clz	r7, r3
 80002c6:	2f00      	cmp	r7, #0
 80002c8:	d147      	bne.n	800035a <__udivmoddi4+0x156>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd0>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2c4>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	4698      	mov	r8, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa0>
 80002e2:	e9c6 4800 	strd	r4, r8, [r6]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa0>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xe8>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 808f 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f6:	1b49      	subs	r1, r1, r5
 80002f8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002fc:	fa1f f885 	uxth.w	r8, r5
 8000300:	2701      	movs	r7, #1
 8000302:	fbb1 fcfe 	udiv	ip, r1, lr
 8000306:	0c23      	lsrs	r3, r4, #16
 8000308:	fb0e 111c 	mls	r1, lr, ip, r1
 800030c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000310:	fb08 f10c 	mul.w	r1, r8, ip
 8000314:	4299      	cmp	r1, r3
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x124>
 8000318:	18eb      	adds	r3, r5, r3
 800031a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4299      	cmp	r1, r3
 8000322:	f200 80cd 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 8000326:	4684      	mov	ip, r0
 8000328:	1a59      	subs	r1, r3, r1
 800032a:	b2a3      	uxth	r3, r4
 800032c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000330:	fb0e 1410 	mls	r4, lr, r0, r1
 8000334:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000338:	fb08 f800 	mul.w	r8, r8, r0
 800033c:	45a0      	cmp	r8, r4
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x14c>
 8000340:	192c      	adds	r4, r5, r4
 8000342:	f100 33ff 	add.w	r3, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x14a>
 8000348:	45a0      	cmp	r8, r4
 800034a:	f200 80b6 	bhi.w	80004ba <__udivmoddi4+0x2b6>
 800034e:	4618      	mov	r0, r3
 8000350:	eba4 0408 	sub.w	r4, r4, r8
 8000354:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000358:	e79f      	b.n	800029a <__udivmoddi4+0x96>
 800035a:	f1c7 0c20 	rsb	ip, r7, #32
 800035e:	40bb      	lsls	r3, r7
 8000360:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000364:	ea4e 0e03 	orr.w	lr, lr, r3
 8000368:	fa01 f407 	lsl.w	r4, r1, r7
 800036c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000370:	fa21 f30c 	lsr.w	r3, r1, ip
 8000374:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000378:	4325      	orrs	r5, r4
 800037a:	fbb3 f9f8 	udiv	r9, r3, r8
 800037e:	0c2c      	lsrs	r4, r5, #16
 8000380:	fb08 3319 	mls	r3, r8, r9, r3
 8000384:	fa1f fa8e 	uxth.w	sl, lr
 8000388:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800038c:	fb09 f40a 	mul.w	r4, r9, sl
 8000390:	429c      	cmp	r4, r3
 8000392:	fa02 f207 	lsl.w	r2, r2, r7
 8000396:	fa00 f107 	lsl.w	r1, r0, r7
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1e 0303 	adds.w	r3, lr, r3
 80003a0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a4:	f080 8087 	bcs.w	80004b6 <__udivmoddi4+0x2b2>
 80003a8:	429c      	cmp	r4, r3
 80003aa:	f240 8084 	bls.w	80004b6 <__udivmoddi4+0x2b2>
 80003ae:	f1a9 0902 	sub.w	r9, r9, #2
 80003b2:	4473      	add	r3, lr
 80003b4:	1b1b      	subs	r3, r3, r4
 80003b6:	b2ad      	uxth	r5, r5
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c8:	45a2      	cmp	sl, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1e 0404 	adds.w	r4, lr, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	d26b      	bcs.n	80004ae <__udivmoddi4+0x2aa>
 80003d6:	45a2      	cmp	sl, r4
 80003d8:	d969      	bls.n	80004ae <__udivmoddi4+0x2aa>
 80003da:	3802      	subs	r0, #2
 80003dc:	4474      	add	r4, lr
 80003de:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e2:	fba0 8902 	umull	r8, r9, r0, r2
 80003e6:	eba4 040a 	sub.w	r4, r4, sl
 80003ea:	454c      	cmp	r4, r9
 80003ec:	46c2      	mov	sl, r8
 80003ee:	464b      	mov	r3, r9
 80003f0:	d354      	bcc.n	800049c <__udivmoddi4+0x298>
 80003f2:	d051      	beq.n	8000498 <__udivmoddi4+0x294>
 80003f4:	2e00      	cmp	r6, #0
 80003f6:	d069      	beq.n	80004cc <__udivmoddi4+0x2c8>
 80003f8:	ebb1 050a 	subs.w	r5, r1, sl
 80003fc:	eb64 0403 	sbc.w	r4, r4, r3
 8000400:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000404:	40fd      	lsrs	r5, r7
 8000406:	40fc      	lsrs	r4, r7
 8000408:	ea4c 0505 	orr.w	r5, ip, r5
 800040c:	e9c6 5400 	strd	r5, r4, [r6]
 8000410:	2700      	movs	r7, #0
 8000412:	e747      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f703 	lsr.w	r7, r0, r3
 800041c:	4095      	lsls	r5, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	fa21 f303 	lsr.w	r3, r1, r3
 8000426:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042a:	4338      	orrs	r0, r7
 800042c:	0c01      	lsrs	r1, r0, #16
 800042e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000432:	fa1f f885 	uxth.w	r8, r5
 8000436:	fb0e 3317 	mls	r3, lr, r7, r3
 800043a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043e:	fb07 f308 	mul.w	r3, r7, r8
 8000442:	428b      	cmp	r3, r1
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x256>
 800044a:	1869      	adds	r1, r5, r1
 800044c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000450:	d22f      	bcs.n	80004b2 <__udivmoddi4+0x2ae>
 8000452:	428b      	cmp	r3, r1
 8000454:	d92d      	bls.n	80004b2 <__udivmoddi4+0x2ae>
 8000456:	3f02      	subs	r7, #2
 8000458:	4429      	add	r1, r5
 800045a:	1acb      	subs	r3, r1, r3
 800045c:	b281      	uxth	r1, r0
 800045e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000462:	fb0e 3310 	mls	r3, lr, r0, r3
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb00 f308 	mul.w	r3, r0, r8
 800046e:	428b      	cmp	r3, r1
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x27e>
 8000472:	1869      	adds	r1, r5, r1
 8000474:	f100 3cff 	add.w	ip, r0, #4294967295
 8000478:	d217      	bcs.n	80004aa <__udivmoddi4+0x2a6>
 800047a:	428b      	cmp	r3, r1
 800047c:	d915      	bls.n	80004aa <__udivmoddi4+0x2a6>
 800047e:	3802      	subs	r0, #2
 8000480:	4429      	add	r1, r5
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000488:	e73b      	b.n	8000302 <__udivmoddi4+0xfe>
 800048a:	4637      	mov	r7, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e709      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000490:	4607      	mov	r7, r0
 8000492:	e6e7      	b.n	8000264 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x8c>
 8000498:	4541      	cmp	r1, r8
 800049a:	d2ab      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 800049c:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a0:	eb69 020e 	sbc.w	r2, r9, lr
 80004a4:	3801      	subs	r0, #1
 80004a6:	4613      	mov	r3, r2
 80004a8:	e7a4      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004aa:	4660      	mov	r0, ip
 80004ac:	e7e9      	b.n	8000482 <__udivmoddi4+0x27e>
 80004ae:	4618      	mov	r0, r3
 80004b0:	e795      	b.n	80003de <__udivmoddi4+0x1da>
 80004b2:	4667      	mov	r7, ip
 80004b4:	e7d1      	b.n	800045a <__udivmoddi4+0x256>
 80004b6:	4681      	mov	r9, r0
 80004b8:	e77c      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004ba:	3802      	subs	r0, #2
 80004bc:	442c      	add	r4, r5
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0x14c>
 80004c0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c4:	442b      	add	r3, r5
 80004c6:	e72f      	b.n	8000328 <__udivmoddi4+0x124>
 80004c8:	4638      	mov	r0, r7
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xda>
 80004cc:	4637      	mov	r7, r6
 80004ce:	e6e9      	b.n	80002a4 <__udivmoddi4+0xa0>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <Count2rpm>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int pwm[4]={0};
void Count2rpm(){
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
	pwm[0]=(TIM1->CNT-30000)*10;
 80004d8:	4b25      	ldr	r3, [pc, #148]	; (8000570 <Count2rpm+0x9c>)
 80004da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80004dc:	4613      	mov	r3, r2
 80004de:	009b      	lsls	r3, r3, #2
 80004e0:	4413      	add	r3, r2
 80004e2:	005b      	lsls	r3, r3, #1
 80004e4:	f5a3 2392 	sub.w	r3, r3, #299008	; 0x49000
 80004e8:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 80004ec:	461a      	mov	r2, r3
 80004ee:	4b21      	ldr	r3, [pc, #132]	; (8000574 <Count2rpm+0xa0>)
 80004f0:	601a      	str	r2, [r3, #0]
	pwm[1]=(TIM2->CNT-30000)*10;
 80004f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80004f8:	4613      	mov	r3, r2
 80004fa:	009b      	lsls	r3, r3, #2
 80004fc:	4413      	add	r3, r2
 80004fe:	005b      	lsls	r3, r3, #1
 8000500:	f5a3 2392 	sub.w	r3, r3, #299008	; 0x49000
 8000504:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8000508:	461a      	mov	r2, r3
 800050a:	4b1a      	ldr	r3, [pc, #104]	; (8000574 <Count2rpm+0xa0>)
 800050c:	605a      	str	r2, [r3, #4]
	pwm[2]=(TIM3->CNT-30000)*10;
 800050e:	4b1a      	ldr	r3, [pc, #104]	; (8000578 <Count2rpm+0xa4>)
 8000510:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000512:	4613      	mov	r3, r2
 8000514:	009b      	lsls	r3, r3, #2
 8000516:	4413      	add	r3, r2
 8000518:	005b      	lsls	r3, r3, #1
 800051a:	f5a3 2392 	sub.w	r3, r3, #299008	; 0x49000
 800051e:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8000522:	461a      	mov	r2, r3
 8000524:	4b13      	ldr	r3, [pc, #76]	; (8000574 <Count2rpm+0xa0>)
 8000526:	609a      	str	r2, [r3, #8]
	pwm[3]=(TIM4->CNT-30000)*10;
 8000528:	4b14      	ldr	r3, [pc, #80]	; (800057c <Count2rpm+0xa8>)
 800052a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800052c:	4613      	mov	r3, r2
 800052e:	009b      	lsls	r3, r3, #2
 8000530:	4413      	add	r3, r2
 8000532:	005b      	lsls	r3, r3, #1
 8000534:	f5a3 2392 	sub.w	r3, r3, #299008	; 0x49000
 8000538:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 800053c:	461a      	mov	r2, r3
 800053e:	4b0d      	ldr	r3, [pc, #52]	; (8000574 <Count2rpm+0xa0>)
 8000540:	60da      	str	r2, [r3, #12]
	TIM1->CNT = 30000;
 8000542:	4b0b      	ldr	r3, [pc, #44]	; (8000570 <Count2rpm+0x9c>)
 8000544:	f247 5230 	movw	r2, #30000	; 0x7530
 8000548:	625a      	str	r2, [r3, #36]	; 0x24
	TIM2->CNT = 30000;
 800054a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800054e:	f247 5230 	movw	r2, #30000	; 0x7530
 8000552:	625a      	str	r2, [r3, #36]	; 0x24
	TIM3->CNT = 30000;
 8000554:	4b08      	ldr	r3, [pc, #32]	; (8000578 <Count2rpm+0xa4>)
 8000556:	f247 5230 	movw	r2, #30000	; 0x7530
 800055a:	625a      	str	r2, [r3, #36]	; 0x24
	TIM4->CNT = 30000;
 800055c:	4b07      	ldr	r3, [pc, #28]	; (800057c <Count2rpm+0xa8>)
 800055e:	f247 5230 	movw	r2, #30000	; 0x7530
 8000562:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000564:	bf00      	nop
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop
 8000570:	40010000 	.word	0x40010000
 8000574:	20000028 	.word	0x20000028
 8000578:	40000400 	.word	0x40000400
 800057c:	40000800 	.word	0x40000800

08000580 <uart_putc>:

void uart_putc(uint8_t c) {
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	71fb      	strb	r3, [r7, #7]
	char buf[1];
	buf[0] = c;
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	733b      	strb	r3, [r7, #12]
	HAL_UART_Transmit(&huart2, (uint8_t*) buf, sizeof(buf), 0xFFFF);
 800058e:	f107 010c 	add.w	r1, r7, #12
 8000592:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000596:	2201      	movs	r2, #1
 8000598:	4803      	ldr	r0, [pc, #12]	; (80005a8 <uart_putc+0x28>)
 800059a:	f002 fa66 	bl	8002a6a <HAL_UART_Transmit>
}
 800059e:	bf00      	nop
 80005a0:	3710      	adds	r7, #16
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	20000208 	.word	0x20000208

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	xdev_out(uart_putc);
 80005b2:	4b35      	ldr	r3, [pc, #212]	; (8000688 <main+0xdc>)
 80005b4:	4a35      	ldr	r2, [pc, #212]	; (800068c <main+0xe0>)
 80005b6:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b8:	f000 ff0e 	bl	80013d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005bc:	f000 f884 	bl	80006c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c0:	f000 fa88 	bl	8000ad4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005c4:	f000 fa5c 	bl	8000a80 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80005c8:	f000 f992 	bl	80008f0 <MX_TIM3_Init>
  MX_TIM1_Init();
 80005cc:	f000 f8e8 	bl	80007a0 <MX_TIM1_Init>
  MX_TIM2_Init();
 80005d0:	f000 f93c 	bl	800084c <MX_TIM2_Init>
  MX_TIM4_Init();
 80005d4:	f000 f9de 	bl	8000994 <MX_TIM4_Init>
  MX_TIM10_Init();
 80005d8:	f000 fa2e 	bl	8000a38 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
	if (HAL_TIM_Encoder_Init(&htim1, &sConfig1) != HAL_OK) {
 80005dc:	492c      	ldr	r1, [pc, #176]	; (8000690 <main+0xe4>)
 80005de:	482d      	ldr	r0, [pc, #180]	; (8000694 <main+0xe8>)
 80005e0:	f001 fecb 	bl	800237a <HAL_TIM_Encoder_Init>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <main+0x42>
		Error_Handler();
 80005ea:	f000 fae3 	bl	8000bb4 <Error_Handler>
	}
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80005ee:	213c      	movs	r1, #60	; 0x3c
 80005f0:	4828      	ldr	r0, [pc, #160]	; (8000694 <main+0xe8>)
 80005f2:	f001 ff54 	bl	800249e <HAL_TIM_Encoder_Start>
	TIM1->CNT = 30000;
 80005f6:	4b28      	ldr	r3, [pc, #160]	; (8000698 <main+0xec>)
 80005f8:	f247 5230 	movw	r2, #30000	; 0x7530
 80005fc:	625a      	str	r2, [r3, #36]	; 0x24

	if (HAL_TIM_Encoder_Init(&htim2, &sConfig2) != HAL_OK) {
 80005fe:	4927      	ldr	r1, [pc, #156]	; (800069c <main+0xf0>)
 8000600:	4827      	ldr	r0, [pc, #156]	; (80006a0 <main+0xf4>)
 8000602:	f001 feba 	bl	800237a <HAL_TIM_Encoder_Init>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <main+0x64>
		Error_Handler();
 800060c:	f000 fad2 	bl	8000bb4 <Error_Handler>
	}
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000610:	213c      	movs	r1, #60	; 0x3c
 8000612:	4823      	ldr	r0, [pc, #140]	; (80006a0 <main+0xf4>)
 8000614:	f001 ff43 	bl	800249e <HAL_TIM_Encoder_Start>
	TIM2->CNT = 30000;
 8000618:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800061c:	f247 5230 	movw	r2, #30000	; 0x7530
 8000620:	625a      	str	r2, [r3, #36]	; 0x24


	if (HAL_TIM_Encoder_Init(&htim3, &sConfig3) != HAL_OK) {
 8000622:	4920      	ldr	r1, [pc, #128]	; (80006a4 <main+0xf8>)
 8000624:	4820      	ldr	r0, [pc, #128]	; (80006a8 <main+0xfc>)
 8000626:	f001 fea8 	bl	800237a <HAL_TIM_Encoder_Init>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <main+0x88>
		Error_Handler();
 8000630:	f000 fac0 	bl	8000bb4 <Error_Handler>
	}
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000634:	213c      	movs	r1, #60	; 0x3c
 8000636:	481c      	ldr	r0, [pc, #112]	; (80006a8 <main+0xfc>)
 8000638:	f001 ff31 	bl	800249e <HAL_TIM_Encoder_Start>
	TIM3->CNT = 30000;
 800063c:	4b1b      	ldr	r3, [pc, #108]	; (80006ac <main+0x100>)
 800063e:	f247 5230 	movw	r2, #30000	; 0x7530
 8000642:	625a      	str	r2, [r3, #36]	; 0x24

	if (HAL_TIM_Encoder_Init(&htim4, &sConfig4) != HAL_OK) {
 8000644:	491a      	ldr	r1, [pc, #104]	; (80006b0 <main+0x104>)
 8000646:	481b      	ldr	r0, [pc, #108]	; (80006b4 <main+0x108>)
 8000648:	f001 fe97 	bl	800237a <HAL_TIM_Encoder_Init>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <main+0xaa>
		Error_Handler();
 8000652:	f000 faaf 	bl	8000bb4 <Error_Handler>
	}
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000656:	213c      	movs	r1, #60	; 0x3c
 8000658:	4816      	ldr	r0, [pc, #88]	; (80006b4 <main+0x108>)
 800065a:	f001 ff20 	bl	800249e <HAL_TIM_Encoder_Start>
	TIM4->CNT = 30000;
 800065e:	4b16      	ldr	r3, [pc, #88]	; (80006b8 <main+0x10c>)
 8000660:	f247 5230 	movw	r2, #30000	; 0x7530
 8000664:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start_IT(&htim10);
 8000666:	4815      	ldr	r0, [pc, #84]	; (80006bc <main+0x110>)
 8000668:	f001 fe63 	bl	8002332 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		xprintf("%d\t,\t%d\t,\t%d\t,\t%d\r\n", pwm[0],pwm[1],pwm[2],pwm[3]);
 800066c:	4b14      	ldr	r3, [pc, #80]	; (80006c0 <main+0x114>)
 800066e:	6819      	ldr	r1, [r3, #0]
 8000670:	4b13      	ldr	r3, [pc, #76]	; (80006c0 <main+0x114>)
 8000672:	685a      	ldr	r2, [r3, #4]
 8000674:	4b12      	ldr	r3, [pc, #72]	; (80006c0 <main+0x114>)
 8000676:	6898      	ldr	r0, [r3, #8]
 8000678:	4b11      	ldr	r3, [pc, #68]	; (80006c0 <main+0x114>)
 800067a:	68db      	ldr	r3, [r3, #12]
 800067c:	9300      	str	r3, [sp, #0]
 800067e:	4603      	mov	r3, r0
 8000680:	4810      	ldr	r0, [pc, #64]	; (80006c4 <main+0x118>)
 8000682:	f000 fe6d 	bl	8001360 <xprintf>
 8000686:	e7f1      	b.n	800066c <main+0xc0>
 8000688:	20000270 	.word	0x20000270
 800068c:	08000581 	.word	0x08000581
 8000690:	20000044 	.word	0x20000044
 8000694:	20000188 	.word	0x20000188
 8000698:	40010000 	.word	0x40010000
 800069c:	20000248 	.word	0x20000248
 80006a0:	200001c8 	.word	0x200001c8
 80006a4:	200000f8 	.word	0x200000f8
 80006a8:	2000011c 	.word	0x2000011c
 80006ac:	40000400 	.word	0x40000400
 80006b0:	20000164 	.word	0x20000164
 80006b4:	20000068 	.word	0x20000068
 80006b8:	40000800 	.word	0x40000800
 80006bc:	200000a8 	.word	0x200000a8
 80006c0:	20000028 	.word	0x20000028
 80006c4:	08003398 	.word	0x08003398

080006c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b094      	sub	sp, #80	; 0x50
 80006cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ce:	f107 0320 	add.w	r3, r7, #32
 80006d2:	2230      	movs	r2, #48	; 0x30
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f002 fe4a 	bl	8003370 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006dc:	f107 030c 	add.w	r3, r7, #12
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	609a      	str	r2, [r3, #8]
 80006e8:	60da      	str	r2, [r3, #12]
 80006ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ec:	2300      	movs	r3, #0
 80006ee:	60bb      	str	r3, [r7, #8]
 80006f0:	4b29      	ldr	r3, [pc, #164]	; (8000798 <SystemClock_Config+0xd0>)
 80006f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f4:	4a28      	ldr	r2, [pc, #160]	; (8000798 <SystemClock_Config+0xd0>)
 80006f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006fa:	6413      	str	r3, [r2, #64]	; 0x40
 80006fc:	4b26      	ldr	r3, [pc, #152]	; (8000798 <SystemClock_Config+0xd0>)
 80006fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000704:	60bb      	str	r3, [r7, #8]
 8000706:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000708:	2300      	movs	r3, #0
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	4b23      	ldr	r3, [pc, #140]	; (800079c <SystemClock_Config+0xd4>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000714:	4a21      	ldr	r2, [pc, #132]	; (800079c <SystemClock_Config+0xd4>)
 8000716:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800071a:	6013      	str	r3, [r2, #0]
 800071c:	4b1f      	ldr	r3, [pc, #124]	; (800079c <SystemClock_Config+0xd4>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000728:	2302      	movs	r3, #2
 800072a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800072c:	2301      	movs	r3, #1
 800072e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000730:	2310      	movs	r3, #16
 8000732:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000734:	2302      	movs	r3, #2
 8000736:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000738:	2300      	movs	r3, #0
 800073a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800073c:	2310      	movs	r3, #16
 800073e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000740:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000744:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000746:	2304      	movs	r3, #4
 8000748:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800074a:	2307      	movs	r3, #7
 800074c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800074e:	f107 0320 	add.w	r3, r7, #32
 8000752:	4618      	mov	r0, r3
 8000754:	f001 f960 	bl	8001a18 <HAL_RCC_OscConfig>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800075e:	f000 fa29 	bl	8000bb4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000762:	230f      	movs	r3, #15
 8000764:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000766:	2302      	movs	r3, #2
 8000768:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800076a:	2300      	movs	r3, #0
 800076c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800076e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000772:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000774:	2300      	movs	r3, #0
 8000776:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000778:	f107 030c 	add.w	r3, r7, #12
 800077c:	2102      	movs	r1, #2
 800077e:	4618      	mov	r0, r3
 8000780:	f001 fbba 	bl	8001ef8 <HAL_RCC_ClockConfig>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800078a:	f000 fa13 	bl	8000bb4 <Error_Handler>
  }
}
 800078e:	bf00      	nop
 8000790:	3750      	adds	r7, #80	; 0x50
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40023800 	.word	0x40023800
 800079c:	40007000 	.word	0x40007000

080007a0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  //TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007a4:	4b25      	ldr	r3, [pc, #148]	; (800083c <MX_TIM1_Init+0x9c>)
 80007a6:	4a26      	ldr	r2, [pc, #152]	; (8000840 <MX_TIM1_Init+0xa0>)
 80007a8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10;
 80007aa:	4b24      	ldr	r3, [pc, #144]	; (800083c <MX_TIM1_Init+0x9c>)
 80007ac:	220a      	movs	r2, #10
 80007ae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b0:	4b22      	ldr	r3, [pc, #136]	; (800083c <MX_TIM1_Init+0x9c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 59999;
 80007b6:	4b21      	ldr	r3, [pc, #132]	; (800083c <MX_TIM1_Init+0x9c>)
 80007b8:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80007bc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007be:	4b1f      	ldr	r3, [pc, #124]	; (800083c <MX_TIM1_Init+0x9c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007c4:	4b1d      	ldr	r3, [pc, #116]	; (800083c <MX_TIM1_Init+0x9c>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ca:	4b1c      	ldr	r3, [pc, #112]	; (800083c <MX_TIM1_Init+0x9c>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	619a      	str	r2, [r3, #24]
  sConfig1.EncoderMode = TIM_ENCODERMODE_TI1;
 80007d0:	4b1c      	ldr	r3, [pc, #112]	; (8000844 <MX_TIM1_Init+0xa4>)
 80007d2:	2201      	movs	r2, #1
 80007d4:	601a      	str	r2, [r3, #0]
  sConfig1.IC1Polarity = TIM_ICPOLARITY_RISING;
 80007d6:	4b1b      	ldr	r3, [pc, #108]	; (8000844 <MX_TIM1_Init+0xa4>)
 80007d8:	2200      	movs	r2, #0
 80007da:	605a      	str	r2, [r3, #4]
  sConfig1.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80007dc:	4b19      	ldr	r3, [pc, #100]	; (8000844 <MX_TIM1_Init+0xa4>)
 80007de:	2201      	movs	r2, #1
 80007e0:	609a      	str	r2, [r3, #8]
  sConfig1.IC1Prescaler = TIM_ICPSC_DIV1;
 80007e2:	4b18      	ldr	r3, [pc, #96]	; (8000844 <MX_TIM1_Init+0xa4>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	60da      	str	r2, [r3, #12]
  sConfig1.IC1Filter = 0;
 80007e8:	4b16      	ldr	r3, [pc, #88]	; (8000844 <MX_TIM1_Init+0xa4>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	611a      	str	r2, [r3, #16]
  sConfig1.IC2Polarity = TIM_ICPOLARITY_RISING;
 80007ee:	4b15      	ldr	r3, [pc, #84]	; (8000844 <MX_TIM1_Init+0xa4>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	615a      	str	r2, [r3, #20]
  sConfig1.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80007f4:	4b13      	ldr	r3, [pc, #76]	; (8000844 <MX_TIM1_Init+0xa4>)
 80007f6:	2201      	movs	r2, #1
 80007f8:	619a      	str	r2, [r3, #24]
  sConfig1.IC2Prescaler = TIM_ICPSC_DIV1;
 80007fa:	4b12      	ldr	r3, [pc, #72]	; (8000844 <MX_TIM1_Init+0xa4>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	61da      	str	r2, [r3, #28]
  sConfig1.IC2Filter = 0;
 8000800:	4b10      	ldr	r3, [pc, #64]	; (8000844 <MX_TIM1_Init+0xa4>)
 8000802:	2200      	movs	r2, #0
 8000804:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig1) != HAL_OK)
 8000806:	490f      	ldr	r1, [pc, #60]	; (8000844 <MX_TIM1_Init+0xa4>)
 8000808:	480c      	ldr	r0, [pc, #48]	; (800083c <MX_TIM1_Init+0x9c>)
 800080a:	f001 fdb6 	bl	800237a <HAL_TIM_Encoder_Init>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000814:	f000 f9ce 	bl	8000bb4 <Error_Handler>
  }
  sMasterConfig1.MasterOutputTrigger = TIM_TRGO_RESET;
 8000818:	4b0b      	ldr	r3, [pc, #44]	; (8000848 <MX_TIM1_Init+0xa8>)
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
  sMasterConfig1.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800081e:	4b0a      	ldr	r3, [pc, #40]	; (8000848 <MX_TIM1_Init+0xa8>)
 8000820:	2200      	movs	r2, #0
 8000822:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig1) != HAL_OK)
 8000824:	4908      	ldr	r1, [pc, #32]	; (8000848 <MX_TIM1_Init+0xa8>)
 8000826:	4805      	ldr	r0, [pc, #20]	; (800083c <MX_TIM1_Init+0x9c>)
 8000828:	f002 f850 	bl	80028cc <HAL_TIMEx_MasterConfigSynchronization>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000832:	f000 f9bf 	bl	8000bb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	20000188 	.word	0x20000188
 8000840:	40010000 	.word	0x40010000
 8000844:	20000044 	.word	0x20000044
 8000848:	200000f0 	.word	0x200000f0

0800084c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  //TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000850:	4b24      	ldr	r3, [pc, #144]	; (80008e4 <MX_TIM2_Init+0x98>)
 8000852:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000856:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10;
 8000858:	4b22      	ldr	r3, [pc, #136]	; (80008e4 <MX_TIM2_Init+0x98>)
 800085a:	220a      	movs	r2, #10
 800085c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800085e:	4b21      	ldr	r3, [pc, #132]	; (80008e4 <MX_TIM2_Init+0x98>)
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 59999;
 8000864:	4b1f      	ldr	r3, [pc, #124]	; (80008e4 <MX_TIM2_Init+0x98>)
 8000866:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800086a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800086c:	4b1d      	ldr	r3, [pc, #116]	; (80008e4 <MX_TIM2_Init+0x98>)
 800086e:	2200      	movs	r2, #0
 8000870:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000872:	4b1c      	ldr	r3, [pc, #112]	; (80008e4 <MX_TIM2_Init+0x98>)
 8000874:	2200      	movs	r2, #0
 8000876:	619a      	str	r2, [r3, #24]
  sConfig2.EncoderMode = TIM_ENCODERMODE_TI1;
 8000878:	4b1b      	ldr	r3, [pc, #108]	; (80008e8 <MX_TIM2_Init+0x9c>)
 800087a:	2201      	movs	r2, #1
 800087c:	601a      	str	r2, [r3, #0]
  sConfig2.IC1Polarity = TIM_ICPOLARITY_RISING;
 800087e:	4b1a      	ldr	r3, [pc, #104]	; (80008e8 <MX_TIM2_Init+0x9c>)
 8000880:	2200      	movs	r2, #0
 8000882:	605a      	str	r2, [r3, #4]
  sConfig2.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000884:	4b18      	ldr	r3, [pc, #96]	; (80008e8 <MX_TIM2_Init+0x9c>)
 8000886:	2201      	movs	r2, #1
 8000888:	609a      	str	r2, [r3, #8]
  sConfig2.IC1Prescaler = TIM_ICPSC_DIV1;
 800088a:	4b17      	ldr	r3, [pc, #92]	; (80008e8 <MX_TIM2_Init+0x9c>)
 800088c:	2200      	movs	r2, #0
 800088e:	60da      	str	r2, [r3, #12]
  sConfig2.IC1Filter = 0;
 8000890:	4b15      	ldr	r3, [pc, #84]	; (80008e8 <MX_TIM2_Init+0x9c>)
 8000892:	2200      	movs	r2, #0
 8000894:	611a      	str	r2, [r3, #16]
  sConfig2.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000896:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <MX_TIM2_Init+0x9c>)
 8000898:	2200      	movs	r2, #0
 800089a:	615a      	str	r2, [r3, #20]
  sConfig2.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800089c:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <MX_TIM2_Init+0x9c>)
 800089e:	2201      	movs	r2, #1
 80008a0:	619a      	str	r2, [r3, #24]
  sConfig2.IC2Prescaler = TIM_ICPSC_DIV1;
 80008a2:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <MX_TIM2_Init+0x9c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	61da      	str	r2, [r3, #28]
  sConfig2.IC2Filter = 0;
 80008a8:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <MX_TIM2_Init+0x9c>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig2) != HAL_OK)
 80008ae:	490e      	ldr	r1, [pc, #56]	; (80008e8 <MX_TIM2_Init+0x9c>)
 80008b0:	480c      	ldr	r0, [pc, #48]	; (80008e4 <MX_TIM2_Init+0x98>)
 80008b2:	f001 fd62 	bl	800237a <HAL_TIM_Encoder_Init>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80008bc:	f000 f97a 	bl	8000bb4 <Error_Handler>
  }
  sMasterConfig2.MasterOutputTrigger = TIM_TRGO_RESET;
 80008c0:	4b0a      	ldr	r3, [pc, #40]	; (80008ec <MX_TIM2_Init+0xa0>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
  sMasterConfig2.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008c6:	4b09      	ldr	r3, [pc, #36]	; (80008ec <MX_TIM2_Init+0xa0>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig2) != HAL_OK)
 80008cc:	4907      	ldr	r1, [pc, #28]	; (80008ec <MX_TIM2_Init+0xa0>)
 80008ce:	4805      	ldr	r0, [pc, #20]	; (80008e4 <MX_TIM2_Init+0x98>)
 80008d0:	f001 fffc 	bl	80028cc <HAL_TIMEx_MasterConfigSynchronization>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80008da:	f000 f96b 	bl	8000bb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	200001c8 	.word	0x200001c8
 80008e8:	20000248 	.word	0x20000248
 80008ec:	2000003c 	.word	0x2000003c

080008f0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  //TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008f4:	4b23      	ldr	r3, [pc, #140]	; (8000984 <MX_TIM3_Init+0x94>)
 80008f6:	4a24      	ldr	r2, [pc, #144]	; (8000988 <MX_TIM3_Init+0x98>)
 80008f8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10;
 80008fa:	4b22      	ldr	r3, [pc, #136]	; (8000984 <MX_TIM3_Init+0x94>)
 80008fc:	220a      	movs	r2, #10
 80008fe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000900:	4b20      	ldr	r3, [pc, #128]	; (8000984 <MX_TIM3_Init+0x94>)
 8000902:	2200      	movs	r2, #0
 8000904:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 59999;
 8000906:	4b1f      	ldr	r3, [pc, #124]	; (8000984 <MX_TIM3_Init+0x94>)
 8000908:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800090c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800090e:	4b1d      	ldr	r3, [pc, #116]	; (8000984 <MX_TIM3_Init+0x94>)
 8000910:	2200      	movs	r2, #0
 8000912:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000914:	4b1b      	ldr	r3, [pc, #108]	; (8000984 <MX_TIM3_Init+0x94>)
 8000916:	2200      	movs	r2, #0
 8000918:	619a      	str	r2, [r3, #24]
  sConfig3.EncoderMode = TIM_ENCODERMODE_TI1;
 800091a:	4b1c      	ldr	r3, [pc, #112]	; (800098c <MX_TIM3_Init+0x9c>)
 800091c:	2201      	movs	r2, #1
 800091e:	601a      	str	r2, [r3, #0]
  sConfig3.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000920:	4b1a      	ldr	r3, [pc, #104]	; (800098c <MX_TIM3_Init+0x9c>)
 8000922:	2200      	movs	r2, #0
 8000924:	605a      	str	r2, [r3, #4]
  sConfig3.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000926:	4b19      	ldr	r3, [pc, #100]	; (800098c <MX_TIM3_Init+0x9c>)
 8000928:	2201      	movs	r2, #1
 800092a:	609a      	str	r2, [r3, #8]
  sConfig3.IC1Prescaler = TIM_ICPSC_DIV1;
 800092c:	4b17      	ldr	r3, [pc, #92]	; (800098c <MX_TIM3_Init+0x9c>)
 800092e:	2200      	movs	r2, #0
 8000930:	60da      	str	r2, [r3, #12]
  sConfig3.IC1Filter = 0;
 8000932:	4b16      	ldr	r3, [pc, #88]	; (800098c <MX_TIM3_Init+0x9c>)
 8000934:	2200      	movs	r2, #0
 8000936:	611a      	str	r2, [r3, #16]
  sConfig3.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000938:	4b14      	ldr	r3, [pc, #80]	; (800098c <MX_TIM3_Init+0x9c>)
 800093a:	2200      	movs	r2, #0
 800093c:	615a      	str	r2, [r3, #20]
  sConfig3.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800093e:	4b13      	ldr	r3, [pc, #76]	; (800098c <MX_TIM3_Init+0x9c>)
 8000940:	2201      	movs	r2, #1
 8000942:	619a      	str	r2, [r3, #24]
  sConfig3.IC2Prescaler = TIM_ICPSC_DIV1;
 8000944:	4b11      	ldr	r3, [pc, #68]	; (800098c <MX_TIM3_Init+0x9c>)
 8000946:	2200      	movs	r2, #0
 8000948:	61da      	str	r2, [r3, #28]
  sConfig3.IC2Filter = 0;
 800094a:	4b10      	ldr	r3, [pc, #64]	; (800098c <MX_TIM3_Init+0x9c>)
 800094c:	2200      	movs	r2, #0
 800094e:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig3) != HAL_OK)
 8000950:	490e      	ldr	r1, [pc, #56]	; (800098c <MX_TIM3_Init+0x9c>)
 8000952:	480c      	ldr	r0, [pc, #48]	; (8000984 <MX_TIM3_Init+0x94>)
 8000954:	f001 fd11 	bl	800237a <HAL_TIM_Encoder_Init>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 800095e:	f000 f929 	bl	8000bb4 <Error_Handler>
  }
  sMasterConfig3.MasterOutputTrigger = TIM_TRGO_RESET;
 8000962:	4b0b      	ldr	r3, [pc, #44]	; (8000990 <MX_TIM3_Init+0xa0>)
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
  sMasterConfig3.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000968:	4b09      	ldr	r3, [pc, #36]	; (8000990 <MX_TIM3_Init+0xa0>)
 800096a:	2200      	movs	r2, #0
 800096c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig3) != HAL_OK)
 800096e:	4908      	ldr	r1, [pc, #32]	; (8000990 <MX_TIM3_Init+0xa0>)
 8000970:	4804      	ldr	r0, [pc, #16]	; (8000984 <MX_TIM3_Init+0x94>)
 8000972:	f001 ffab 	bl	80028cc <HAL_TIMEx_MasterConfigSynchronization>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 800097c:	f000 f91a 	bl	8000bb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000980:	bf00      	nop
 8000982:	bd80      	pop	{r7, pc}
 8000984:	2000011c 	.word	0x2000011c
 8000988:	40000400 	.word	0x40000400
 800098c:	200000f8 	.word	0x200000f8
 8000990:	2000015c 	.word	0x2000015c

08000994 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  //TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000998:	4b23      	ldr	r3, [pc, #140]	; (8000a28 <MX_TIM4_Init+0x94>)
 800099a:	4a24      	ldr	r2, [pc, #144]	; (8000a2c <MX_TIM4_Init+0x98>)
 800099c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10;
 800099e:	4b22      	ldr	r3, [pc, #136]	; (8000a28 <MX_TIM4_Init+0x94>)
 80009a0:	220a      	movs	r2, #10
 80009a2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009a4:	4b20      	ldr	r3, [pc, #128]	; (8000a28 <MX_TIM4_Init+0x94>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 59999;
 80009aa:	4b1f      	ldr	r3, [pc, #124]	; (8000a28 <MX_TIM4_Init+0x94>)
 80009ac:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80009b0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009b2:	4b1d      	ldr	r3, [pc, #116]	; (8000a28 <MX_TIM4_Init+0x94>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009b8:	4b1b      	ldr	r3, [pc, #108]	; (8000a28 <MX_TIM4_Init+0x94>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	619a      	str	r2, [r3, #24]
  sConfig4.EncoderMode = TIM_ENCODERMODE_TI1;
 80009be:	4b1c      	ldr	r3, [pc, #112]	; (8000a30 <MX_TIM4_Init+0x9c>)
 80009c0:	2201      	movs	r2, #1
 80009c2:	601a      	str	r2, [r3, #0]
  sConfig4.IC1Polarity = TIM_ICPOLARITY_RISING;
 80009c4:	4b1a      	ldr	r3, [pc, #104]	; (8000a30 <MX_TIM4_Init+0x9c>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	605a      	str	r2, [r3, #4]
  sConfig4.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80009ca:	4b19      	ldr	r3, [pc, #100]	; (8000a30 <MX_TIM4_Init+0x9c>)
 80009cc:	2201      	movs	r2, #1
 80009ce:	609a      	str	r2, [r3, #8]
  sConfig4.IC1Prescaler = TIM_ICPSC_DIV1;
 80009d0:	4b17      	ldr	r3, [pc, #92]	; (8000a30 <MX_TIM4_Init+0x9c>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	60da      	str	r2, [r3, #12]
  sConfig4.IC1Filter = 0;
 80009d6:	4b16      	ldr	r3, [pc, #88]	; (8000a30 <MX_TIM4_Init+0x9c>)
 80009d8:	2200      	movs	r2, #0
 80009da:	611a      	str	r2, [r3, #16]
  sConfig4.IC2Polarity = TIM_ICPOLARITY_RISING;
 80009dc:	4b14      	ldr	r3, [pc, #80]	; (8000a30 <MX_TIM4_Init+0x9c>)
 80009de:	2200      	movs	r2, #0
 80009e0:	615a      	str	r2, [r3, #20]
  sConfig4.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80009e2:	4b13      	ldr	r3, [pc, #76]	; (8000a30 <MX_TIM4_Init+0x9c>)
 80009e4:	2201      	movs	r2, #1
 80009e6:	619a      	str	r2, [r3, #24]
  sConfig4.IC2Prescaler = TIM_ICPSC_DIV1;
 80009e8:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <MX_TIM4_Init+0x9c>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	61da      	str	r2, [r3, #28]
  sConfig4.IC2Filter = 0;
 80009ee:	4b10      	ldr	r3, [pc, #64]	; (8000a30 <MX_TIM4_Init+0x9c>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig4) != HAL_OK)
 80009f4:	490e      	ldr	r1, [pc, #56]	; (8000a30 <MX_TIM4_Init+0x9c>)
 80009f6:	480c      	ldr	r0, [pc, #48]	; (8000a28 <MX_TIM4_Init+0x94>)
 80009f8:	f001 fcbf 	bl	800237a <HAL_TIM_Encoder_Init>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8000a02:	f000 f8d7 	bl	8000bb4 <Error_Handler>
  }
  sMasterConfig4.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a06:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <MX_TIM4_Init+0xa0>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
  sMasterConfig4.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a0c:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <MX_TIM4_Init+0xa0>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig4) != HAL_OK)
 8000a12:	4908      	ldr	r1, [pc, #32]	; (8000a34 <MX_TIM4_Init+0xa0>)
 8000a14:	4804      	ldr	r0, [pc, #16]	; (8000a28 <MX_TIM4_Init+0x94>)
 8000a16:	f001 ff59 	bl	80028cc <HAL_TIMEx_MasterConfigSynchronization>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8000a20:	f000 f8c8 	bl	8000bb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	20000068 	.word	0x20000068
 8000a2c:	40000800 	.word	0x40000800
 8000a30:	20000164 	.word	0x20000164
 8000a34:	200000e8 	.word	0x200000e8

08000a38 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000a3c:	4b0e      	ldr	r3, [pc, #56]	; (8000a78 <MX_TIM10_Init+0x40>)
 8000a3e:	4a0f      	ldr	r2, [pc, #60]	; (8000a7c <MX_TIM10_Init+0x44>)
 8000a40:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 999;
 8000a42:	4b0d      	ldr	r3, [pc, #52]	; (8000a78 <MX_TIM10_Init+0x40>)
 8000a44:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a48:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a4a:	4b0b      	ldr	r3, [pc, #44]	; (8000a78 <MX_TIM10_Init+0x40>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 8400;
 8000a50:	4b09      	ldr	r3, [pc, #36]	; (8000a78 <MX_TIM10_Init+0x40>)
 8000a52:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8000a56:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a58:	4b07      	ldr	r3, [pc, #28]	; (8000a78 <MX_TIM10_Init+0x40>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a5e:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <MX_TIM10_Init+0x40>)
 8000a60:	2280      	movs	r2, #128	; 0x80
 8000a62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000a64:	4804      	ldr	r0, [pc, #16]	; (8000a78 <MX_TIM10_Init+0x40>)
 8000a66:	f001 fc39 	bl	80022dc <HAL_TIM_Base_Init>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8000a70:	f000 f8a0 	bl	8000bb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8000a74:	bf00      	nop
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	200000a8 	.word	0x200000a8
 8000a7c:	40014400 	.word	0x40014400

08000a80 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a84:	4b11      	ldr	r3, [pc, #68]	; (8000acc <MX_USART2_UART_Init+0x4c>)
 8000a86:	4a12      	ldr	r2, [pc, #72]	; (8000ad0 <MX_USART2_UART_Init+0x50>)
 8000a88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a8a:	4b10      	ldr	r3, [pc, #64]	; (8000acc <MX_USART2_UART_Init+0x4c>)
 8000a8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a92:	4b0e      	ldr	r3, [pc, #56]	; (8000acc <MX_USART2_UART_Init+0x4c>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a98:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <MX_USART2_UART_Init+0x4c>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a9e:	4b0b      	ldr	r3, [pc, #44]	; (8000acc <MX_USART2_UART_Init+0x4c>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000aa4:	4b09      	ldr	r3, [pc, #36]	; (8000acc <MX_USART2_UART_Init+0x4c>)
 8000aa6:	220c      	movs	r2, #12
 8000aa8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aaa:	4b08      	ldr	r3, [pc, #32]	; (8000acc <MX_USART2_UART_Init+0x4c>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab0:	4b06      	ldr	r3, [pc, #24]	; (8000acc <MX_USART2_UART_Init+0x4c>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ab6:	4805      	ldr	r0, [pc, #20]	; (8000acc <MX_USART2_UART_Init+0x4c>)
 8000ab8:	f001 ff8a 	bl	80029d0 <HAL_UART_Init>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ac2:	f000 f877 	bl	8000bb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	20000208 	.word	0x20000208
 8000ad0:	40004400 	.word	0x40004400

08000ad4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b08a      	sub	sp, #40	; 0x28
 8000ad8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ada:	f107 0314 	add.w	r3, r7, #20
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	605a      	str	r2, [r3, #4]
 8000ae4:	609a      	str	r2, [r3, #8]
 8000ae6:	60da      	str	r2, [r3, #12]
 8000ae8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	613b      	str	r3, [r7, #16]
 8000aee:	4b2d      	ldr	r3, [pc, #180]	; (8000ba4 <MX_GPIO_Init+0xd0>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	4a2c      	ldr	r2, [pc, #176]	; (8000ba4 <MX_GPIO_Init+0xd0>)
 8000af4:	f043 0304 	orr.w	r3, r3, #4
 8000af8:	6313      	str	r3, [r2, #48]	; 0x30
 8000afa:	4b2a      	ldr	r3, [pc, #168]	; (8000ba4 <MX_GPIO_Init+0xd0>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	f003 0304 	and.w	r3, r3, #4
 8000b02:	613b      	str	r3, [r7, #16]
 8000b04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	60fb      	str	r3, [r7, #12]
 8000b0a:	4b26      	ldr	r3, [pc, #152]	; (8000ba4 <MX_GPIO_Init+0xd0>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	4a25      	ldr	r2, [pc, #148]	; (8000ba4 <MX_GPIO_Init+0xd0>)
 8000b10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b14:	6313      	str	r3, [r2, #48]	; 0x30
 8000b16:	4b23      	ldr	r3, [pc, #140]	; (8000ba4 <MX_GPIO_Init+0xd0>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	60bb      	str	r3, [r7, #8]
 8000b26:	4b1f      	ldr	r3, [pc, #124]	; (8000ba4 <MX_GPIO_Init+0xd0>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	4a1e      	ldr	r2, [pc, #120]	; (8000ba4 <MX_GPIO_Init+0xd0>)
 8000b2c:	f043 0301 	orr.w	r3, r3, #1
 8000b30:	6313      	str	r3, [r2, #48]	; 0x30
 8000b32:	4b1c      	ldr	r3, [pc, #112]	; (8000ba4 <MX_GPIO_Init+0xd0>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	f003 0301 	and.w	r3, r3, #1
 8000b3a:	60bb      	str	r3, [r7, #8]
 8000b3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	607b      	str	r3, [r7, #4]
 8000b42:	4b18      	ldr	r3, [pc, #96]	; (8000ba4 <MX_GPIO_Init+0xd0>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	4a17      	ldr	r2, [pc, #92]	; (8000ba4 <MX_GPIO_Init+0xd0>)
 8000b48:	f043 0302 	orr.w	r3, r3, #2
 8000b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4e:	4b15      	ldr	r3, [pc, #84]	; (8000ba4 <MX_GPIO_Init+0xd0>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	f003 0302 	and.w	r3, r3, #2
 8000b56:	607b      	str	r3, [r7, #4]
 8000b58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	2120      	movs	r1, #32
 8000b5e:	4812      	ldr	r0, [pc, #72]	; (8000ba8 <MX_GPIO_Init+0xd4>)
 8000b60:	f000 ff40 	bl	80019e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b6a:	4b10      	ldr	r3, [pc, #64]	; (8000bac <MX_GPIO_Init+0xd8>)
 8000b6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b72:	f107 0314 	add.w	r3, r7, #20
 8000b76:	4619      	mov	r1, r3
 8000b78:	480d      	ldr	r0, [pc, #52]	; (8000bb0 <MX_GPIO_Init+0xdc>)
 8000b7a:	f000 fdb1 	bl	80016e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b7e:	2320      	movs	r3, #32
 8000b80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b82:	2301      	movs	r3, #1
 8000b84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b8e:	f107 0314 	add.w	r3, r7, #20
 8000b92:	4619      	mov	r1, r3
 8000b94:	4804      	ldr	r0, [pc, #16]	; (8000ba8 <MX_GPIO_Init+0xd4>)
 8000b96:	f000 fda3 	bl	80016e0 <HAL_GPIO_Init>

}
 8000b9a:	bf00      	nop
 8000b9c:	3728      	adds	r7, #40	; 0x28
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	40023800 	.word	0x40023800
 8000ba8:	40020000 	.word	0x40020000
 8000bac:	10210000 	.word	0x10210000
 8000bb0:	40020800 	.word	0x40020800

08000bb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
	...

08000bc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	607b      	str	r3, [r7, #4]
 8000bce:	4b10      	ldr	r3, [pc, #64]	; (8000c10 <HAL_MspInit+0x4c>)
 8000bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd2:	4a0f      	ldr	r2, [pc, #60]	; (8000c10 <HAL_MspInit+0x4c>)
 8000bd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bd8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bda:	4b0d      	ldr	r3, [pc, #52]	; (8000c10 <HAL_MspInit+0x4c>)
 8000bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000be2:	607b      	str	r3, [r7, #4]
 8000be4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	603b      	str	r3, [r7, #0]
 8000bea:	4b09      	ldr	r3, [pc, #36]	; (8000c10 <HAL_MspInit+0x4c>)
 8000bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bee:	4a08      	ldr	r2, [pc, #32]	; (8000c10 <HAL_MspInit+0x4c>)
 8000bf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bf4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bf6:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <HAL_MspInit+0x4c>)
 8000bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bfe:	603b      	str	r3, [r7, #0]
 8000c00:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c02:	2007      	movs	r0, #7
 8000c04:	f000 fd2a 	bl	800165c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c08:	bf00      	nop
 8000c0a:	3708      	adds	r7, #8
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	40023800 	.word	0x40023800

08000c14 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b090      	sub	sp, #64	; 0x40
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	60da      	str	r2, [r3, #12]
 8000c2a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a68      	ldr	r2, [pc, #416]	; (8000dd4 <HAL_TIM_Encoder_MspInit+0x1c0>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d135      	bne.n	8000ca2 <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c3a:	4b67      	ldr	r3, [pc, #412]	; (8000dd8 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8000c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3e:	4a66      	ldr	r2, [pc, #408]	; (8000dd8 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8000c40:	f043 0301 	orr.w	r3, r3, #1
 8000c44:	6453      	str	r3, [r2, #68]	; 0x44
 8000c46:	4b64      	ldr	r3, [pc, #400]	; (8000dd8 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8000c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4a:	f003 0301 	and.w	r3, r3, #1
 8000c4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c50:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	627b      	str	r3, [r7, #36]	; 0x24
 8000c56:	4b60      	ldr	r3, [pc, #384]	; (8000dd8 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	4a5f      	ldr	r2, [pc, #380]	; (8000dd8 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8000c5c:	f043 0301 	orr.w	r3, r3, #1
 8000c60:	6313      	str	r3, [r2, #48]	; 0x30
 8000c62:	4b5d      	ldr	r3, [pc, #372]	; (8000dd8 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	f003 0301 	and.w	r3, r3, #1
 8000c6a:	627b      	str	r3, [r7, #36]	; 0x24
 8000c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c6e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c72:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c74:	2302      	movs	r3, #2
 8000c76:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000c80:	2301      	movs	r3, #1
 8000c82:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4854      	ldr	r0, [pc, #336]	; (8000ddc <HAL_TIM_Encoder_MspInit+0x1c8>)
 8000c8c:	f000 fd28 	bl	80016e0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000c90:	2200      	movs	r2, #0
 8000c92:	2100      	movs	r1, #0
 8000c94:	2019      	movs	r0, #25
 8000c96:	f000 fcec 	bl	8001672 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000c9a:	2019      	movs	r0, #25
 8000c9c:	f000 fd05 	bl	80016aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000ca0:	e094      	b.n	8000dcc <HAL_TIM_Encoder_MspInit+0x1b8>
  else if(htim_encoder->Instance==TIM2)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000caa:	d12c      	bne.n	8000d06 <HAL_TIM_Encoder_MspInit+0xf2>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cac:	2300      	movs	r3, #0
 8000cae:	623b      	str	r3, [r7, #32]
 8000cb0:	4b49      	ldr	r3, [pc, #292]	; (8000dd8 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8000cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb4:	4a48      	ldr	r2, [pc, #288]	; (8000dd8 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8000cb6:	f043 0301 	orr.w	r3, r3, #1
 8000cba:	6413      	str	r3, [r2, #64]	; 0x40
 8000cbc:	4b46      	ldr	r3, [pc, #280]	; (8000dd8 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8000cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc0:	f003 0301 	and.w	r3, r3, #1
 8000cc4:	623b      	str	r3, [r7, #32]
 8000cc6:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc8:	2300      	movs	r3, #0
 8000cca:	61fb      	str	r3, [r7, #28]
 8000ccc:	4b42      	ldr	r3, [pc, #264]	; (8000dd8 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8000cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd0:	4a41      	ldr	r2, [pc, #260]	; (8000dd8 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8000cd2:	f043 0301 	orr.w	r3, r3, #1
 8000cd6:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd8:	4b3f      	ldr	r3, [pc, #252]	; (8000dd8 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8000cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cdc:	f003 0301 	and.w	r3, r3, #1
 8000ce0:	61fb      	str	r3, [r7, #28]
 8000ce2:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ce4:	2303      	movs	r3, #3
 8000ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4837      	ldr	r0, [pc, #220]	; (8000ddc <HAL_TIM_Encoder_MspInit+0x1c8>)
 8000d00:	f000 fcee 	bl	80016e0 <HAL_GPIO_Init>
}
 8000d04:	e062      	b.n	8000dcc <HAL_TIM_Encoder_MspInit+0x1b8>
  else if(htim_encoder->Instance==TIM3)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4a35      	ldr	r2, [pc, #212]	; (8000de0 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d12c      	bne.n	8000d6a <HAL_TIM_Encoder_MspInit+0x156>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d10:	2300      	movs	r3, #0
 8000d12:	61bb      	str	r3, [r7, #24]
 8000d14:	4b30      	ldr	r3, [pc, #192]	; (8000dd8 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8000d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d18:	4a2f      	ldr	r2, [pc, #188]	; (8000dd8 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8000d1a:	f043 0302 	orr.w	r3, r3, #2
 8000d1e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d20:	4b2d      	ldr	r3, [pc, #180]	; (8000dd8 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8000d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d24:	f003 0302 	and.w	r3, r3, #2
 8000d28:	61bb      	str	r3, [r7, #24]
 8000d2a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	617b      	str	r3, [r7, #20]
 8000d30:	4b29      	ldr	r3, [pc, #164]	; (8000dd8 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8000d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d34:	4a28      	ldr	r2, [pc, #160]	; (8000dd8 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8000d36:	f043 0301 	orr.w	r3, r3, #1
 8000d3a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3c:	4b26      	ldr	r3, [pc, #152]	; (8000dd8 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8000d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d40:	f003 0301 	and.w	r3, r3, #1
 8000d44:	617b      	str	r3, [r7, #20]
 8000d46:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d48:	23c0      	movs	r3, #192	; 0xc0
 8000d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d54:	2300      	movs	r3, #0
 8000d56:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d60:	4619      	mov	r1, r3
 8000d62:	481e      	ldr	r0, [pc, #120]	; (8000ddc <HAL_TIM_Encoder_MspInit+0x1c8>)
 8000d64:	f000 fcbc 	bl	80016e0 <HAL_GPIO_Init>
}
 8000d68:	e030      	b.n	8000dcc <HAL_TIM_Encoder_MspInit+0x1b8>
  else if(htim_encoder->Instance==TIM4)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a1d      	ldr	r2, [pc, #116]	; (8000de4 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d12b      	bne.n	8000dcc <HAL_TIM_Encoder_MspInit+0x1b8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000d74:	2300      	movs	r3, #0
 8000d76:	613b      	str	r3, [r7, #16]
 8000d78:	4b17      	ldr	r3, [pc, #92]	; (8000dd8 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8000d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7c:	4a16      	ldr	r2, [pc, #88]	; (8000dd8 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8000d7e:	f043 0304 	orr.w	r3, r3, #4
 8000d82:	6413      	str	r3, [r2, #64]	; 0x40
 8000d84:	4b14      	ldr	r3, [pc, #80]	; (8000dd8 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8000d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d88:	f003 0304 	and.w	r3, r3, #4
 8000d8c:	613b      	str	r3, [r7, #16]
 8000d8e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d90:	2300      	movs	r3, #0
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	4b10      	ldr	r3, [pc, #64]	; (8000dd8 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8000d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d98:	4a0f      	ldr	r2, [pc, #60]	; (8000dd8 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8000d9a:	f043 0302 	orr.w	r3, r3, #2
 8000d9e:	6313      	str	r3, [r2, #48]	; 0x30
 8000da0:	4b0d      	ldr	r3, [pc, #52]	; (8000dd8 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8000da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da4:	f003 0302 	and.w	r3, r3, #2
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000dac:	23c0      	movs	r3, #192	; 0xc0
 8000dae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db0:	2302      	movs	r3, #2
 8000db2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db8:	2300      	movs	r3, #0
 8000dba:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4808      	ldr	r0, [pc, #32]	; (8000de8 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8000dc8:	f000 fc8a 	bl	80016e0 <HAL_GPIO_Init>
}
 8000dcc:	bf00      	nop
 8000dce:	3740      	adds	r7, #64	; 0x40
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40010000 	.word	0x40010000
 8000dd8:	40023800 	.word	0x40023800
 8000ddc:	40020000 	.word	0x40020000
 8000de0:	40000400 	.word	0x40000400
 8000de4:	40000800 	.word	0x40000800
 8000de8:	40020400 	.word	0x40020400

08000dec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a0e      	ldr	r2, [pc, #56]	; (8000e34 <HAL_TIM_Base_MspInit+0x48>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d115      	bne.n	8000e2a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60fb      	str	r3, [r7, #12]
 8000e02:	4b0d      	ldr	r3, [pc, #52]	; (8000e38 <HAL_TIM_Base_MspInit+0x4c>)
 8000e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e06:	4a0c      	ldr	r2, [pc, #48]	; (8000e38 <HAL_TIM_Base_MspInit+0x4c>)
 8000e08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e0e:	4b0a      	ldr	r3, [pc, #40]	; (8000e38 <HAL_TIM_Base_MspInit+0x4c>)
 8000e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	2019      	movs	r0, #25
 8000e20:	f000 fc27 	bl	8001672 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000e24:	2019      	movs	r0, #25
 8000e26:	f000 fc40 	bl	80016aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8000e2a:	bf00      	nop
 8000e2c:	3710      	adds	r7, #16
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40014400 	.word	0x40014400
 8000e38:	40023800 	.word	0x40023800

08000e3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b08a      	sub	sp, #40	; 0x28
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e44:	f107 0314 	add.w	r3, r7, #20
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
 8000e50:	60da      	str	r2, [r3, #12]
 8000e52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a19      	ldr	r2, [pc, #100]	; (8000ec0 <HAL_UART_MspInit+0x84>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d12b      	bne.n	8000eb6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	613b      	str	r3, [r7, #16]
 8000e62:	4b18      	ldr	r3, [pc, #96]	; (8000ec4 <HAL_UART_MspInit+0x88>)
 8000e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e66:	4a17      	ldr	r2, [pc, #92]	; (8000ec4 <HAL_UART_MspInit+0x88>)
 8000e68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e6e:	4b15      	ldr	r3, [pc, #84]	; (8000ec4 <HAL_UART_MspInit+0x88>)
 8000e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e76:	613b      	str	r3, [r7, #16]
 8000e78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	60fb      	str	r3, [r7, #12]
 8000e7e:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <HAL_UART_MspInit+0x88>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	4a10      	ldr	r2, [pc, #64]	; (8000ec4 <HAL_UART_MspInit+0x88>)
 8000e84:	f043 0301 	orr.w	r3, r3, #1
 8000e88:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8a:	4b0e      	ldr	r3, [pc, #56]	; (8000ec4 <HAL_UART_MspInit+0x88>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	f003 0301 	and.w	r3, r3, #1
 8000e92:	60fb      	str	r3, [r7, #12]
 8000e94:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e96:	230c      	movs	r3, #12
 8000e98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ea6:	2307      	movs	r3, #7
 8000ea8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eaa:	f107 0314 	add.w	r3, r7, #20
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4805      	ldr	r0, [pc, #20]	; (8000ec8 <HAL_UART_MspInit+0x8c>)
 8000eb2:	f000 fc15 	bl	80016e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000eb6:	bf00      	nop
 8000eb8:	3728      	adds	r7, #40	; 0x28
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40004400 	.word	0x40004400
 8000ec4:	40023800 	.word	0x40023800
 8000ec8:	40020000 	.word	0x40020000

08000ecc <NMI_Handler>:
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */

	/* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr

08000eda <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 8000eda:	b480      	push	{r7}
 8000edc:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 8000ede:	e7fe      	b.n	8000ede <HardFault_Handler+0x4>

08000ee0 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 8000ee4:	e7fe      	b.n	8000ee4 <MemManage_Handler+0x4>

08000ee6 <BusFault_Handler>:
}

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 8000eea:	e7fe      	b.n	8000eea <BusFault_Handler+0x4>

08000eec <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 8000ef0:	e7fe      	b.n	8000ef0 <UsageFault_Handler+0x4>

08000ef2 <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 8000ef2:	b480      	push	{r7}
 8000ef4:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr

08000f0e <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 8000f0e:	b480      	push	{r7}
 8000f10:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr

08000f1c <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8000f20:	f000 faac 	bl	800147c <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8000f24:	bf00      	nop
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <TIM1_UP_TIM10_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
 */
void TIM1_UP_TIM10_IRQHandler(void) {
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	/* USER CODE END TIM1_UP_TIM10_IRQn 0 */
	HAL_TIM_IRQHandler(&htim1);
 8000f2c:	4804      	ldr	r0, [pc, #16]	; (8000f40 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8000f2e:	f001 faed 	bl	800250c <HAL_TIM_IRQHandler>
	HAL_TIM_IRQHandler(&htim10);
 8000f32:	4804      	ldr	r0, [pc, #16]	; (8000f44 <TIM1_UP_TIM10_IRQHandler+0x1c>)
 8000f34:	f001 faea 	bl	800250c <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
	Count2rpm();
 8000f38:	f7ff facc 	bl	80004d4 <Count2rpm>
	/* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000f3c:	bf00      	nop
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	20000188 	.word	0x20000188
 8000f44:	200000a8 	.word	0x200000a8

08000f48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f4c:	4b08      	ldr	r3, [pc, #32]	; (8000f70 <SystemInit+0x28>)
 8000f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f52:	4a07      	ldr	r2, [pc, #28]	; (8000f70 <SystemInit+0x28>)
 8000f54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f5c:	4b04      	ldr	r3, [pc, #16]	; (8000f70 <SystemInit+0x28>)
 8000f5e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f62:	609a      	str	r2, [r3, #8]
#endif
}
 8000f64:	bf00      	nop
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	e000ed00 	.word	0xe000ed00

08000f74 <xputc>:
/*----------------------------------------------*/
/* Put a character                              */
/*----------------------------------------------*/

void xputc (char c)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	71fb      	strb	r3, [r7, #7]
	if (_CR_CRLF && c == '\n') xputc('\r');		/* CR -> CRLF */
 8000f7e:	79fb      	ldrb	r3, [r7, #7]
 8000f80:	2b0a      	cmp	r3, #10
 8000f82:	d102      	bne.n	8000f8a <xputc+0x16>
 8000f84:	200d      	movs	r0, #13
 8000f86:	f7ff fff5 	bl	8000f74 <xputc>

	if (outptr) {		/* Destination is memory */
 8000f8a:	4b0c      	ldr	r3, [pc, #48]	; (8000fbc <xputc+0x48>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d007      	beq.n	8000fa2 <xputc+0x2e>
		*outptr++ = (unsigned char)c;
 8000f92:	4b0a      	ldr	r3, [pc, #40]	; (8000fbc <xputc+0x48>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	1c5a      	adds	r2, r3, #1
 8000f98:	4908      	ldr	r1, [pc, #32]	; (8000fbc <xputc+0x48>)
 8000f9a:	600a      	str	r2, [r1, #0]
 8000f9c:	79fa      	ldrb	r2, [r7, #7]
 8000f9e:	701a      	strb	r2, [r3, #0]
		return;
 8000fa0:	e008      	b.n	8000fb4 <xputc+0x40>
	}
	if (xfunc_out) {	/* Destination is device */
 8000fa2:	4b07      	ldr	r3, [pc, #28]	; (8000fc0 <xputc+0x4c>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d004      	beq.n	8000fb4 <xputc+0x40>
		xfunc_out((unsigned char)c);
 8000faa:	4b05      	ldr	r3, [pc, #20]	; (8000fc0 <xputc+0x4c>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	79fa      	ldrb	r2, [r7, #7]
 8000fb0:	4610      	mov	r0, r2
 8000fb2:	4798      	blx	r3
	}
}
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000038 	.word	0x20000038
 8000fc0:	20000270 	.word	0x20000270

08000fc4 <xputs>:
/*----------------------------------------------*/

void xputs (					/* Put a string to the default device */
	const char* str				/* Pointer to the string */
)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
	while (*str) {
 8000fcc:	e006      	b.n	8000fdc <xputs+0x18>
		xputc(*str++);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	1c5a      	adds	r2, r3, #1
 8000fd2:	607a      	str	r2, [r7, #4]
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff ffcc 	bl	8000f74 <xputc>
	while (*str) {
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d1f4      	bne.n	8000fce <xputs+0xa>
	}
}
 8000fe4:	bf00      	nop
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}

08000fec <xvprintf>:
static
void xvprintf (
	const char*	fmt,	/* Pointer to the format string */
	va_list arp			/* Pointer to arguments */
)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b094      	sub	sp, #80	; 0x50
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	6039      	str	r1, [r7, #0]
	unsigned long vs;
#endif


	for (;;) {
		c = *fmt++;					/* Get a format character */
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	1c5a      	adds	r2, r3, #1
 8000ffa:	607a      	str	r2, [r7, #4]
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!c) break;				/* End of format? */
 8001002:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001006:	2b00      	cmp	r3, #0
 8001008:	f000 81a3 	beq.w	8001352 <xvprintf+0x366>
		if (c != '%') {				/* Pass it through if not a % sequense */
 800100c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001010:	2b25      	cmp	r3, #37	; 0x25
 8001012:	d005      	beq.n	8001020 <xvprintf+0x34>
			xputc(c); continue;
 8001014:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff ffab 	bl	8000f74 <xputc>
 800101e:	e197      	b.n	8001350 <xvprintf+0x364>
		}
		f = w = 0;					/* Clear parms */
 8001020:	2300      	movs	r3, #0
 8001022:	643b      	str	r3, [r7, #64]	; 0x40
 8001024:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001026:	63fb      	str	r3, [r7, #60]	; 0x3c
		c = *fmt++;					/* Get first char of the sequense */
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	1c5a      	adds	r2, r3, #1
 800102c:	607a      	str	r2, [r7, #4]
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (c == '0') {				/* Flag: left '0' padded */
 8001034:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001038:	2b30      	cmp	r3, #48	; 0x30
 800103a:	d108      	bne.n	800104e <xvprintf+0x62>
			f = 1; c = *fmt++;
 800103c:	2301      	movs	r3, #1
 800103e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	1c5a      	adds	r2, r3, #1
 8001044:	607a      	str	r2, [r7, #4]
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800104c:	e00b      	b.n	8001066 <xvprintf+0x7a>
		} else {
			if (c == '-') {			/* Flag: left justified */
 800104e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001052:	2b2d      	cmp	r3, #45	; 0x2d
 8001054:	d107      	bne.n	8001066 <xvprintf+0x7a>
				f = 2; c = *fmt++;
 8001056:	2302      	movs	r3, #2
 8001058:	63fb      	str	r3, [r7, #60]	; 0x3c
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	1c5a      	adds	r2, r3, #1
 800105e:	607a      	str	r2, [r7, #4]
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			}
		}
		if (c == '*') {				/* Minimum width from an argument */
 8001066:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800106a:	2b2a      	cmp	r3, #42	; 0x2a
 800106c:	d126      	bne.n	80010bc <xvprintf+0xd0>
			n = va_arg(arp, int);
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	1d1a      	adds	r2, r3, #4
 8001072:	603a      	str	r2, [r7, #0]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	63bb      	str	r3, [r7, #56]	; 0x38
			if (n < 0) {			/* Flag: left justified */
 8001078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800107a:	2b00      	cmp	r3, #0
 800107c:	da04      	bge.n	8001088 <xvprintf+0x9c>
				n = 0 - n;
 800107e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001080:	425b      	negs	r3, r3
 8001082:	63bb      	str	r3, [r7, #56]	; 0x38
				f = 2;
 8001084:	2302      	movs	r3, #2
 8001086:	63fb      	str	r3, [r7, #60]	; 0x3c
			}
			w = n; c = *fmt++;
 8001088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800108a:	643b      	str	r3, [r7, #64]	; 0x40
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	1c5a      	adds	r2, r3, #1
 8001090:	607a      	str	r2, [r7, #4]
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001098:	e018      	b.n	80010cc <xvprintf+0xe0>
		} else {
			while (c >= '0' && c <= '9') {	/* Minimum width */
				w = w * 10 + c - '0';
 800109a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800109c:	4613      	mov	r3, r2
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	4413      	add	r3, r2
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	461a      	mov	r2, r3
 80010a6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80010aa:	4413      	add	r3, r2
 80010ac:	3b30      	subs	r3, #48	; 0x30
 80010ae:	643b      	str	r3, [r7, #64]	; 0x40
				c = *fmt++;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	1c5a      	adds	r2, r3, #1
 80010b4:	607a      	str	r2, [r7, #4]
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			while (c >= '0' && c <= '9') {	/* Minimum width */
 80010bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80010c0:	2b2f      	cmp	r3, #47	; 0x2f
 80010c2:	d903      	bls.n	80010cc <xvprintf+0xe0>
 80010c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80010c8:	2b39      	cmp	r3, #57	; 0x39
 80010ca:	d9e6      	bls.n	800109a <xvprintf+0xae>
			}
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long */
 80010cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80010d0:	2b6c      	cmp	r3, #108	; 0x6c
 80010d2:	d003      	beq.n	80010dc <xvprintf+0xf0>
 80010d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80010d8:	2b4c      	cmp	r3, #76	; 0x4c
 80010da:	d109      	bne.n	80010f0 <xvprintf+0x104>
			f |= 4; c = *fmt++;
 80010dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010de:	f043 0304 	orr.w	r3, r3, #4
 80010e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	1c5a      	adds	r2, r3, #1
 80010e8:	607a      	str	r2, [r7, #4]
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			if (c == 'l' || c == 'L') {	/* Prefix: Size is long long */
				f |= 8; c = *fmt++;
			}
#endif
		}
		if (!c) break;				/* End of format? */
 80010f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	f000 812e 	beq.w	8001356 <xvprintf+0x36a>
		d = c;
 80010fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80010fe:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		if (d >= 'a') d -= 0x20;
 8001102:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001106:	2b60      	cmp	r3, #96	; 0x60
 8001108:	d904      	bls.n	8001114 <xvprintf+0x128>
 800110a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800110e:	3b20      	subs	r3, #32
 8001110:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		switch (d) {				/* Type is... */
 8001114:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001118:	3b42      	subs	r3, #66	; 0x42
 800111a:	2b16      	cmp	r3, #22
 800111c:	d873      	bhi.n	8001206 <xvprintf+0x21a>
 800111e:	a201      	add	r2, pc, #4	; (adr r2, 8001124 <xvprintf+0x138>)
 8001120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001124:	080011ef 	.word	0x080011ef
 8001128:	080011dd 	.word	0x080011dd
 800112c:	080011fb 	.word	0x080011fb
 8001130:	08001207 	.word	0x08001207
 8001134:	08001207 	.word	0x08001207
 8001138:	08001207 	.word	0x08001207
 800113c:	08001207 	.word	0x08001207
 8001140:	08001207 	.word	0x08001207
 8001144:	08001207 	.word	0x08001207
 8001148:	08001207 	.word	0x08001207
 800114c:	08001207 	.word	0x08001207
 8001150:	08001207 	.word	0x08001207
 8001154:	08001207 	.word	0x08001207
 8001158:	080011f5 	.word	0x080011f5
 800115c:	08001207 	.word	0x08001207
 8001160:	08001207 	.word	0x08001207
 8001164:	08001207 	.word	0x08001207
 8001168:	08001181 	.word	0x08001181
 800116c:	08001207 	.word	0x08001207
 8001170:	080011fb 	.word	0x080011fb
 8001174:	08001207 	.word	0x08001207
 8001178:	08001207 	.word	0x08001207
 800117c:	08001201 	.word	0x08001201
		case 'S' :					/* String */
			p = va_arg(arp, char*);
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	1d1a      	adds	r2, r3, #4
 8001184:	603a      	str	r2, [r7, #0]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	62bb      	str	r3, [r7, #40]	; 0x28
			for (j = 0; p[j]; j++) ;
 800118a:	2300      	movs	r3, #0
 800118c:	647b      	str	r3, [r7, #68]	; 0x44
 800118e:	e002      	b.n	8001196 <xvprintf+0x1aa>
 8001190:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001192:	3301      	adds	r3, #1
 8001194:	647b      	str	r3, [r7, #68]	; 0x44
 8001196:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001198:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800119a:	4413      	add	r3, r2
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d1f6      	bne.n	8001190 <xvprintf+0x1a4>
			while (!(f & 2) && j++ < w) xputc(' ');
 80011a2:	e002      	b.n	80011aa <xvprintf+0x1be>
 80011a4:	2020      	movs	r0, #32
 80011a6:	f7ff fee5 	bl	8000f74 <xputc>
 80011aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011ac:	f003 0302 	and.w	r3, r3, #2
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d105      	bne.n	80011c0 <xvprintf+0x1d4>
 80011b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011b6:	1c5a      	adds	r2, r3, #1
 80011b8:	647a      	str	r2, [r7, #68]	; 0x44
 80011ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80011bc:	429a      	cmp	r2, r3
 80011be:	d8f1      	bhi.n	80011a4 <xvprintf+0x1b8>
			xputs(p);
 80011c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80011c2:	f7ff feff 	bl	8000fc4 <xputs>
			while (j++ < w) xputc(' ');
 80011c6:	e002      	b.n	80011ce <xvprintf+0x1e2>
 80011c8:	2020      	movs	r0, #32
 80011ca:	f7ff fed3 	bl	8000f74 <xputc>
 80011ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011d0:	1c5a      	adds	r2, r3, #1
 80011d2:	647a      	str	r2, [r7, #68]	; 0x44
 80011d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80011d6:	429a      	cmp	r2, r3
 80011d8:	d8f6      	bhi.n	80011c8 <xvprintf+0x1dc>
			continue;
 80011da:	e0b9      	b.n	8001350 <xvprintf+0x364>
		case 'C' :					/* Character */
			xputc((char)va_arg(arp, int)); continue;
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	1d1a      	adds	r2, r3, #4
 80011e0:	603a      	str	r2, [r7, #0]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff fec4 	bl	8000f74 <xputc>
 80011ec:	e0b0      	b.n	8001350 <xvprintf+0x364>
		case 'B' :					/* Binary */
			r = 2; break;
 80011ee:	2302      	movs	r3, #2
 80011f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80011f2:	e00e      	b.n	8001212 <xvprintf+0x226>
		case 'O' :					/* Octal */
			r = 8; break;
 80011f4:	2308      	movs	r3, #8
 80011f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80011f8:	e00b      	b.n	8001212 <xvprintf+0x226>
		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 80011fa:	230a      	movs	r3, #10
 80011fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80011fe:	e008      	b.n	8001212 <xvprintf+0x226>
		case 'X' :					/* Hexdecimal */
			r = 16; break;
 8001200:	2310      	movs	r3, #16
 8001202:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001204:	e005      	b.n	8001212 <xvprintf+0x226>
		default:					/* Unknown type (passthrough) */
			xputc(c); continue;
 8001206:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff feb2 	bl	8000f74 <xputc>
 8001210:	e09e      	b.n	8001350 <xvprintf+0x364>
			} else {		/* int/short/char argument */
				v = (d == 'D') ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int);
			}
		}
#else
		if (f & 4) {	/* long argument? */
 8001212:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001214:	f003 0304 	and.w	r3, r3, #4
 8001218:	2b00      	cmp	r3, #0
 800121a:	d005      	beq.n	8001228 <xvprintf+0x23c>
			v = va_arg(arp, long);
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	1d1a      	adds	r2, r3, #4
 8001220:	603a      	str	r2, [r7, #0]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	633b      	str	r3, [r7, #48]	; 0x30
 8001226:	e00d      	b.n	8001244 <xvprintf+0x258>
		} else {		/* int/short/char argument */
			v = (d == 'D') ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int);
 8001228:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800122c:	2b44      	cmp	r3, #68	; 0x44
 800122e:	d104      	bne.n	800123a <xvprintf+0x24e>
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	1d1a      	adds	r2, r3, #4
 8001234:	603a      	str	r2, [r7, #0]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	e003      	b.n	8001242 <xvprintf+0x256>
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	1d1a      	adds	r2, r3, #4
 800123e:	603a      	str	r2, [r7, #0]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	633b      	str	r3, [r7, #48]	; 0x30
		}
#endif
		if (d == 'D' && v < 0) {	/* Negative value? */
 8001244:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001248:	2b44      	cmp	r3, #68	; 0x44
 800124a:	d109      	bne.n	8001260 <xvprintf+0x274>
 800124c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800124e:	2b00      	cmp	r3, #0
 8001250:	da06      	bge.n	8001260 <xvprintf+0x274>
			v = 0 - v; f |= 16;
 8001252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001254:	425b      	negs	r3, r3
 8001256:	633b      	str	r3, [r7, #48]	; 0x30
 8001258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800125a:	f043 0310 	orr.w	r3, r3, #16
 800125e:	63fb      	str	r3, [r7, #60]	; 0x3c
		}
		i = 0; vs = v;
 8001260:	2300      	movs	r3, #0
 8001262:	64bb      	str	r3, [r7, #72]	; 0x48
 8001264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001266:	62fb      	str	r3, [r7, #44]	; 0x2c
		do {
			d = (char)(vs % r); vs /= r;
 8001268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800126a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800126c:	fbb3 f2f2 	udiv	r2, r3, r2
 8001270:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001272:	fb01 f202 	mul.w	r2, r1, r2
 8001276:	1a9b      	subs	r3, r3, r2
 8001278:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800127c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800127e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001280:	fbb2 f3f3 	udiv	r3, r2, r3
 8001284:	62fb      	str	r3, [r7, #44]	; 0x2c
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8001286:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800128a:	2b09      	cmp	r3, #9
 800128c:	d90b      	bls.n	80012a6 <xvprintf+0x2ba>
 800128e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001292:	2b78      	cmp	r3, #120	; 0x78
 8001294:	d101      	bne.n	800129a <xvprintf+0x2ae>
 8001296:	2227      	movs	r2, #39	; 0x27
 8001298:	e000      	b.n	800129c <xvprintf+0x2b0>
 800129a:	2207      	movs	r2, #7
 800129c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80012a0:	4413      	add	r3, r2
 80012a2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			s[i++] = d + '0';
 80012a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80012a8:	1c5a      	adds	r2, r3, #1
 80012aa:	64ba      	str	r2, [r7, #72]	; 0x48
 80012ac:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80012b0:	3230      	adds	r2, #48	; 0x30
 80012b2:	b2d2      	uxtb	r2, r2
 80012b4:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80012b8:	440b      	add	r3, r1
 80012ba:	f803 2c48 	strb.w	r2, [r3, #-72]
		} while (vs != 0 && i < sizeof s);
 80012be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d002      	beq.n	80012ca <xvprintf+0x2de>
 80012c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80012c6:	2b1f      	cmp	r3, #31
 80012c8:	d9ce      	bls.n	8001268 <xvprintf+0x27c>
		if (f & 16) s[i++] = '-';
 80012ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012cc:	f003 0310 	and.w	r3, r3, #16
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d008      	beq.n	80012e6 <xvprintf+0x2fa>
 80012d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80012d6:	1c5a      	adds	r2, r3, #1
 80012d8:	64ba      	str	r2, [r7, #72]	; 0x48
 80012da:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80012de:	4413      	add	r3, r2
 80012e0:	222d      	movs	r2, #45	; 0x2d
 80012e2:	f803 2c48 	strb.w	r2, [r3, #-72]
		j = i; d = (f & 1) ? '0' : ' ';
 80012e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80012e8:	647b      	str	r3, [r7, #68]	; 0x44
 80012ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012ec:	f003 0301 	and.w	r3, r3, #1
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <xvprintf+0x30c>
 80012f4:	2330      	movs	r3, #48	; 0x30
 80012f6:	e000      	b.n	80012fa <xvprintf+0x30e>
 80012f8:	2320      	movs	r3, #32
 80012fa:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		while (!(f & 2) && j++ < w) xputc(d);
 80012fe:	e004      	b.n	800130a <xvprintf+0x31e>
 8001300:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff fe35 	bl	8000f74 <xputc>
 800130a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800130c:	f003 0302 	and.w	r3, r3, #2
 8001310:	2b00      	cmp	r3, #0
 8001312:	d105      	bne.n	8001320 <xvprintf+0x334>
 8001314:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001316:	1c5a      	adds	r2, r3, #1
 8001318:	647a      	str	r2, [r7, #68]	; 0x44
 800131a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800131c:	429a      	cmp	r2, r3
 800131e:	d8ef      	bhi.n	8001300 <xvprintf+0x314>
		do xputc(s[--i]); while (i != 0);
 8001320:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001322:	3b01      	subs	r3, #1
 8001324:	64bb      	str	r3, [r7, #72]	; 0x48
 8001326:	f107 0208 	add.w	r2, r7, #8
 800132a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800132c:	4413      	add	r3, r2
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff fe1f 	bl	8000f74 <xputc>
 8001336:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001338:	2b00      	cmp	r3, #0
 800133a:	d1f1      	bne.n	8001320 <xvprintf+0x334>
		while (j++ < w) xputc(' ');
 800133c:	e002      	b.n	8001344 <xvprintf+0x358>
 800133e:	2020      	movs	r0, #32
 8001340:	f7ff fe18 	bl	8000f74 <xputc>
 8001344:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001346:	1c5a      	adds	r2, r3, #1
 8001348:	647a      	str	r2, [r7, #68]	; 0x44
 800134a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800134c:	429a      	cmp	r2, r3
 800134e:	d8f6      	bhi.n	800133e <xvprintf+0x352>
		c = *fmt++;					/* Get a format character */
 8001350:	e651      	b.n	8000ff6 <xvprintf+0xa>
		if (!c) break;				/* End of format? */
 8001352:	bf00      	nop
 8001354:	e000      	b.n	8001358 <xvprintf+0x36c>
		if (!c) break;				/* End of format? */
 8001356:	bf00      	nop
	}
}
 8001358:	bf00      	nop
 800135a:	3750      	adds	r7, #80	; 0x50
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <xprintf>:

void xprintf (			/* Put a formatted string to the default device */
	const char*	fmt,	/* Pointer to the format string */
	...					/* Optional arguments */
)
{
 8001360:	b40f      	push	{r0, r1, r2, r3}
 8001362:	b580      	push	{r7, lr}
 8001364:	b082      	sub	sp, #8
 8001366:	af00      	add	r7, sp, #0
	va_list arp;


	va_start(arp, fmt);
 8001368:	f107 0314 	add.w	r3, r7, #20
 800136c:	607b      	str	r3, [r7, #4]
	xvprintf(fmt, arp);
 800136e:	6879      	ldr	r1, [r7, #4]
 8001370:	6938      	ldr	r0, [r7, #16]
 8001372:	f7ff fe3b 	bl	8000fec <xvprintf>
	va_end(arp);
}
 8001376:	bf00      	nop
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001380:	b004      	add	sp, #16
 8001382:	4770      	bx	lr

08001384 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001384:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013bc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001388:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800138a:	e003      	b.n	8001394 <LoopCopyDataInit>

0800138c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800138c:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800138e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001390:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001392:	3104      	adds	r1, #4

08001394 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001394:	480b      	ldr	r0, [pc, #44]	; (80013c4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001396:	4b0c      	ldr	r3, [pc, #48]	; (80013c8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001398:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800139a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800139c:	d3f6      	bcc.n	800138c <CopyDataInit>
  ldr  r2, =_sbss
 800139e:	4a0b      	ldr	r2, [pc, #44]	; (80013cc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80013a0:	e002      	b.n	80013a8 <LoopFillZerobss>

080013a2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80013a2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80013a4:	f842 3b04 	str.w	r3, [r2], #4

080013a8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80013a8:	4b09      	ldr	r3, [pc, #36]	; (80013d0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80013aa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80013ac:	d3f9      	bcc.n	80013a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80013ae:	f7ff fdcb 	bl	8000f48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013b2:	f001 ffb9 	bl	8003328 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013b6:	f7ff f8f9 	bl	80005ac <main>
  bx  lr    
 80013ba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80013bc:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80013c0:	080033d4 	.word	0x080033d4
  ldr  r0, =_sdata
 80013c4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80013c8:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80013cc:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80013d0:	20000278 	.word	0x20000278

080013d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013d4:	e7fe      	b.n	80013d4 <ADC_IRQHandler>
	...

080013d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013dc:	4b0e      	ldr	r3, [pc, #56]	; (8001418 <HAL_Init+0x40>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a0d      	ldr	r2, [pc, #52]	; (8001418 <HAL_Init+0x40>)
 80013e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013e8:	4b0b      	ldr	r3, [pc, #44]	; (8001418 <HAL_Init+0x40>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a0a      	ldr	r2, [pc, #40]	; (8001418 <HAL_Init+0x40>)
 80013ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013f4:	4b08      	ldr	r3, [pc, #32]	; (8001418 <HAL_Init+0x40>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a07      	ldr	r2, [pc, #28]	; (8001418 <HAL_Init+0x40>)
 80013fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001400:	2003      	movs	r0, #3
 8001402:	f000 f92b 	bl	800165c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001406:	2000      	movs	r0, #0
 8001408:	f000 f808 	bl	800141c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800140c:	f7ff fbda 	bl	8000bc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001410:	2300      	movs	r3, #0
}
 8001412:	4618      	mov	r0, r3
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40023c00 	.word	0x40023c00

0800141c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001424:	4b12      	ldr	r3, [pc, #72]	; (8001470 <HAL_InitTick+0x54>)
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	4b12      	ldr	r3, [pc, #72]	; (8001474 <HAL_InitTick+0x58>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	4619      	mov	r1, r3
 800142e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001432:	fbb3 f3f1 	udiv	r3, r3, r1
 8001436:	fbb2 f3f3 	udiv	r3, r2, r3
 800143a:	4618      	mov	r0, r3
 800143c:	f000 f943 	bl	80016c6 <HAL_SYSTICK_Config>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e00e      	b.n	8001468 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2b0f      	cmp	r3, #15
 800144e:	d80a      	bhi.n	8001466 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001450:	2200      	movs	r2, #0
 8001452:	6879      	ldr	r1, [r7, #4]
 8001454:	f04f 30ff 	mov.w	r0, #4294967295
 8001458:	f000 f90b 	bl	8001672 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800145c:	4a06      	ldr	r2, [pc, #24]	; (8001478 <HAL_InitTick+0x5c>)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001462:	2300      	movs	r3, #0
 8001464:	e000      	b.n	8001468 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
}
 8001468:	4618      	mov	r0, r3
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	20000000 	.word	0x20000000
 8001474:	20000008 	.word	0x20000008
 8001478:	20000004 	.word	0x20000004

0800147c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001480:	4b06      	ldr	r3, [pc, #24]	; (800149c <HAL_IncTick+0x20>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	461a      	mov	r2, r3
 8001486:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <HAL_IncTick+0x24>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4413      	add	r3, r2
 800148c:	4a04      	ldr	r2, [pc, #16]	; (80014a0 <HAL_IncTick+0x24>)
 800148e:	6013      	str	r3, [r2, #0]
}
 8001490:	bf00      	nop
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	20000008 	.word	0x20000008
 80014a0:	20000274 	.word	0x20000274

080014a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  return uwTick;
 80014a8:	4b03      	ldr	r3, [pc, #12]	; (80014b8 <HAL_GetTick+0x14>)
 80014aa:	681b      	ldr	r3, [r3, #0]
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	20000274 	.word	0x20000274

080014bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014bc:	b480      	push	{r7}
 80014be:	b085      	sub	sp, #20
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	f003 0307 	and.w	r3, r3, #7
 80014ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014cc:	4b0c      	ldr	r3, [pc, #48]	; (8001500 <__NVIC_SetPriorityGrouping+0x44>)
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014d2:	68ba      	ldr	r2, [r7, #8]
 80014d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014d8:	4013      	ands	r3, r2
 80014da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ee:	4a04      	ldr	r2, [pc, #16]	; (8001500 <__NVIC_SetPriorityGrouping+0x44>)
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	60d3      	str	r3, [r2, #12]
}
 80014f4:	bf00      	nop
 80014f6:	3714      	adds	r7, #20
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr
 8001500:	e000ed00 	.word	0xe000ed00

08001504 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001508:	4b04      	ldr	r3, [pc, #16]	; (800151c <__NVIC_GetPriorityGrouping+0x18>)
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	0a1b      	lsrs	r3, r3, #8
 800150e:	f003 0307 	and.w	r3, r3, #7
}
 8001512:	4618      	mov	r0, r3
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr
 800151c:	e000ed00 	.word	0xe000ed00

08001520 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	4603      	mov	r3, r0
 8001528:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800152a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152e:	2b00      	cmp	r3, #0
 8001530:	db0b      	blt.n	800154a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001532:	79fb      	ldrb	r3, [r7, #7]
 8001534:	f003 021f 	and.w	r2, r3, #31
 8001538:	4907      	ldr	r1, [pc, #28]	; (8001558 <__NVIC_EnableIRQ+0x38>)
 800153a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153e:	095b      	lsrs	r3, r3, #5
 8001540:	2001      	movs	r0, #1
 8001542:	fa00 f202 	lsl.w	r2, r0, r2
 8001546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800154a:	bf00      	nop
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	e000e100 	.word	0xe000e100

0800155c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	4603      	mov	r3, r0
 8001564:	6039      	str	r1, [r7, #0]
 8001566:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001568:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156c:	2b00      	cmp	r3, #0
 800156e:	db0a      	blt.n	8001586 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	b2da      	uxtb	r2, r3
 8001574:	490c      	ldr	r1, [pc, #48]	; (80015a8 <__NVIC_SetPriority+0x4c>)
 8001576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157a:	0112      	lsls	r2, r2, #4
 800157c:	b2d2      	uxtb	r2, r2
 800157e:	440b      	add	r3, r1
 8001580:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001584:	e00a      	b.n	800159c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	b2da      	uxtb	r2, r3
 800158a:	4908      	ldr	r1, [pc, #32]	; (80015ac <__NVIC_SetPriority+0x50>)
 800158c:	79fb      	ldrb	r3, [r7, #7]
 800158e:	f003 030f 	and.w	r3, r3, #15
 8001592:	3b04      	subs	r3, #4
 8001594:	0112      	lsls	r2, r2, #4
 8001596:	b2d2      	uxtb	r2, r2
 8001598:	440b      	add	r3, r1
 800159a:	761a      	strb	r2, [r3, #24]
}
 800159c:	bf00      	nop
 800159e:	370c      	adds	r7, #12
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr
 80015a8:	e000e100 	.word	0xe000e100
 80015ac:	e000ed00 	.word	0xe000ed00

080015b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b089      	sub	sp, #36	; 0x24
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	60f8      	str	r0, [r7, #12]
 80015b8:	60b9      	str	r1, [r7, #8]
 80015ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	f003 0307 	and.w	r3, r3, #7
 80015c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	f1c3 0307 	rsb	r3, r3, #7
 80015ca:	2b04      	cmp	r3, #4
 80015cc:	bf28      	it	cs
 80015ce:	2304      	movcs	r3, #4
 80015d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	3304      	adds	r3, #4
 80015d6:	2b06      	cmp	r3, #6
 80015d8:	d902      	bls.n	80015e0 <NVIC_EncodePriority+0x30>
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	3b03      	subs	r3, #3
 80015de:	e000      	b.n	80015e2 <NVIC_EncodePriority+0x32>
 80015e0:	2300      	movs	r3, #0
 80015e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e4:	f04f 32ff 	mov.w	r2, #4294967295
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	fa02 f303 	lsl.w	r3, r2, r3
 80015ee:	43da      	mvns	r2, r3
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	401a      	ands	r2, r3
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015f8:	f04f 31ff 	mov.w	r1, #4294967295
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001602:	43d9      	mvns	r1, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001608:	4313      	orrs	r3, r2
         );
}
 800160a:	4618      	mov	r0, r3
 800160c:	3724      	adds	r7, #36	; 0x24
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
	...

08001618 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	3b01      	subs	r3, #1
 8001624:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001628:	d301      	bcc.n	800162e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800162a:	2301      	movs	r3, #1
 800162c:	e00f      	b.n	800164e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800162e:	4a0a      	ldr	r2, [pc, #40]	; (8001658 <SysTick_Config+0x40>)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	3b01      	subs	r3, #1
 8001634:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001636:	210f      	movs	r1, #15
 8001638:	f04f 30ff 	mov.w	r0, #4294967295
 800163c:	f7ff ff8e 	bl	800155c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001640:	4b05      	ldr	r3, [pc, #20]	; (8001658 <SysTick_Config+0x40>)
 8001642:	2200      	movs	r2, #0
 8001644:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001646:	4b04      	ldr	r3, [pc, #16]	; (8001658 <SysTick_Config+0x40>)
 8001648:	2207      	movs	r2, #7
 800164a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800164c:	2300      	movs	r3, #0
}
 800164e:	4618      	mov	r0, r3
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	e000e010 	.word	0xe000e010

0800165c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f7ff ff29 	bl	80014bc <__NVIC_SetPriorityGrouping>
}
 800166a:	bf00      	nop
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}

08001672 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001672:	b580      	push	{r7, lr}
 8001674:	b086      	sub	sp, #24
 8001676:	af00      	add	r7, sp, #0
 8001678:	4603      	mov	r3, r0
 800167a:	60b9      	str	r1, [r7, #8]
 800167c:	607a      	str	r2, [r7, #4]
 800167e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001680:	2300      	movs	r3, #0
 8001682:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001684:	f7ff ff3e 	bl	8001504 <__NVIC_GetPriorityGrouping>
 8001688:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	68b9      	ldr	r1, [r7, #8]
 800168e:	6978      	ldr	r0, [r7, #20]
 8001690:	f7ff ff8e 	bl	80015b0 <NVIC_EncodePriority>
 8001694:	4602      	mov	r2, r0
 8001696:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800169a:	4611      	mov	r1, r2
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff ff5d 	bl	800155c <__NVIC_SetPriority>
}
 80016a2:	bf00      	nop
 80016a4:	3718      	adds	r7, #24
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}

080016aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b082      	sub	sp, #8
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	4603      	mov	r3, r0
 80016b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff ff31 	bl	8001520 <__NVIC_EnableIRQ>
}
 80016be:	bf00      	nop
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b082      	sub	sp, #8
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f7ff ffa2 	bl	8001618 <SysTick_Config>
 80016d4:	4603      	mov	r3, r0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
	...

080016e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b089      	sub	sp, #36	; 0x24
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016ea:	2300      	movs	r3, #0
 80016ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016ee:	2300      	movs	r3, #0
 80016f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016f2:	2300      	movs	r3, #0
 80016f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016f6:	2300      	movs	r3, #0
 80016f8:	61fb      	str	r3, [r7, #28]
 80016fa:	e159      	b.n	80019b0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016fc:	2201      	movs	r2, #1
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	697a      	ldr	r2, [r7, #20]
 800170c:	4013      	ands	r3, r2
 800170e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001710:	693a      	ldr	r2, [r7, #16]
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	429a      	cmp	r2, r3
 8001716:	f040 8148 	bne.w	80019aa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d00b      	beq.n	800173a <HAL_GPIO_Init+0x5a>
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	2b02      	cmp	r3, #2
 8001728:	d007      	beq.n	800173a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800172e:	2b11      	cmp	r3, #17
 8001730:	d003      	beq.n	800173a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	2b12      	cmp	r3, #18
 8001738:	d130      	bne.n	800179c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	2203      	movs	r2, #3
 8001746:	fa02 f303 	lsl.w	r3, r2, r3
 800174a:	43db      	mvns	r3, r3
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	4013      	ands	r3, r2
 8001750:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	68da      	ldr	r2, [r3, #12]
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	fa02 f303 	lsl.w	r3, r2, r3
 800175e:	69ba      	ldr	r2, [r7, #24]
 8001760:	4313      	orrs	r3, r2
 8001762:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	69ba      	ldr	r2, [r7, #24]
 8001768:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001770:	2201      	movs	r2, #1
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	43db      	mvns	r3, r3
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	4013      	ands	r3, r2
 800177e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	091b      	lsrs	r3, r3, #4
 8001786:	f003 0201 	and.w	r2, r3, #1
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	4313      	orrs	r3, r2
 8001794:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	2203      	movs	r2, #3
 80017a8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ac:	43db      	mvns	r3, r3
 80017ae:	69ba      	ldr	r2, [r7, #24]
 80017b0:	4013      	ands	r3, r2
 80017b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	689a      	ldr	r2, [r3, #8]
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d003      	beq.n	80017dc <HAL_GPIO_Init+0xfc>
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	2b12      	cmp	r3, #18
 80017da:	d123      	bne.n	8001824 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	08da      	lsrs	r2, r3, #3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	3208      	adds	r2, #8
 80017e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	f003 0307 	and.w	r3, r3, #7
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	220f      	movs	r2, #15
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	43db      	mvns	r3, r3
 80017fa:	69ba      	ldr	r2, [r7, #24]
 80017fc:	4013      	ands	r3, r2
 80017fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	691a      	ldr	r2, [r3, #16]
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	f003 0307 	and.w	r3, r3, #7
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	fa02 f303 	lsl.w	r3, r2, r3
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	4313      	orrs	r3, r2
 8001814:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	08da      	lsrs	r2, r3, #3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	3208      	adds	r2, #8
 800181e:	69b9      	ldr	r1, [r7, #24]
 8001820:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	2203      	movs	r2, #3
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	43db      	mvns	r3, r3
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	4013      	ands	r3, r2
 800183a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f003 0203 	and.w	r2, r3, #3
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	4313      	orrs	r3, r2
 8001850:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	69ba      	ldr	r2, [r7, #24]
 8001856:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001860:	2b00      	cmp	r3, #0
 8001862:	f000 80a2 	beq.w	80019aa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	60fb      	str	r3, [r7, #12]
 800186a:	4b56      	ldr	r3, [pc, #344]	; (80019c4 <HAL_GPIO_Init+0x2e4>)
 800186c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186e:	4a55      	ldr	r2, [pc, #340]	; (80019c4 <HAL_GPIO_Init+0x2e4>)
 8001870:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001874:	6453      	str	r3, [r2, #68]	; 0x44
 8001876:	4b53      	ldr	r3, [pc, #332]	; (80019c4 <HAL_GPIO_Init+0x2e4>)
 8001878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001882:	4a51      	ldr	r2, [pc, #324]	; (80019c8 <HAL_GPIO_Init+0x2e8>)
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	089b      	lsrs	r3, r3, #2
 8001888:	3302      	adds	r3, #2
 800188a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800188e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	f003 0303 	and.w	r3, r3, #3
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	220f      	movs	r2, #15
 800189a:	fa02 f303 	lsl.w	r3, r2, r3
 800189e:	43db      	mvns	r3, r3
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	4013      	ands	r3, r2
 80018a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a48      	ldr	r2, [pc, #288]	; (80019cc <HAL_GPIO_Init+0x2ec>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d019      	beq.n	80018e2 <HAL_GPIO_Init+0x202>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4a47      	ldr	r2, [pc, #284]	; (80019d0 <HAL_GPIO_Init+0x2f0>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d013      	beq.n	80018de <HAL_GPIO_Init+0x1fe>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4a46      	ldr	r2, [pc, #280]	; (80019d4 <HAL_GPIO_Init+0x2f4>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d00d      	beq.n	80018da <HAL_GPIO_Init+0x1fa>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a45      	ldr	r2, [pc, #276]	; (80019d8 <HAL_GPIO_Init+0x2f8>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d007      	beq.n	80018d6 <HAL_GPIO_Init+0x1f6>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4a44      	ldr	r2, [pc, #272]	; (80019dc <HAL_GPIO_Init+0x2fc>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d101      	bne.n	80018d2 <HAL_GPIO_Init+0x1f2>
 80018ce:	2304      	movs	r3, #4
 80018d0:	e008      	b.n	80018e4 <HAL_GPIO_Init+0x204>
 80018d2:	2307      	movs	r3, #7
 80018d4:	e006      	b.n	80018e4 <HAL_GPIO_Init+0x204>
 80018d6:	2303      	movs	r3, #3
 80018d8:	e004      	b.n	80018e4 <HAL_GPIO_Init+0x204>
 80018da:	2302      	movs	r3, #2
 80018dc:	e002      	b.n	80018e4 <HAL_GPIO_Init+0x204>
 80018de:	2301      	movs	r3, #1
 80018e0:	e000      	b.n	80018e4 <HAL_GPIO_Init+0x204>
 80018e2:	2300      	movs	r3, #0
 80018e4:	69fa      	ldr	r2, [r7, #28]
 80018e6:	f002 0203 	and.w	r2, r2, #3
 80018ea:	0092      	lsls	r2, r2, #2
 80018ec:	4093      	lsls	r3, r2
 80018ee:	69ba      	ldr	r2, [r7, #24]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018f4:	4934      	ldr	r1, [pc, #208]	; (80019c8 <HAL_GPIO_Init+0x2e8>)
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	089b      	lsrs	r3, r3, #2
 80018fa:	3302      	adds	r3, #2
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001902:	4b37      	ldr	r3, [pc, #220]	; (80019e0 <HAL_GPIO_Init+0x300>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	43db      	mvns	r3, r3
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	4013      	ands	r3, r2
 8001910:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d003      	beq.n	8001926 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800191e:	69ba      	ldr	r2, [r7, #24]
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	4313      	orrs	r3, r2
 8001924:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001926:	4a2e      	ldr	r2, [pc, #184]	; (80019e0 <HAL_GPIO_Init+0x300>)
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800192c:	4b2c      	ldr	r3, [pc, #176]	; (80019e0 <HAL_GPIO_Init+0x300>)
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	43db      	mvns	r3, r3
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	4013      	ands	r3, r2
 800193a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d003      	beq.n	8001950 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	4313      	orrs	r3, r2
 800194e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001950:	4a23      	ldr	r2, [pc, #140]	; (80019e0 <HAL_GPIO_Init+0x300>)
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001956:	4b22      	ldr	r3, [pc, #136]	; (80019e0 <HAL_GPIO_Init+0x300>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	43db      	mvns	r3, r3
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	4013      	ands	r3, r2
 8001964:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d003      	beq.n	800197a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001972:	69ba      	ldr	r2, [r7, #24]
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	4313      	orrs	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800197a:	4a19      	ldr	r2, [pc, #100]	; (80019e0 <HAL_GPIO_Init+0x300>)
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001980:	4b17      	ldr	r3, [pc, #92]	; (80019e0 <HAL_GPIO_Init+0x300>)
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	43db      	mvns	r3, r3
 800198a:	69ba      	ldr	r2, [r7, #24]
 800198c:	4013      	ands	r3, r2
 800198e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d003      	beq.n	80019a4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019a4:	4a0e      	ldr	r2, [pc, #56]	; (80019e0 <HAL_GPIO_Init+0x300>)
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	3301      	adds	r3, #1
 80019ae:	61fb      	str	r3, [r7, #28]
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	2b0f      	cmp	r3, #15
 80019b4:	f67f aea2 	bls.w	80016fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019b8:	bf00      	nop
 80019ba:	3724      	adds	r7, #36	; 0x24
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr
 80019c4:	40023800 	.word	0x40023800
 80019c8:	40013800 	.word	0x40013800
 80019cc:	40020000 	.word	0x40020000
 80019d0:	40020400 	.word	0x40020400
 80019d4:	40020800 	.word	0x40020800
 80019d8:	40020c00 	.word	0x40020c00
 80019dc:	40021000 	.word	0x40021000
 80019e0:	40013c00 	.word	0x40013c00

080019e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	460b      	mov	r3, r1
 80019ee:	807b      	strh	r3, [r7, #2]
 80019f0:	4613      	mov	r3, r2
 80019f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019f4:	787b      	ldrb	r3, [r7, #1]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d003      	beq.n	8001a02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019fa:	887a      	ldrh	r2, [r7, #2]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a00:	e003      	b.n	8001a0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a02:	887b      	ldrh	r3, [r7, #2]
 8001a04:	041a      	lsls	r2, r3, #16
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	619a      	str	r2, [r3, #24]
}
 8001a0a:	bf00      	nop
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
	...

08001a18 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b086      	sub	sp, #24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d101      	bne.n	8001a2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e25b      	b.n	8001ee2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d075      	beq.n	8001b22 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a36:	4ba3      	ldr	r3, [pc, #652]	; (8001cc4 <HAL_RCC_OscConfig+0x2ac>)
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	f003 030c 	and.w	r3, r3, #12
 8001a3e:	2b04      	cmp	r3, #4
 8001a40:	d00c      	beq.n	8001a5c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a42:	4ba0      	ldr	r3, [pc, #640]	; (8001cc4 <HAL_RCC_OscConfig+0x2ac>)
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a4a:	2b08      	cmp	r3, #8
 8001a4c:	d112      	bne.n	8001a74 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a4e:	4b9d      	ldr	r3, [pc, #628]	; (8001cc4 <HAL_RCC_OscConfig+0x2ac>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a5a:	d10b      	bne.n	8001a74 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a5c:	4b99      	ldr	r3, [pc, #612]	; (8001cc4 <HAL_RCC_OscConfig+0x2ac>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d05b      	beq.n	8001b20 <HAL_RCC_OscConfig+0x108>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d157      	bne.n	8001b20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e236      	b.n	8001ee2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a7c:	d106      	bne.n	8001a8c <HAL_RCC_OscConfig+0x74>
 8001a7e:	4b91      	ldr	r3, [pc, #580]	; (8001cc4 <HAL_RCC_OscConfig+0x2ac>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a90      	ldr	r2, [pc, #576]	; (8001cc4 <HAL_RCC_OscConfig+0x2ac>)
 8001a84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a88:	6013      	str	r3, [r2, #0]
 8001a8a:	e01d      	b.n	8001ac8 <HAL_RCC_OscConfig+0xb0>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a94:	d10c      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x98>
 8001a96:	4b8b      	ldr	r3, [pc, #556]	; (8001cc4 <HAL_RCC_OscConfig+0x2ac>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a8a      	ldr	r2, [pc, #552]	; (8001cc4 <HAL_RCC_OscConfig+0x2ac>)
 8001a9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001aa0:	6013      	str	r3, [r2, #0]
 8001aa2:	4b88      	ldr	r3, [pc, #544]	; (8001cc4 <HAL_RCC_OscConfig+0x2ac>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a87      	ldr	r2, [pc, #540]	; (8001cc4 <HAL_RCC_OscConfig+0x2ac>)
 8001aa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aac:	6013      	str	r3, [r2, #0]
 8001aae:	e00b      	b.n	8001ac8 <HAL_RCC_OscConfig+0xb0>
 8001ab0:	4b84      	ldr	r3, [pc, #528]	; (8001cc4 <HAL_RCC_OscConfig+0x2ac>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a83      	ldr	r2, [pc, #524]	; (8001cc4 <HAL_RCC_OscConfig+0x2ac>)
 8001ab6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aba:	6013      	str	r3, [r2, #0]
 8001abc:	4b81      	ldr	r3, [pc, #516]	; (8001cc4 <HAL_RCC_OscConfig+0x2ac>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a80      	ldr	r2, [pc, #512]	; (8001cc4 <HAL_RCC_OscConfig+0x2ac>)
 8001ac2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ac6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d013      	beq.n	8001af8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad0:	f7ff fce8 	bl	80014a4 <HAL_GetTick>
 8001ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ad6:	e008      	b.n	8001aea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ad8:	f7ff fce4 	bl	80014a4 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b64      	cmp	r3, #100	; 0x64
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e1fb      	b.n	8001ee2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aea:	4b76      	ldr	r3, [pc, #472]	; (8001cc4 <HAL_RCC_OscConfig+0x2ac>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d0f0      	beq.n	8001ad8 <HAL_RCC_OscConfig+0xc0>
 8001af6:	e014      	b.n	8001b22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af8:	f7ff fcd4 	bl	80014a4 <HAL_GetTick>
 8001afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001afe:	e008      	b.n	8001b12 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b00:	f7ff fcd0 	bl	80014a4 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b64      	cmp	r3, #100	; 0x64
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e1e7      	b.n	8001ee2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b12:	4b6c      	ldr	r3, [pc, #432]	; (8001cc4 <HAL_RCC_OscConfig+0x2ac>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d1f0      	bne.n	8001b00 <HAL_RCC_OscConfig+0xe8>
 8001b1e:	e000      	b.n	8001b22 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d063      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b2e:	4b65      	ldr	r3, [pc, #404]	; (8001cc4 <HAL_RCC_OscConfig+0x2ac>)
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	f003 030c 	and.w	r3, r3, #12
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d00b      	beq.n	8001b52 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b3a:	4b62      	ldr	r3, [pc, #392]	; (8001cc4 <HAL_RCC_OscConfig+0x2ac>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b42:	2b08      	cmp	r3, #8
 8001b44:	d11c      	bne.n	8001b80 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b46:	4b5f      	ldr	r3, [pc, #380]	; (8001cc4 <HAL_RCC_OscConfig+0x2ac>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d116      	bne.n	8001b80 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b52:	4b5c      	ldr	r3, [pc, #368]	; (8001cc4 <HAL_RCC_OscConfig+0x2ac>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d005      	beq.n	8001b6a <HAL_RCC_OscConfig+0x152>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d001      	beq.n	8001b6a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e1bb      	b.n	8001ee2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b6a:	4b56      	ldr	r3, [pc, #344]	; (8001cc4 <HAL_RCC_OscConfig+0x2ac>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	691b      	ldr	r3, [r3, #16]
 8001b76:	00db      	lsls	r3, r3, #3
 8001b78:	4952      	ldr	r1, [pc, #328]	; (8001cc4 <HAL_RCC_OscConfig+0x2ac>)
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b7e:	e03a      	b.n	8001bf6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d020      	beq.n	8001bca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b88:	4b4f      	ldr	r3, [pc, #316]	; (8001cc8 <HAL_RCC_OscConfig+0x2b0>)
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b8e:	f7ff fc89 	bl	80014a4 <HAL_GetTick>
 8001b92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b94:	e008      	b.n	8001ba8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b96:	f7ff fc85 	bl	80014a4 <HAL_GetTick>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d901      	bls.n	8001ba8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	e19c      	b.n	8001ee2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ba8:	4b46      	ldr	r3, [pc, #280]	; (8001cc4 <HAL_RCC_OscConfig+0x2ac>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0302 	and.w	r3, r3, #2
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d0f0      	beq.n	8001b96 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bb4:	4b43      	ldr	r3, [pc, #268]	; (8001cc4 <HAL_RCC_OscConfig+0x2ac>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	691b      	ldr	r3, [r3, #16]
 8001bc0:	00db      	lsls	r3, r3, #3
 8001bc2:	4940      	ldr	r1, [pc, #256]	; (8001cc4 <HAL_RCC_OscConfig+0x2ac>)
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	600b      	str	r3, [r1, #0]
 8001bc8:	e015      	b.n	8001bf6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bca:	4b3f      	ldr	r3, [pc, #252]	; (8001cc8 <HAL_RCC_OscConfig+0x2b0>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd0:	f7ff fc68 	bl	80014a4 <HAL_GetTick>
 8001bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bd6:	e008      	b.n	8001bea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bd8:	f7ff fc64 	bl	80014a4 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e17b      	b.n	8001ee2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bea:	4b36      	ldr	r3, [pc, #216]	; (8001cc4 <HAL_RCC_OscConfig+0x2ac>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d1f0      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0308 	and.w	r3, r3, #8
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d030      	beq.n	8001c64 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	695b      	ldr	r3, [r3, #20]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d016      	beq.n	8001c38 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c0a:	4b30      	ldr	r3, [pc, #192]	; (8001ccc <HAL_RCC_OscConfig+0x2b4>)
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c10:	f7ff fc48 	bl	80014a4 <HAL_GetTick>
 8001c14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c16:	e008      	b.n	8001c2a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c18:	f7ff fc44 	bl	80014a4 <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d901      	bls.n	8001c2a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e15b      	b.n	8001ee2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c2a:	4b26      	ldr	r3, [pc, #152]	; (8001cc4 <HAL_RCC_OscConfig+0x2ac>)
 8001c2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c2e:	f003 0302 	and.w	r3, r3, #2
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d0f0      	beq.n	8001c18 <HAL_RCC_OscConfig+0x200>
 8001c36:	e015      	b.n	8001c64 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c38:	4b24      	ldr	r3, [pc, #144]	; (8001ccc <HAL_RCC_OscConfig+0x2b4>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c3e:	f7ff fc31 	bl	80014a4 <HAL_GetTick>
 8001c42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c44:	e008      	b.n	8001c58 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c46:	f7ff fc2d 	bl	80014a4 <HAL_GetTick>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d901      	bls.n	8001c58 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001c54:	2303      	movs	r3, #3
 8001c56:	e144      	b.n	8001ee2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c58:	4b1a      	ldr	r3, [pc, #104]	; (8001cc4 <HAL_RCC_OscConfig+0x2ac>)
 8001c5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c5c:	f003 0302 	and.w	r3, r3, #2
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d1f0      	bne.n	8001c46 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0304 	and.w	r3, r3, #4
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	f000 80a0 	beq.w	8001db2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c72:	2300      	movs	r3, #0
 8001c74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c76:	4b13      	ldr	r3, [pc, #76]	; (8001cc4 <HAL_RCC_OscConfig+0x2ac>)
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d10f      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c82:	2300      	movs	r3, #0
 8001c84:	60bb      	str	r3, [r7, #8]
 8001c86:	4b0f      	ldr	r3, [pc, #60]	; (8001cc4 <HAL_RCC_OscConfig+0x2ac>)
 8001c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8a:	4a0e      	ldr	r2, [pc, #56]	; (8001cc4 <HAL_RCC_OscConfig+0x2ac>)
 8001c8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c90:	6413      	str	r3, [r2, #64]	; 0x40
 8001c92:	4b0c      	ldr	r3, [pc, #48]	; (8001cc4 <HAL_RCC_OscConfig+0x2ac>)
 8001c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c9a:	60bb      	str	r3, [r7, #8]
 8001c9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ca2:	4b0b      	ldr	r3, [pc, #44]	; (8001cd0 <HAL_RCC_OscConfig+0x2b8>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d121      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cae:	4b08      	ldr	r3, [pc, #32]	; (8001cd0 <HAL_RCC_OscConfig+0x2b8>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a07      	ldr	r2, [pc, #28]	; (8001cd0 <HAL_RCC_OscConfig+0x2b8>)
 8001cb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cba:	f7ff fbf3 	bl	80014a4 <HAL_GetTick>
 8001cbe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cc0:	e011      	b.n	8001ce6 <HAL_RCC_OscConfig+0x2ce>
 8001cc2:	bf00      	nop
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	42470000 	.word	0x42470000
 8001ccc:	42470e80 	.word	0x42470e80
 8001cd0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cd4:	f7ff fbe6 	bl	80014a4 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e0fd      	b.n	8001ee2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ce6:	4b81      	ldr	r3, [pc, #516]	; (8001eec <HAL_RCC_OscConfig+0x4d4>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d0f0      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d106      	bne.n	8001d08 <HAL_RCC_OscConfig+0x2f0>
 8001cfa:	4b7d      	ldr	r3, [pc, #500]	; (8001ef0 <HAL_RCC_OscConfig+0x4d8>)
 8001cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cfe:	4a7c      	ldr	r2, [pc, #496]	; (8001ef0 <HAL_RCC_OscConfig+0x4d8>)
 8001d00:	f043 0301 	orr.w	r3, r3, #1
 8001d04:	6713      	str	r3, [r2, #112]	; 0x70
 8001d06:	e01c      	b.n	8001d42 <HAL_RCC_OscConfig+0x32a>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	2b05      	cmp	r3, #5
 8001d0e:	d10c      	bne.n	8001d2a <HAL_RCC_OscConfig+0x312>
 8001d10:	4b77      	ldr	r3, [pc, #476]	; (8001ef0 <HAL_RCC_OscConfig+0x4d8>)
 8001d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d14:	4a76      	ldr	r2, [pc, #472]	; (8001ef0 <HAL_RCC_OscConfig+0x4d8>)
 8001d16:	f043 0304 	orr.w	r3, r3, #4
 8001d1a:	6713      	str	r3, [r2, #112]	; 0x70
 8001d1c:	4b74      	ldr	r3, [pc, #464]	; (8001ef0 <HAL_RCC_OscConfig+0x4d8>)
 8001d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d20:	4a73      	ldr	r2, [pc, #460]	; (8001ef0 <HAL_RCC_OscConfig+0x4d8>)
 8001d22:	f043 0301 	orr.w	r3, r3, #1
 8001d26:	6713      	str	r3, [r2, #112]	; 0x70
 8001d28:	e00b      	b.n	8001d42 <HAL_RCC_OscConfig+0x32a>
 8001d2a:	4b71      	ldr	r3, [pc, #452]	; (8001ef0 <HAL_RCC_OscConfig+0x4d8>)
 8001d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d2e:	4a70      	ldr	r2, [pc, #448]	; (8001ef0 <HAL_RCC_OscConfig+0x4d8>)
 8001d30:	f023 0301 	bic.w	r3, r3, #1
 8001d34:	6713      	str	r3, [r2, #112]	; 0x70
 8001d36:	4b6e      	ldr	r3, [pc, #440]	; (8001ef0 <HAL_RCC_OscConfig+0x4d8>)
 8001d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d3a:	4a6d      	ldr	r2, [pc, #436]	; (8001ef0 <HAL_RCC_OscConfig+0x4d8>)
 8001d3c:	f023 0304 	bic.w	r3, r3, #4
 8001d40:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d015      	beq.n	8001d76 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d4a:	f7ff fbab 	bl	80014a4 <HAL_GetTick>
 8001d4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d50:	e00a      	b.n	8001d68 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d52:	f7ff fba7 	bl	80014a4 <HAL_GetTick>
 8001d56:	4602      	mov	r2, r0
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d901      	bls.n	8001d68 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	e0bc      	b.n	8001ee2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d68:	4b61      	ldr	r3, [pc, #388]	; (8001ef0 <HAL_RCC_OscConfig+0x4d8>)
 8001d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d6c:	f003 0302 	and.w	r3, r3, #2
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d0ee      	beq.n	8001d52 <HAL_RCC_OscConfig+0x33a>
 8001d74:	e014      	b.n	8001da0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d76:	f7ff fb95 	bl	80014a4 <HAL_GetTick>
 8001d7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d7c:	e00a      	b.n	8001d94 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d7e:	f7ff fb91 	bl	80014a4 <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d901      	bls.n	8001d94 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e0a6      	b.n	8001ee2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d94:	4b56      	ldr	r3, [pc, #344]	; (8001ef0 <HAL_RCC_OscConfig+0x4d8>)
 8001d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d1ee      	bne.n	8001d7e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001da0:	7dfb      	ldrb	r3, [r7, #23]
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d105      	bne.n	8001db2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001da6:	4b52      	ldr	r3, [pc, #328]	; (8001ef0 <HAL_RCC_OscConfig+0x4d8>)
 8001da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001daa:	4a51      	ldr	r2, [pc, #324]	; (8001ef0 <HAL_RCC_OscConfig+0x4d8>)
 8001dac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001db0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	699b      	ldr	r3, [r3, #24]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	f000 8092 	beq.w	8001ee0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001dbc:	4b4c      	ldr	r3, [pc, #304]	; (8001ef0 <HAL_RCC_OscConfig+0x4d8>)
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	f003 030c 	and.w	r3, r3, #12
 8001dc4:	2b08      	cmp	r3, #8
 8001dc6:	d05c      	beq.n	8001e82 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	699b      	ldr	r3, [r3, #24]
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d141      	bne.n	8001e54 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dd0:	4b48      	ldr	r3, [pc, #288]	; (8001ef4 <HAL_RCC_OscConfig+0x4dc>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd6:	f7ff fb65 	bl	80014a4 <HAL_GetTick>
 8001dda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ddc:	e008      	b.n	8001df0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dde:	f7ff fb61 	bl	80014a4 <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d901      	bls.n	8001df0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	e078      	b.n	8001ee2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001df0:	4b3f      	ldr	r3, [pc, #252]	; (8001ef0 <HAL_RCC_OscConfig+0x4d8>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d1f0      	bne.n	8001dde <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	69da      	ldr	r2, [r3, #28]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6a1b      	ldr	r3, [r3, #32]
 8001e04:	431a      	orrs	r2, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0a:	019b      	lsls	r3, r3, #6
 8001e0c:	431a      	orrs	r2, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e12:	085b      	lsrs	r3, r3, #1
 8001e14:	3b01      	subs	r3, #1
 8001e16:	041b      	lsls	r3, r3, #16
 8001e18:	431a      	orrs	r2, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e1e:	061b      	lsls	r3, r3, #24
 8001e20:	4933      	ldr	r1, [pc, #204]	; (8001ef0 <HAL_RCC_OscConfig+0x4d8>)
 8001e22:	4313      	orrs	r3, r2
 8001e24:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e26:	4b33      	ldr	r3, [pc, #204]	; (8001ef4 <HAL_RCC_OscConfig+0x4dc>)
 8001e28:	2201      	movs	r2, #1
 8001e2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e2c:	f7ff fb3a 	bl	80014a4 <HAL_GetTick>
 8001e30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e32:	e008      	b.n	8001e46 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e34:	f7ff fb36 	bl	80014a4 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e04d      	b.n	8001ee2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e46:	4b2a      	ldr	r3, [pc, #168]	; (8001ef0 <HAL_RCC_OscConfig+0x4d8>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d0f0      	beq.n	8001e34 <HAL_RCC_OscConfig+0x41c>
 8001e52:	e045      	b.n	8001ee0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e54:	4b27      	ldr	r3, [pc, #156]	; (8001ef4 <HAL_RCC_OscConfig+0x4dc>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e5a:	f7ff fb23 	bl	80014a4 <HAL_GetTick>
 8001e5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e60:	e008      	b.n	8001e74 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e62:	f7ff fb1f 	bl	80014a4 <HAL_GetTick>
 8001e66:	4602      	mov	r2, r0
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d901      	bls.n	8001e74 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001e70:	2303      	movs	r3, #3
 8001e72:	e036      	b.n	8001ee2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e74:	4b1e      	ldr	r3, [pc, #120]	; (8001ef0 <HAL_RCC_OscConfig+0x4d8>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d1f0      	bne.n	8001e62 <HAL_RCC_OscConfig+0x44a>
 8001e80:	e02e      	b.n	8001ee0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	699b      	ldr	r3, [r3, #24]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d101      	bne.n	8001e8e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e029      	b.n	8001ee2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e8e:	4b18      	ldr	r3, [pc, #96]	; (8001ef0 <HAL_RCC_OscConfig+0x4d8>)
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	69db      	ldr	r3, [r3, #28]
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d11c      	bne.n	8001edc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d115      	bne.n	8001edc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001eb0:	68fa      	ldr	r2, [r7, #12]
 8001eb2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d10d      	bne.n	8001edc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d106      	bne.n	8001edc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d001      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e000      	b.n	8001ee2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3718      	adds	r7, #24
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	40007000 	.word	0x40007000
 8001ef0:	40023800 	.word	0x40023800
 8001ef4:	42470060 	.word	0x42470060

08001ef8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d101      	bne.n	8001f0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e0cc      	b.n	80020a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f0c:	4b68      	ldr	r3, [pc, #416]	; (80020b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 030f 	and.w	r3, r3, #15
 8001f14:	683a      	ldr	r2, [r7, #0]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d90c      	bls.n	8001f34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f1a:	4b65      	ldr	r3, [pc, #404]	; (80020b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f1c:	683a      	ldr	r2, [r7, #0]
 8001f1e:	b2d2      	uxtb	r2, r2
 8001f20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f22:	4b63      	ldr	r3, [pc, #396]	; (80020b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 030f 	and.w	r3, r3, #15
 8001f2a:	683a      	ldr	r2, [r7, #0]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d001      	beq.n	8001f34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e0b8      	b.n	80020a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0302 	and.w	r3, r3, #2
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d020      	beq.n	8001f82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0304 	and.w	r3, r3, #4
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d005      	beq.n	8001f58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f4c:	4b59      	ldr	r3, [pc, #356]	; (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	4a58      	ldr	r2, [pc, #352]	; (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0308 	and.w	r3, r3, #8
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d005      	beq.n	8001f70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f64:	4b53      	ldr	r3, [pc, #332]	; (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	4a52      	ldr	r2, [pc, #328]	; (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f70:	4b50      	ldr	r3, [pc, #320]	; (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	494d      	ldr	r1, [pc, #308]	; (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d044      	beq.n	8002018 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d107      	bne.n	8001fa6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f96:	4b47      	ldr	r3, [pc, #284]	; (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d119      	bne.n	8001fd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e07f      	b.n	80020a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d003      	beq.n	8001fb6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fb2:	2b03      	cmp	r3, #3
 8001fb4:	d107      	bne.n	8001fc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fb6:	4b3f      	ldr	r3, [pc, #252]	; (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d109      	bne.n	8001fd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e06f      	b.n	80020a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fc6:	4b3b      	ldr	r3, [pc, #236]	; (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d101      	bne.n	8001fd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e067      	b.n	80020a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fd6:	4b37      	ldr	r3, [pc, #220]	; (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	f023 0203 	bic.w	r2, r3, #3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	4934      	ldr	r1, [pc, #208]	; (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fe8:	f7ff fa5c 	bl	80014a4 <HAL_GetTick>
 8001fec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fee:	e00a      	b.n	8002006 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ff0:	f7ff fa58 	bl	80014a4 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d901      	bls.n	8002006 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e04f      	b.n	80020a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002006:	4b2b      	ldr	r3, [pc, #172]	; (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f003 020c 	and.w	r2, r3, #12
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	429a      	cmp	r2, r3
 8002016:	d1eb      	bne.n	8001ff0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002018:	4b25      	ldr	r3, [pc, #148]	; (80020b0 <HAL_RCC_ClockConfig+0x1b8>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 030f 	and.w	r3, r3, #15
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	429a      	cmp	r2, r3
 8002024:	d20c      	bcs.n	8002040 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002026:	4b22      	ldr	r3, [pc, #136]	; (80020b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002028:	683a      	ldr	r2, [r7, #0]
 800202a:	b2d2      	uxtb	r2, r2
 800202c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800202e:	4b20      	ldr	r3, [pc, #128]	; (80020b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 030f 	and.w	r3, r3, #15
 8002036:	683a      	ldr	r2, [r7, #0]
 8002038:	429a      	cmp	r2, r3
 800203a:	d001      	beq.n	8002040 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e032      	b.n	80020a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0304 	and.w	r3, r3, #4
 8002048:	2b00      	cmp	r3, #0
 800204a:	d008      	beq.n	800205e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800204c:	4b19      	ldr	r3, [pc, #100]	; (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	4916      	ldr	r1, [pc, #88]	; (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 800205a:	4313      	orrs	r3, r2
 800205c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0308 	and.w	r3, r3, #8
 8002066:	2b00      	cmp	r3, #0
 8002068:	d009      	beq.n	800207e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800206a:	4b12      	ldr	r3, [pc, #72]	; (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	490e      	ldr	r1, [pc, #56]	; (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 800207a:	4313      	orrs	r3, r2
 800207c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800207e:	f000 f821 	bl	80020c4 <HAL_RCC_GetSysClockFreq>
 8002082:	4601      	mov	r1, r0
 8002084:	4b0b      	ldr	r3, [pc, #44]	; (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	091b      	lsrs	r3, r3, #4
 800208a:	f003 030f 	and.w	r3, r3, #15
 800208e:	4a0a      	ldr	r2, [pc, #40]	; (80020b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002090:	5cd3      	ldrb	r3, [r2, r3]
 8002092:	fa21 f303 	lsr.w	r3, r1, r3
 8002096:	4a09      	ldr	r2, [pc, #36]	; (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 8002098:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800209a:	4b09      	ldr	r3, [pc, #36]	; (80020c0 <HAL_RCC_ClockConfig+0x1c8>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4618      	mov	r0, r3
 80020a0:	f7ff f9bc 	bl	800141c <HAL_InitTick>

  return HAL_OK;
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3710      	adds	r7, #16
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	40023c00 	.word	0x40023c00
 80020b4:	40023800 	.word	0x40023800
 80020b8:	080033ac 	.word	0x080033ac
 80020bc:	20000000 	.word	0x20000000
 80020c0:	20000004 	.word	0x20000004

080020c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020c6:	b085      	sub	sp, #20
 80020c8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80020ca:	2300      	movs	r3, #0
 80020cc:	607b      	str	r3, [r7, #4]
 80020ce:	2300      	movs	r3, #0
 80020d0:	60fb      	str	r3, [r7, #12]
 80020d2:	2300      	movs	r3, #0
 80020d4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80020d6:	2300      	movs	r3, #0
 80020d8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020da:	4b63      	ldr	r3, [pc, #396]	; (8002268 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f003 030c 	and.w	r3, r3, #12
 80020e2:	2b04      	cmp	r3, #4
 80020e4:	d007      	beq.n	80020f6 <HAL_RCC_GetSysClockFreq+0x32>
 80020e6:	2b08      	cmp	r3, #8
 80020e8:	d008      	beq.n	80020fc <HAL_RCC_GetSysClockFreq+0x38>
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	f040 80b4 	bne.w	8002258 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020f0:	4b5e      	ldr	r3, [pc, #376]	; (800226c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80020f2:	60bb      	str	r3, [r7, #8]
       break;
 80020f4:	e0b3      	b.n	800225e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80020f6:	4b5e      	ldr	r3, [pc, #376]	; (8002270 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80020f8:	60bb      	str	r3, [r7, #8]
      break;
 80020fa:	e0b0      	b.n	800225e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020fc:	4b5a      	ldr	r3, [pc, #360]	; (8002268 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002104:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002106:	4b58      	ldr	r3, [pc, #352]	; (8002268 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d04a      	beq.n	80021a8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002112:	4b55      	ldr	r3, [pc, #340]	; (8002268 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	099b      	lsrs	r3, r3, #6
 8002118:	f04f 0400 	mov.w	r4, #0
 800211c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002120:	f04f 0200 	mov.w	r2, #0
 8002124:	ea03 0501 	and.w	r5, r3, r1
 8002128:	ea04 0602 	and.w	r6, r4, r2
 800212c:	4629      	mov	r1, r5
 800212e:	4632      	mov	r2, r6
 8002130:	f04f 0300 	mov.w	r3, #0
 8002134:	f04f 0400 	mov.w	r4, #0
 8002138:	0154      	lsls	r4, r2, #5
 800213a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800213e:	014b      	lsls	r3, r1, #5
 8002140:	4619      	mov	r1, r3
 8002142:	4622      	mov	r2, r4
 8002144:	1b49      	subs	r1, r1, r5
 8002146:	eb62 0206 	sbc.w	r2, r2, r6
 800214a:	f04f 0300 	mov.w	r3, #0
 800214e:	f04f 0400 	mov.w	r4, #0
 8002152:	0194      	lsls	r4, r2, #6
 8002154:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002158:	018b      	lsls	r3, r1, #6
 800215a:	1a5b      	subs	r3, r3, r1
 800215c:	eb64 0402 	sbc.w	r4, r4, r2
 8002160:	f04f 0100 	mov.w	r1, #0
 8002164:	f04f 0200 	mov.w	r2, #0
 8002168:	00e2      	lsls	r2, r4, #3
 800216a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800216e:	00d9      	lsls	r1, r3, #3
 8002170:	460b      	mov	r3, r1
 8002172:	4614      	mov	r4, r2
 8002174:	195b      	adds	r3, r3, r5
 8002176:	eb44 0406 	adc.w	r4, r4, r6
 800217a:	f04f 0100 	mov.w	r1, #0
 800217e:	f04f 0200 	mov.w	r2, #0
 8002182:	0262      	lsls	r2, r4, #9
 8002184:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002188:	0259      	lsls	r1, r3, #9
 800218a:	460b      	mov	r3, r1
 800218c:	4614      	mov	r4, r2
 800218e:	4618      	mov	r0, r3
 8002190:	4621      	mov	r1, r4
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f04f 0400 	mov.w	r4, #0
 8002198:	461a      	mov	r2, r3
 800219a:	4623      	mov	r3, r4
 800219c:	f7fe f81a 	bl	80001d4 <__aeabi_uldivmod>
 80021a0:	4603      	mov	r3, r0
 80021a2:	460c      	mov	r4, r1
 80021a4:	60fb      	str	r3, [r7, #12]
 80021a6:	e049      	b.n	800223c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021a8:	4b2f      	ldr	r3, [pc, #188]	; (8002268 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	099b      	lsrs	r3, r3, #6
 80021ae:	f04f 0400 	mov.w	r4, #0
 80021b2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80021b6:	f04f 0200 	mov.w	r2, #0
 80021ba:	ea03 0501 	and.w	r5, r3, r1
 80021be:	ea04 0602 	and.w	r6, r4, r2
 80021c2:	4629      	mov	r1, r5
 80021c4:	4632      	mov	r2, r6
 80021c6:	f04f 0300 	mov.w	r3, #0
 80021ca:	f04f 0400 	mov.w	r4, #0
 80021ce:	0154      	lsls	r4, r2, #5
 80021d0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80021d4:	014b      	lsls	r3, r1, #5
 80021d6:	4619      	mov	r1, r3
 80021d8:	4622      	mov	r2, r4
 80021da:	1b49      	subs	r1, r1, r5
 80021dc:	eb62 0206 	sbc.w	r2, r2, r6
 80021e0:	f04f 0300 	mov.w	r3, #0
 80021e4:	f04f 0400 	mov.w	r4, #0
 80021e8:	0194      	lsls	r4, r2, #6
 80021ea:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80021ee:	018b      	lsls	r3, r1, #6
 80021f0:	1a5b      	subs	r3, r3, r1
 80021f2:	eb64 0402 	sbc.w	r4, r4, r2
 80021f6:	f04f 0100 	mov.w	r1, #0
 80021fa:	f04f 0200 	mov.w	r2, #0
 80021fe:	00e2      	lsls	r2, r4, #3
 8002200:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002204:	00d9      	lsls	r1, r3, #3
 8002206:	460b      	mov	r3, r1
 8002208:	4614      	mov	r4, r2
 800220a:	195b      	adds	r3, r3, r5
 800220c:	eb44 0406 	adc.w	r4, r4, r6
 8002210:	f04f 0100 	mov.w	r1, #0
 8002214:	f04f 0200 	mov.w	r2, #0
 8002218:	02a2      	lsls	r2, r4, #10
 800221a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800221e:	0299      	lsls	r1, r3, #10
 8002220:	460b      	mov	r3, r1
 8002222:	4614      	mov	r4, r2
 8002224:	4618      	mov	r0, r3
 8002226:	4621      	mov	r1, r4
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f04f 0400 	mov.w	r4, #0
 800222e:	461a      	mov	r2, r3
 8002230:	4623      	mov	r3, r4
 8002232:	f7fd ffcf 	bl	80001d4 <__aeabi_uldivmod>
 8002236:	4603      	mov	r3, r0
 8002238:	460c      	mov	r4, r1
 800223a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800223c:	4b0a      	ldr	r3, [pc, #40]	; (8002268 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	0c1b      	lsrs	r3, r3, #16
 8002242:	f003 0303 	and.w	r3, r3, #3
 8002246:	3301      	adds	r3, #1
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800224c:	68fa      	ldr	r2, [r7, #12]
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	fbb2 f3f3 	udiv	r3, r2, r3
 8002254:	60bb      	str	r3, [r7, #8]
      break;
 8002256:	e002      	b.n	800225e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002258:	4b04      	ldr	r3, [pc, #16]	; (800226c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800225a:	60bb      	str	r3, [r7, #8]
      break;
 800225c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800225e:	68bb      	ldr	r3, [r7, #8]
}
 8002260:	4618      	mov	r0, r3
 8002262:	3714      	adds	r7, #20
 8002264:	46bd      	mov	sp, r7
 8002266:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002268:	40023800 	.word	0x40023800
 800226c:	00f42400 	.word	0x00f42400
 8002270:	007a1200 	.word	0x007a1200

08002274 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002278:	4b03      	ldr	r3, [pc, #12]	; (8002288 <HAL_RCC_GetHCLKFreq+0x14>)
 800227a:	681b      	ldr	r3, [r3, #0]
}
 800227c:	4618      	mov	r0, r3
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	20000000 	.word	0x20000000

0800228c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002290:	f7ff fff0 	bl	8002274 <HAL_RCC_GetHCLKFreq>
 8002294:	4601      	mov	r1, r0
 8002296:	4b05      	ldr	r3, [pc, #20]	; (80022ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	0a9b      	lsrs	r3, r3, #10
 800229c:	f003 0307 	and.w	r3, r3, #7
 80022a0:	4a03      	ldr	r2, [pc, #12]	; (80022b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022a2:	5cd3      	ldrb	r3, [r2, r3]
 80022a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	40023800 	.word	0x40023800
 80022b0:	080033bc 	.word	0x080033bc

080022b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80022b8:	f7ff ffdc 	bl	8002274 <HAL_RCC_GetHCLKFreq>
 80022bc:	4601      	mov	r1, r0
 80022be:	4b05      	ldr	r3, [pc, #20]	; (80022d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	0b5b      	lsrs	r3, r3, #13
 80022c4:	f003 0307 	and.w	r3, r3, #7
 80022c8:	4a03      	ldr	r2, [pc, #12]	; (80022d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022ca:	5cd3      	ldrb	r3, [r2, r3]
 80022cc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	40023800 	.word	0x40023800
 80022d8:	080033bc 	.word	0x080033bc

080022dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d101      	bne.n	80022ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e01d      	b.n	800232a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d106      	bne.n	8002308 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f7fe fd72 	bl	8000dec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2202      	movs	r2, #2
 800230c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	3304      	adds	r3, #4
 8002318:	4619      	mov	r1, r3
 800231a:	4610      	mov	r0, r2
 800231c:	f000 fa30 	bl	8002780 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2201      	movs	r2, #1
 8002324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002332:	b480      	push	{r7}
 8002334:	b085      	sub	sp, #20
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	68da      	ldr	r2, [r3, #12]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f042 0201 	orr.w	r2, r2, #1
 8002348:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f003 0307 	and.w	r3, r3, #7
 8002354:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2b06      	cmp	r3, #6
 800235a:	d007      	beq.n	800236c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f042 0201 	orr.w	r2, r2, #1
 800236a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3714      	adds	r7, #20
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr

0800237a <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800237a:	b580      	push	{r7, lr}
 800237c:	b086      	sub	sp, #24
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
 8002382:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d101      	bne.n	800238e <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e083      	b.n	8002496 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002394:	b2db      	uxtb	r3, r3
 8002396:	2b00      	cmp	r3, #0
 8002398:	d106      	bne.n	80023a8 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f7fe fc36 	bl	8000c14 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2202      	movs	r2, #2
 80023ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	6812      	ldr	r2, [r2, #0]
 80023ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80023be:	f023 0307 	bic.w	r3, r3, #7
 80023c2:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	3304      	adds	r3, #4
 80023cc:	4619      	mov	r1, r3
 80023ce:	4610      	mov	r0, r2
 80023d0:	f000 f9d6 	bl	8002780 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	699b      	ldr	r3, [r3, #24]
 80023e2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	6a1b      	ldr	r3, [r3, #32]
 80023ea:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	697a      	ldr	r2, [r7, #20]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023fc:	f023 0303 	bic.w	r3, r3, #3
 8002400:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	689a      	ldr	r2, [r3, #8]
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	021b      	lsls	r3, r3, #8
 800240c:	4313      	orrs	r3, r2
 800240e:	693a      	ldr	r2, [r7, #16]
 8002410:	4313      	orrs	r3, r2
 8002412:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800241a:	f023 030c 	bic.w	r3, r3, #12
 800241e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002426:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800242a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	68da      	ldr	r2, [r3, #12]
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	69db      	ldr	r3, [r3, #28]
 8002434:	021b      	lsls	r3, r3, #8
 8002436:	4313      	orrs	r3, r2
 8002438:	693a      	ldr	r2, [r7, #16]
 800243a:	4313      	orrs	r3, r2
 800243c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	691b      	ldr	r3, [r3, #16]
 8002442:	011a      	lsls	r2, r3, #4
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	6a1b      	ldr	r3, [r3, #32]
 8002448:	031b      	lsls	r3, r3, #12
 800244a:	4313      	orrs	r3, r2
 800244c:	693a      	ldr	r2, [r7, #16]
 800244e:	4313      	orrs	r3, r2
 8002450:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002458:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8002460:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685a      	ldr	r2, [r3, #4]
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	695b      	ldr	r3, [r3, #20]
 800246a:	011b      	lsls	r3, r3, #4
 800246c:	4313      	orrs	r3, r2
 800246e:	68fa      	ldr	r2, [r7, #12]
 8002470:	4313      	orrs	r3, r2
 8002472:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	697a      	ldr	r2, [r7, #20]
 800247a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	693a      	ldr	r2, [r7, #16]
 8002482:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	68fa      	ldr	r2, [r7, #12]
 800248a:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	3718      	adds	r7, #24
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800249e:	b580      	push	{r7, lr}
 80024a0:	b082      	sub	sp, #8
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
 80024a6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d002      	beq.n	80024b4 <HAL_TIM_Encoder_Start+0x16>
 80024ae:	2b04      	cmp	r3, #4
 80024b0:	d008      	beq.n	80024c4 <HAL_TIM_Encoder_Start+0x26>
 80024b2:	e00f      	b.n	80024d4 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2201      	movs	r2, #1
 80024ba:	2100      	movs	r1, #0
 80024bc:	4618      	mov	r0, r3
 80024be:	f000 f9df 	bl	8002880 <TIM_CCxChannelCmd>
      break;
 80024c2:	e016      	b.n	80024f2 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2201      	movs	r2, #1
 80024ca:	2104      	movs	r1, #4
 80024cc:	4618      	mov	r0, r3
 80024ce:	f000 f9d7 	bl	8002880 <TIM_CCxChannelCmd>
      break;
 80024d2:	e00e      	b.n	80024f2 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2201      	movs	r2, #1
 80024da:	2100      	movs	r1, #0
 80024dc:	4618      	mov	r0, r3
 80024de:	f000 f9cf 	bl	8002880 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2201      	movs	r2, #1
 80024e8:	2104      	movs	r1, #4
 80024ea:	4618      	mov	r0, r3
 80024ec:	f000 f9c8 	bl	8002880 <TIM_CCxChannelCmd>
      break;
 80024f0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f042 0201 	orr.w	r2, r2, #1
 8002500:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002502:	2300      	movs	r3, #0
}
 8002504:	4618      	mov	r0, r3
 8002506:	3708      	adds	r7, #8
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	691b      	ldr	r3, [r3, #16]
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	2b02      	cmp	r3, #2
 8002520:	d122      	bne.n	8002568 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	f003 0302 	and.w	r3, r3, #2
 800252c:	2b02      	cmp	r3, #2
 800252e:	d11b      	bne.n	8002568 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f06f 0202 	mvn.w	r2, #2
 8002538:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2201      	movs	r2, #1
 800253e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	699b      	ldr	r3, [r3, #24]
 8002546:	f003 0303 	and.w	r3, r3, #3
 800254a:	2b00      	cmp	r3, #0
 800254c:	d003      	beq.n	8002556 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f000 f8f8 	bl	8002744 <HAL_TIM_IC_CaptureCallback>
 8002554:	e005      	b.n	8002562 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f000 f8ea 	bl	8002730 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f000 f8fb 	bl	8002758 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	691b      	ldr	r3, [r3, #16]
 800256e:	f003 0304 	and.w	r3, r3, #4
 8002572:	2b04      	cmp	r3, #4
 8002574:	d122      	bne.n	80025bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	f003 0304 	and.w	r3, r3, #4
 8002580:	2b04      	cmp	r3, #4
 8002582:	d11b      	bne.n	80025bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f06f 0204 	mvn.w	r2, #4
 800258c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2202      	movs	r2, #2
 8002592:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	699b      	ldr	r3, [r3, #24]
 800259a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d003      	beq.n	80025aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f000 f8ce 	bl	8002744 <HAL_TIM_IC_CaptureCallback>
 80025a8:	e005      	b.n	80025b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f000 f8c0 	bl	8002730 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f000 f8d1 	bl	8002758 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	f003 0308 	and.w	r3, r3, #8
 80025c6:	2b08      	cmp	r3, #8
 80025c8:	d122      	bne.n	8002610 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	f003 0308 	and.w	r3, r3, #8
 80025d4:	2b08      	cmp	r3, #8
 80025d6:	d11b      	bne.n	8002610 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f06f 0208 	mvn.w	r2, #8
 80025e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2204      	movs	r2, #4
 80025e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	69db      	ldr	r3, [r3, #28]
 80025ee:	f003 0303 	and.w	r3, r3, #3
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d003      	beq.n	80025fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f000 f8a4 	bl	8002744 <HAL_TIM_IC_CaptureCallback>
 80025fc:	e005      	b.n	800260a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f000 f896 	bl	8002730 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f000 f8a7 	bl	8002758 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	f003 0310 	and.w	r3, r3, #16
 800261a:	2b10      	cmp	r3, #16
 800261c:	d122      	bne.n	8002664 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	f003 0310 	and.w	r3, r3, #16
 8002628:	2b10      	cmp	r3, #16
 800262a:	d11b      	bne.n	8002664 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f06f 0210 	mvn.w	r2, #16
 8002634:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2208      	movs	r2, #8
 800263a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	69db      	ldr	r3, [r3, #28]
 8002642:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002646:	2b00      	cmp	r3, #0
 8002648:	d003      	beq.n	8002652 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f000 f87a 	bl	8002744 <HAL_TIM_IC_CaptureCallback>
 8002650:	e005      	b.n	800265e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 f86c 	bl	8002730 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f000 f87d 	bl	8002758 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	2b01      	cmp	r3, #1
 8002670:	d10e      	bne.n	8002690 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	f003 0301 	and.w	r3, r3, #1
 800267c:	2b01      	cmp	r3, #1
 800267e:	d107      	bne.n	8002690 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f06f 0201 	mvn.w	r2, #1
 8002688:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f000 f846 	bl	800271c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800269a:	2b80      	cmp	r3, #128	; 0x80
 800269c:	d10e      	bne.n	80026bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026a8:	2b80      	cmp	r3, #128	; 0x80
 80026aa:	d107      	bne.n	80026bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80026b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f000 f980 	bl	80029bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026c6:	2b40      	cmp	r3, #64	; 0x40
 80026c8:	d10e      	bne.n	80026e8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026d4:	2b40      	cmp	r3, #64	; 0x40
 80026d6:	d107      	bne.n	80026e8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80026e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f000 f842 	bl	800276c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	f003 0320 	and.w	r3, r3, #32
 80026f2:	2b20      	cmp	r3, #32
 80026f4:	d10e      	bne.n	8002714 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	f003 0320 	and.w	r3, r3, #32
 8002700:	2b20      	cmp	r3, #32
 8002702:	d107      	bne.n	8002714 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f06f 0220 	mvn.w	r2, #32
 800270c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f000 f94a 	bl	80029a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002714:	bf00      	nop
 8002716:	3708      	adds	r7, #8
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002724:	bf00      	nop
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002738:	bf00      	nop
 800273a:	370c      	adds	r7, #12
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800274c:	bf00      	nop
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr

08002758 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002760:	bf00      	nop
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002774:	bf00      	nop
 8002776:	370c      	adds	r7, #12
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr

08002780 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002780:	b480      	push	{r7}
 8002782:	b085      	sub	sp, #20
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	4a34      	ldr	r2, [pc, #208]	; (8002864 <TIM_Base_SetConfig+0xe4>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d00f      	beq.n	80027b8 <TIM_Base_SetConfig+0x38>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800279e:	d00b      	beq.n	80027b8 <TIM_Base_SetConfig+0x38>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	4a31      	ldr	r2, [pc, #196]	; (8002868 <TIM_Base_SetConfig+0xe8>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d007      	beq.n	80027b8 <TIM_Base_SetConfig+0x38>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	4a30      	ldr	r2, [pc, #192]	; (800286c <TIM_Base_SetConfig+0xec>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d003      	beq.n	80027b8 <TIM_Base_SetConfig+0x38>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	4a2f      	ldr	r2, [pc, #188]	; (8002870 <TIM_Base_SetConfig+0xf0>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d108      	bne.n	80027ca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	68fa      	ldr	r2, [r7, #12]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a25      	ldr	r2, [pc, #148]	; (8002864 <TIM_Base_SetConfig+0xe4>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d01b      	beq.n	800280a <TIM_Base_SetConfig+0x8a>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027d8:	d017      	beq.n	800280a <TIM_Base_SetConfig+0x8a>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a22      	ldr	r2, [pc, #136]	; (8002868 <TIM_Base_SetConfig+0xe8>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d013      	beq.n	800280a <TIM_Base_SetConfig+0x8a>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a21      	ldr	r2, [pc, #132]	; (800286c <TIM_Base_SetConfig+0xec>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d00f      	beq.n	800280a <TIM_Base_SetConfig+0x8a>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4a20      	ldr	r2, [pc, #128]	; (8002870 <TIM_Base_SetConfig+0xf0>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d00b      	beq.n	800280a <TIM_Base_SetConfig+0x8a>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a1f      	ldr	r2, [pc, #124]	; (8002874 <TIM_Base_SetConfig+0xf4>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d007      	beq.n	800280a <TIM_Base_SetConfig+0x8a>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4a1e      	ldr	r2, [pc, #120]	; (8002878 <TIM_Base_SetConfig+0xf8>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d003      	beq.n	800280a <TIM_Base_SetConfig+0x8a>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a1d      	ldr	r2, [pc, #116]	; (800287c <TIM_Base_SetConfig+0xfc>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d108      	bne.n	800281c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002810:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	68fa      	ldr	r2, [r7, #12]
 8002818:	4313      	orrs	r3, r2
 800281a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	695b      	ldr	r3, [r3, #20]
 8002826:	4313      	orrs	r3, r2
 8002828:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	68fa      	ldr	r2, [r7, #12]
 800282e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	689a      	ldr	r2, [r3, #8]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	4a08      	ldr	r2, [pc, #32]	; (8002864 <TIM_Base_SetConfig+0xe4>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d103      	bne.n	8002850 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	691a      	ldr	r2, [r3, #16]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	615a      	str	r2, [r3, #20]
}
 8002856:	bf00      	nop
 8002858:	3714      	adds	r7, #20
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	40010000 	.word	0x40010000
 8002868:	40000400 	.word	0x40000400
 800286c:	40000800 	.word	0x40000800
 8002870:	40000c00 	.word	0x40000c00
 8002874:	40014000 	.word	0x40014000
 8002878:	40014400 	.word	0x40014400
 800287c:	40014800 	.word	0x40014800

08002880 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002880:	b480      	push	{r7}
 8002882:	b087      	sub	sp, #28
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	f003 031f 	and.w	r3, r3, #31
 8002892:	2201      	movs	r2, #1
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6a1a      	ldr	r2, [r3, #32]
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	43db      	mvns	r3, r3
 80028a2:	401a      	ands	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6a1a      	ldr	r2, [r3, #32]
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	f003 031f 	and.w	r3, r3, #31
 80028b2:	6879      	ldr	r1, [r7, #4]
 80028b4:	fa01 f303 	lsl.w	r3, r1, r3
 80028b8:	431a      	orrs	r2, r3
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	621a      	str	r2, [r3, #32]
}
 80028be:	bf00      	nop
 80028c0:	371c      	adds	r7, #28
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
	...

080028cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b085      	sub	sp, #20
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d101      	bne.n	80028e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80028e0:	2302      	movs	r3, #2
 80028e2:	e050      	b.n	8002986 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2202      	movs	r2, #2
 80028f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800290a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	68fa      	ldr	r2, [r7, #12]
 8002912:	4313      	orrs	r3, r2
 8002914:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	68fa      	ldr	r2, [r7, #12]
 800291c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a1c      	ldr	r2, [pc, #112]	; (8002994 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d018      	beq.n	800295a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002930:	d013      	beq.n	800295a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a18      	ldr	r2, [pc, #96]	; (8002998 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d00e      	beq.n	800295a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a16      	ldr	r2, [pc, #88]	; (800299c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d009      	beq.n	800295a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a15      	ldr	r2, [pc, #84]	; (80029a0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d004      	beq.n	800295a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a13      	ldr	r2, [pc, #76]	; (80029a4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d10c      	bne.n	8002974 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002960:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	68ba      	ldr	r2, [r7, #8]
 8002968:	4313      	orrs	r3, r2
 800296a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	68ba      	ldr	r2, [r7, #8]
 8002972:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3714      	adds	r7, #20
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	40010000 	.word	0x40010000
 8002998:	40000400 	.word	0x40000400
 800299c:	40000800 	.word	0x40000800
 80029a0:	40000c00 	.word	0x40000c00
 80029a4:	40014000 	.word	0x40014000

080029a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029b0:	bf00      	nop
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029c4:	bf00      	nop
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d101      	bne.n	80029e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e03f      	b.n	8002a62 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d106      	bne.n	80029fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f7fe fa20 	bl	8000e3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2224      	movs	r2, #36	; 0x24
 8002a00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	68da      	ldr	r2, [r3, #12]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f000 f90b 	bl	8002c30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	691a      	ldr	r2, [r3, #16]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	695a      	ldr	r2, [r3, #20]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	68da      	ldr	r2, [r3, #12]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2220      	movs	r2, #32
 8002a54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2220      	movs	r2, #32
 8002a5c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3708      	adds	r7, #8
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b088      	sub	sp, #32
 8002a6e:	af02      	add	r7, sp, #8
 8002a70:	60f8      	str	r0, [r7, #12]
 8002a72:	60b9      	str	r1, [r7, #8]
 8002a74:	603b      	str	r3, [r7, #0]
 8002a76:	4613      	mov	r3, r2
 8002a78:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	2b20      	cmp	r3, #32
 8002a88:	f040 8083 	bne.w	8002b92 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d002      	beq.n	8002a98 <HAL_UART_Transmit+0x2e>
 8002a92:	88fb      	ldrh	r3, [r7, #6]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d101      	bne.n	8002a9c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e07b      	b.n	8002b94 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d101      	bne.n	8002aaa <HAL_UART_Transmit+0x40>
 8002aa6:	2302      	movs	r3, #2
 8002aa8:	e074      	b.n	8002b94 <HAL_UART_Transmit+0x12a>
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2201      	movs	r2, #1
 8002aae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2221      	movs	r2, #33	; 0x21
 8002abc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002ac0:	f7fe fcf0 	bl	80014a4 <HAL_GetTick>
 8002ac4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	88fa      	ldrh	r2, [r7, #6]
 8002aca:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	88fa      	ldrh	r2, [r7, #6]
 8002ad0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002ada:	e042      	b.n	8002b62 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	b29a      	uxth	r2, r3
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002af2:	d122      	bne.n	8002b3a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	9300      	str	r3, [sp, #0]
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	2200      	movs	r2, #0
 8002afc:	2180      	movs	r1, #128	; 0x80
 8002afe:	68f8      	ldr	r0, [r7, #12]
 8002b00:	f000 f84c 	bl	8002b9c <UART_WaitOnFlagUntilTimeout>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d001      	beq.n	8002b0e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e042      	b.n	8002b94 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	881b      	ldrh	r3, [r3, #0]
 8002b16:	461a      	mov	r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b20:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d103      	bne.n	8002b32 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	3302      	adds	r3, #2
 8002b2e:	60bb      	str	r3, [r7, #8]
 8002b30:	e017      	b.n	8002b62 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	3301      	adds	r3, #1
 8002b36:	60bb      	str	r3, [r7, #8]
 8002b38:	e013      	b.n	8002b62 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	9300      	str	r3, [sp, #0]
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	2200      	movs	r2, #0
 8002b42:	2180      	movs	r1, #128	; 0x80
 8002b44:	68f8      	ldr	r0, [r7, #12]
 8002b46:	f000 f829 	bl	8002b9c <UART_WaitOnFlagUntilTimeout>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d001      	beq.n	8002b54 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	e01f      	b.n	8002b94 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	1c5a      	adds	r2, r3, #1
 8002b58:	60ba      	str	r2, [r7, #8]
 8002b5a:	781a      	ldrb	r2, [r3, #0]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d1b7      	bne.n	8002adc <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	9300      	str	r3, [sp, #0]
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	2200      	movs	r2, #0
 8002b74:	2140      	movs	r1, #64	; 0x40
 8002b76:	68f8      	ldr	r0, [r7, #12]
 8002b78:	f000 f810 	bl	8002b9c <UART_WaitOnFlagUntilTimeout>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d001      	beq.n	8002b86 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e006      	b.n	8002b94 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2220      	movs	r2, #32
 8002b8a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	e000      	b.n	8002b94 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002b92:	2302      	movs	r3, #2
  }
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3718      	adds	r7, #24
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	603b      	str	r3, [r7, #0]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bac:	e02c      	b.n	8002c08 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bb4:	d028      	beq.n	8002c08 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002bb6:	69bb      	ldr	r3, [r7, #24]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d007      	beq.n	8002bcc <UART_WaitOnFlagUntilTimeout+0x30>
 8002bbc:	f7fe fc72 	bl	80014a4 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	69ba      	ldr	r2, [r7, #24]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d21d      	bcs.n	8002c08 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	68da      	ldr	r2, [r3, #12]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002bda:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	695a      	ldr	r2, [r3, #20]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f022 0201 	bic.w	r2, r2, #1
 8002bea:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2220      	movs	r2, #32
 8002bf0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2220      	movs	r2, #32
 8002bf8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e00f      	b.n	8002c28 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	4013      	ands	r3, r2
 8002c12:	68ba      	ldr	r2, [r7, #8]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	bf0c      	ite	eq
 8002c18:	2301      	moveq	r3, #1
 8002c1a:	2300      	movne	r3, #0
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	461a      	mov	r2, r3
 8002c20:	79fb      	ldrb	r3, [r7, #7]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d0c3      	beq.n	8002bae <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c26:	2300      	movs	r3, #0
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3710      	adds	r7, #16
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c34:	b085      	sub	sp, #20
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	691b      	ldr	r3, [r3, #16]
 8002c40:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	68da      	ldr	r2, [r3, #12]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	430a      	orrs	r2, r1
 8002c4e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	689a      	ldr	r2, [r3, #8]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	431a      	orrs	r2, r3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	431a      	orrs	r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	69db      	ldr	r3, [r3, #28]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002c72:	f023 030c 	bic.w	r3, r3, #12
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	6812      	ldr	r2, [r2, #0]
 8002c7a:	68f9      	ldr	r1, [r7, #12]
 8002c7c:	430b      	orrs	r3, r1
 8002c7e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	695b      	ldr	r3, [r3, #20]
 8002c86:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	699a      	ldr	r2, [r3, #24]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	430a      	orrs	r2, r1
 8002c94:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	69db      	ldr	r3, [r3, #28]
 8002c9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c9e:	f040 818b 	bne.w	8002fb8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4ac1      	ldr	r2, [pc, #772]	; (8002fac <UART_SetConfig+0x37c>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d005      	beq.n	8002cb8 <UART_SetConfig+0x88>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4abf      	ldr	r2, [pc, #764]	; (8002fb0 <UART_SetConfig+0x380>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	f040 80bd 	bne.w	8002e32 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002cb8:	f7ff fafc 	bl	80022b4 <HAL_RCC_GetPCLK2Freq>
 8002cbc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	461d      	mov	r5, r3
 8002cc2:	f04f 0600 	mov.w	r6, #0
 8002cc6:	46a8      	mov	r8, r5
 8002cc8:	46b1      	mov	r9, r6
 8002cca:	eb18 0308 	adds.w	r3, r8, r8
 8002cce:	eb49 0409 	adc.w	r4, r9, r9
 8002cd2:	4698      	mov	r8, r3
 8002cd4:	46a1      	mov	r9, r4
 8002cd6:	eb18 0805 	adds.w	r8, r8, r5
 8002cda:	eb49 0906 	adc.w	r9, r9, r6
 8002cde:	f04f 0100 	mov.w	r1, #0
 8002ce2:	f04f 0200 	mov.w	r2, #0
 8002ce6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002cea:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002cee:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002cf2:	4688      	mov	r8, r1
 8002cf4:	4691      	mov	r9, r2
 8002cf6:	eb18 0005 	adds.w	r0, r8, r5
 8002cfa:	eb49 0106 	adc.w	r1, r9, r6
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	461d      	mov	r5, r3
 8002d04:	f04f 0600 	mov.w	r6, #0
 8002d08:	196b      	adds	r3, r5, r5
 8002d0a:	eb46 0406 	adc.w	r4, r6, r6
 8002d0e:	461a      	mov	r2, r3
 8002d10:	4623      	mov	r3, r4
 8002d12:	f7fd fa5f 	bl	80001d4 <__aeabi_uldivmod>
 8002d16:	4603      	mov	r3, r0
 8002d18:	460c      	mov	r4, r1
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	4ba5      	ldr	r3, [pc, #660]	; (8002fb4 <UART_SetConfig+0x384>)
 8002d1e:	fba3 2302 	umull	r2, r3, r3, r2
 8002d22:	095b      	lsrs	r3, r3, #5
 8002d24:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	461d      	mov	r5, r3
 8002d2c:	f04f 0600 	mov.w	r6, #0
 8002d30:	46a9      	mov	r9, r5
 8002d32:	46b2      	mov	sl, r6
 8002d34:	eb19 0309 	adds.w	r3, r9, r9
 8002d38:	eb4a 040a 	adc.w	r4, sl, sl
 8002d3c:	4699      	mov	r9, r3
 8002d3e:	46a2      	mov	sl, r4
 8002d40:	eb19 0905 	adds.w	r9, r9, r5
 8002d44:	eb4a 0a06 	adc.w	sl, sl, r6
 8002d48:	f04f 0100 	mov.w	r1, #0
 8002d4c:	f04f 0200 	mov.w	r2, #0
 8002d50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d54:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002d58:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002d5c:	4689      	mov	r9, r1
 8002d5e:	4692      	mov	sl, r2
 8002d60:	eb19 0005 	adds.w	r0, r9, r5
 8002d64:	eb4a 0106 	adc.w	r1, sl, r6
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	461d      	mov	r5, r3
 8002d6e:	f04f 0600 	mov.w	r6, #0
 8002d72:	196b      	adds	r3, r5, r5
 8002d74:	eb46 0406 	adc.w	r4, r6, r6
 8002d78:	461a      	mov	r2, r3
 8002d7a:	4623      	mov	r3, r4
 8002d7c:	f7fd fa2a 	bl	80001d4 <__aeabi_uldivmod>
 8002d80:	4603      	mov	r3, r0
 8002d82:	460c      	mov	r4, r1
 8002d84:	461a      	mov	r2, r3
 8002d86:	4b8b      	ldr	r3, [pc, #556]	; (8002fb4 <UART_SetConfig+0x384>)
 8002d88:	fba3 1302 	umull	r1, r3, r3, r2
 8002d8c:	095b      	lsrs	r3, r3, #5
 8002d8e:	2164      	movs	r1, #100	; 0x64
 8002d90:	fb01 f303 	mul.w	r3, r1, r3
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	00db      	lsls	r3, r3, #3
 8002d98:	3332      	adds	r3, #50	; 0x32
 8002d9a:	4a86      	ldr	r2, [pc, #536]	; (8002fb4 <UART_SetConfig+0x384>)
 8002d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002da0:	095b      	lsrs	r3, r3, #5
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002da8:	4498      	add	r8, r3
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	461d      	mov	r5, r3
 8002dae:	f04f 0600 	mov.w	r6, #0
 8002db2:	46a9      	mov	r9, r5
 8002db4:	46b2      	mov	sl, r6
 8002db6:	eb19 0309 	adds.w	r3, r9, r9
 8002dba:	eb4a 040a 	adc.w	r4, sl, sl
 8002dbe:	4699      	mov	r9, r3
 8002dc0:	46a2      	mov	sl, r4
 8002dc2:	eb19 0905 	adds.w	r9, r9, r5
 8002dc6:	eb4a 0a06 	adc.w	sl, sl, r6
 8002dca:	f04f 0100 	mov.w	r1, #0
 8002dce:	f04f 0200 	mov.w	r2, #0
 8002dd2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002dd6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002dda:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002dde:	4689      	mov	r9, r1
 8002de0:	4692      	mov	sl, r2
 8002de2:	eb19 0005 	adds.w	r0, r9, r5
 8002de6:	eb4a 0106 	adc.w	r1, sl, r6
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	461d      	mov	r5, r3
 8002df0:	f04f 0600 	mov.w	r6, #0
 8002df4:	196b      	adds	r3, r5, r5
 8002df6:	eb46 0406 	adc.w	r4, r6, r6
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	4623      	mov	r3, r4
 8002dfe:	f7fd f9e9 	bl	80001d4 <__aeabi_uldivmod>
 8002e02:	4603      	mov	r3, r0
 8002e04:	460c      	mov	r4, r1
 8002e06:	461a      	mov	r2, r3
 8002e08:	4b6a      	ldr	r3, [pc, #424]	; (8002fb4 <UART_SetConfig+0x384>)
 8002e0a:	fba3 1302 	umull	r1, r3, r3, r2
 8002e0e:	095b      	lsrs	r3, r3, #5
 8002e10:	2164      	movs	r1, #100	; 0x64
 8002e12:	fb01 f303 	mul.w	r3, r1, r3
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	00db      	lsls	r3, r3, #3
 8002e1a:	3332      	adds	r3, #50	; 0x32
 8002e1c:	4a65      	ldr	r2, [pc, #404]	; (8002fb4 <UART_SetConfig+0x384>)
 8002e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e22:	095b      	lsrs	r3, r3, #5
 8002e24:	f003 0207 	and.w	r2, r3, #7
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4442      	add	r2, r8
 8002e2e:	609a      	str	r2, [r3, #8]
 8002e30:	e26f      	b.n	8003312 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e32:	f7ff fa2b 	bl	800228c <HAL_RCC_GetPCLK1Freq>
 8002e36:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	461d      	mov	r5, r3
 8002e3c:	f04f 0600 	mov.w	r6, #0
 8002e40:	46a8      	mov	r8, r5
 8002e42:	46b1      	mov	r9, r6
 8002e44:	eb18 0308 	adds.w	r3, r8, r8
 8002e48:	eb49 0409 	adc.w	r4, r9, r9
 8002e4c:	4698      	mov	r8, r3
 8002e4e:	46a1      	mov	r9, r4
 8002e50:	eb18 0805 	adds.w	r8, r8, r5
 8002e54:	eb49 0906 	adc.w	r9, r9, r6
 8002e58:	f04f 0100 	mov.w	r1, #0
 8002e5c:	f04f 0200 	mov.w	r2, #0
 8002e60:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002e64:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002e68:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002e6c:	4688      	mov	r8, r1
 8002e6e:	4691      	mov	r9, r2
 8002e70:	eb18 0005 	adds.w	r0, r8, r5
 8002e74:	eb49 0106 	adc.w	r1, r9, r6
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	461d      	mov	r5, r3
 8002e7e:	f04f 0600 	mov.w	r6, #0
 8002e82:	196b      	adds	r3, r5, r5
 8002e84:	eb46 0406 	adc.w	r4, r6, r6
 8002e88:	461a      	mov	r2, r3
 8002e8a:	4623      	mov	r3, r4
 8002e8c:	f7fd f9a2 	bl	80001d4 <__aeabi_uldivmod>
 8002e90:	4603      	mov	r3, r0
 8002e92:	460c      	mov	r4, r1
 8002e94:	461a      	mov	r2, r3
 8002e96:	4b47      	ldr	r3, [pc, #284]	; (8002fb4 <UART_SetConfig+0x384>)
 8002e98:	fba3 2302 	umull	r2, r3, r3, r2
 8002e9c:	095b      	lsrs	r3, r3, #5
 8002e9e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	461d      	mov	r5, r3
 8002ea6:	f04f 0600 	mov.w	r6, #0
 8002eaa:	46a9      	mov	r9, r5
 8002eac:	46b2      	mov	sl, r6
 8002eae:	eb19 0309 	adds.w	r3, r9, r9
 8002eb2:	eb4a 040a 	adc.w	r4, sl, sl
 8002eb6:	4699      	mov	r9, r3
 8002eb8:	46a2      	mov	sl, r4
 8002eba:	eb19 0905 	adds.w	r9, r9, r5
 8002ebe:	eb4a 0a06 	adc.w	sl, sl, r6
 8002ec2:	f04f 0100 	mov.w	r1, #0
 8002ec6:	f04f 0200 	mov.w	r2, #0
 8002eca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ece:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002ed2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002ed6:	4689      	mov	r9, r1
 8002ed8:	4692      	mov	sl, r2
 8002eda:	eb19 0005 	adds.w	r0, r9, r5
 8002ede:	eb4a 0106 	adc.w	r1, sl, r6
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	461d      	mov	r5, r3
 8002ee8:	f04f 0600 	mov.w	r6, #0
 8002eec:	196b      	adds	r3, r5, r5
 8002eee:	eb46 0406 	adc.w	r4, r6, r6
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	4623      	mov	r3, r4
 8002ef6:	f7fd f96d 	bl	80001d4 <__aeabi_uldivmod>
 8002efa:	4603      	mov	r3, r0
 8002efc:	460c      	mov	r4, r1
 8002efe:	461a      	mov	r2, r3
 8002f00:	4b2c      	ldr	r3, [pc, #176]	; (8002fb4 <UART_SetConfig+0x384>)
 8002f02:	fba3 1302 	umull	r1, r3, r3, r2
 8002f06:	095b      	lsrs	r3, r3, #5
 8002f08:	2164      	movs	r1, #100	; 0x64
 8002f0a:	fb01 f303 	mul.w	r3, r1, r3
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	00db      	lsls	r3, r3, #3
 8002f12:	3332      	adds	r3, #50	; 0x32
 8002f14:	4a27      	ldr	r2, [pc, #156]	; (8002fb4 <UART_SetConfig+0x384>)
 8002f16:	fba2 2303 	umull	r2, r3, r2, r3
 8002f1a:	095b      	lsrs	r3, r3, #5
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002f22:	4498      	add	r8, r3
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	461d      	mov	r5, r3
 8002f28:	f04f 0600 	mov.w	r6, #0
 8002f2c:	46a9      	mov	r9, r5
 8002f2e:	46b2      	mov	sl, r6
 8002f30:	eb19 0309 	adds.w	r3, r9, r9
 8002f34:	eb4a 040a 	adc.w	r4, sl, sl
 8002f38:	4699      	mov	r9, r3
 8002f3a:	46a2      	mov	sl, r4
 8002f3c:	eb19 0905 	adds.w	r9, r9, r5
 8002f40:	eb4a 0a06 	adc.w	sl, sl, r6
 8002f44:	f04f 0100 	mov.w	r1, #0
 8002f48:	f04f 0200 	mov.w	r2, #0
 8002f4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f50:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002f54:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002f58:	4689      	mov	r9, r1
 8002f5a:	4692      	mov	sl, r2
 8002f5c:	eb19 0005 	adds.w	r0, r9, r5
 8002f60:	eb4a 0106 	adc.w	r1, sl, r6
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	461d      	mov	r5, r3
 8002f6a:	f04f 0600 	mov.w	r6, #0
 8002f6e:	196b      	adds	r3, r5, r5
 8002f70:	eb46 0406 	adc.w	r4, r6, r6
 8002f74:	461a      	mov	r2, r3
 8002f76:	4623      	mov	r3, r4
 8002f78:	f7fd f92c 	bl	80001d4 <__aeabi_uldivmod>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	460c      	mov	r4, r1
 8002f80:	461a      	mov	r2, r3
 8002f82:	4b0c      	ldr	r3, [pc, #48]	; (8002fb4 <UART_SetConfig+0x384>)
 8002f84:	fba3 1302 	umull	r1, r3, r3, r2
 8002f88:	095b      	lsrs	r3, r3, #5
 8002f8a:	2164      	movs	r1, #100	; 0x64
 8002f8c:	fb01 f303 	mul.w	r3, r1, r3
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	00db      	lsls	r3, r3, #3
 8002f94:	3332      	adds	r3, #50	; 0x32
 8002f96:	4a07      	ldr	r2, [pc, #28]	; (8002fb4 <UART_SetConfig+0x384>)
 8002f98:	fba2 2303 	umull	r2, r3, r2, r3
 8002f9c:	095b      	lsrs	r3, r3, #5
 8002f9e:	f003 0207 	and.w	r2, r3, #7
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4442      	add	r2, r8
 8002fa8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002faa:	e1b2      	b.n	8003312 <UART_SetConfig+0x6e2>
 8002fac:	40011000 	.word	0x40011000
 8002fb0:	40011400 	.word	0x40011400
 8002fb4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4ad7      	ldr	r2, [pc, #860]	; (800331c <UART_SetConfig+0x6ec>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d005      	beq.n	8002fce <UART_SetConfig+0x39e>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4ad6      	ldr	r2, [pc, #856]	; (8003320 <UART_SetConfig+0x6f0>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	f040 80d1 	bne.w	8003170 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002fce:	f7ff f971 	bl	80022b4 <HAL_RCC_GetPCLK2Freq>
 8002fd2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	469a      	mov	sl, r3
 8002fd8:	f04f 0b00 	mov.w	fp, #0
 8002fdc:	46d0      	mov	r8, sl
 8002fde:	46d9      	mov	r9, fp
 8002fe0:	eb18 0308 	adds.w	r3, r8, r8
 8002fe4:	eb49 0409 	adc.w	r4, r9, r9
 8002fe8:	4698      	mov	r8, r3
 8002fea:	46a1      	mov	r9, r4
 8002fec:	eb18 080a 	adds.w	r8, r8, sl
 8002ff0:	eb49 090b 	adc.w	r9, r9, fp
 8002ff4:	f04f 0100 	mov.w	r1, #0
 8002ff8:	f04f 0200 	mov.w	r2, #0
 8002ffc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003000:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003004:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003008:	4688      	mov	r8, r1
 800300a:	4691      	mov	r9, r2
 800300c:	eb1a 0508 	adds.w	r5, sl, r8
 8003010:	eb4b 0609 	adc.w	r6, fp, r9
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	4619      	mov	r1, r3
 800301a:	f04f 0200 	mov.w	r2, #0
 800301e:	f04f 0300 	mov.w	r3, #0
 8003022:	f04f 0400 	mov.w	r4, #0
 8003026:	0094      	lsls	r4, r2, #2
 8003028:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800302c:	008b      	lsls	r3, r1, #2
 800302e:	461a      	mov	r2, r3
 8003030:	4623      	mov	r3, r4
 8003032:	4628      	mov	r0, r5
 8003034:	4631      	mov	r1, r6
 8003036:	f7fd f8cd 	bl	80001d4 <__aeabi_uldivmod>
 800303a:	4603      	mov	r3, r0
 800303c:	460c      	mov	r4, r1
 800303e:	461a      	mov	r2, r3
 8003040:	4bb8      	ldr	r3, [pc, #736]	; (8003324 <UART_SetConfig+0x6f4>)
 8003042:	fba3 2302 	umull	r2, r3, r3, r2
 8003046:	095b      	lsrs	r3, r3, #5
 8003048:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	469b      	mov	fp, r3
 8003050:	f04f 0c00 	mov.w	ip, #0
 8003054:	46d9      	mov	r9, fp
 8003056:	46e2      	mov	sl, ip
 8003058:	eb19 0309 	adds.w	r3, r9, r9
 800305c:	eb4a 040a 	adc.w	r4, sl, sl
 8003060:	4699      	mov	r9, r3
 8003062:	46a2      	mov	sl, r4
 8003064:	eb19 090b 	adds.w	r9, r9, fp
 8003068:	eb4a 0a0c 	adc.w	sl, sl, ip
 800306c:	f04f 0100 	mov.w	r1, #0
 8003070:	f04f 0200 	mov.w	r2, #0
 8003074:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003078:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800307c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003080:	4689      	mov	r9, r1
 8003082:	4692      	mov	sl, r2
 8003084:	eb1b 0509 	adds.w	r5, fp, r9
 8003088:	eb4c 060a 	adc.w	r6, ip, sl
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	4619      	mov	r1, r3
 8003092:	f04f 0200 	mov.w	r2, #0
 8003096:	f04f 0300 	mov.w	r3, #0
 800309a:	f04f 0400 	mov.w	r4, #0
 800309e:	0094      	lsls	r4, r2, #2
 80030a0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80030a4:	008b      	lsls	r3, r1, #2
 80030a6:	461a      	mov	r2, r3
 80030a8:	4623      	mov	r3, r4
 80030aa:	4628      	mov	r0, r5
 80030ac:	4631      	mov	r1, r6
 80030ae:	f7fd f891 	bl	80001d4 <__aeabi_uldivmod>
 80030b2:	4603      	mov	r3, r0
 80030b4:	460c      	mov	r4, r1
 80030b6:	461a      	mov	r2, r3
 80030b8:	4b9a      	ldr	r3, [pc, #616]	; (8003324 <UART_SetConfig+0x6f4>)
 80030ba:	fba3 1302 	umull	r1, r3, r3, r2
 80030be:	095b      	lsrs	r3, r3, #5
 80030c0:	2164      	movs	r1, #100	; 0x64
 80030c2:	fb01 f303 	mul.w	r3, r1, r3
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	011b      	lsls	r3, r3, #4
 80030ca:	3332      	adds	r3, #50	; 0x32
 80030cc:	4a95      	ldr	r2, [pc, #596]	; (8003324 <UART_SetConfig+0x6f4>)
 80030ce:	fba2 2303 	umull	r2, r3, r2, r3
 80030d2:	095b      	lsrs	r3, r3, #5
 80030d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030d8:	4498      	add	r8, r3
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	469b      	mov	fp, r3
 80030de:	f04f 0c00 	mov.w	ip, #0
 80030e2:	46d9      	mov	r9, fp
 80030e4:	46e2      	mov	sl, ip
 80030e6:	eb19 0309 	adds.w	r3, r9, r9
 80030ea:	eb4a 040a 	adc.w	r4, sl, sl
 80030ee:	4699      	mov	r9, r3
 80030f0:	46a2      	mov	sl, r4
 80030f2:	eb19 090b 	adds.w	r9, r9, fp
 80030f6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80030fa:	f04f 0100 	mov.w	r1, #0
 80030fe:	f04f 0200 	mov.w	r2, #0
 8003102:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003106:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800310a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800310e:	4689      	mov	r9, r1
 8003110:	4692      	mov	sl, r2
 8003112:	eb1b 0509 	adds.w	r5, fp, r9
 8003116:	eb4c 060a 	adc.w	r6, ip, sl
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	4619      	mov	r1, r3
 8003120:	f04f 0200 	mov.w	r2, #0
 8003124:	f04f 0300 	mov.w	r3, #0
 8003128:	f04f 0400 	mov.w	r4, #0
 800312c:	0094      	lsls	r4, r2, #2
 800312e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003132:	008b      	lsls	r3, r1, #2
 8003134:	461a      	mov	r2, r3
 8003136:	4623      	mov	r3, r4
 8003138:	4628      	mov	r0, r5
 800313a:	4631      	mov	r1, r6
 800313c:	f7fd f84a 	bl	80001d4 <__aeabi_uldivmod>
 8003140:	4603      	mov	r3, r0
 8003142:	460c      	mov	r4, r1
 8003144:	461a      	mov	r2, r3
 8003146:	4b77      	ldr	r3, [pc, #476]	; (8003324 <UART_SetConfig+0x6f4>)
 8003148:	fba3 1302 	umull	r1, r3, r3, r2
 800314c:	095b      	lsrs	r3, r3, #5
 800314e:	2164      	movs	r1, #100	; 0x64
 8003150:	fb01 f303 	mul.w	r3, r1, r3
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	011b      	lsls	r3, r3, #4
 8003158:	3332      	adds	r3, #50	; 0x32
 800315a:	4a72      	ldr	r2, [pc, #456]	; (8003324 <UART_SetConfig+0x6f4>)
 800315c:	fba2 2303 	umull	r2, r3, r2, r3
 8003160:	095b      	lsrs	r3, r3, #5
 8003162:	f003 020f 	and.w	r2, r3, #15
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4442      	add	r2, r8
 800316c:	609a      	str	r2, [r3, #8]
 800316e:	e0d0      	b.n	8003312 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003170:	f7ff f88c 	bl	800228c <HAL_RCC_GetPCLK1Freq>
 8003174:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	469a      	mov	sl, r3
 800317a:	f04f 0b00 	mov.w	fp, #0
 800317e:	46d0      	mov	r8, sl
 8003180:	46d9      	mov	r9, fp
 8003182:	eb18 0308 	adds.w	r3, r8, r8
 8003186:	eb49 0409 	adc.w	r4, r9, r9
 800318a:	4698      	mov	r8, r3
 800318c:	46a1      	mov	r9, r4
 800318e:	eb18 080a 	adds.w	r8, r8, sl
 8003192:	eb49 090b 	adc.w	r9, r9, fp
 8003196:	f04f 0100 	mov.w	r1, #0
 800319a:	f04f 0200 	mov.w	r2, #0
 800319e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80031a2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80031a6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80031aa:	4688      	mov	r8, r1
 80031ac:	4691      	mov	r9, r2
 80031ae:	eb1a 0508 	adds.w	r5, sl, r8
 80031b2:	eb4b 0609 	adc.w	r6, fp, r9
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	4619      	mov	r1, r3
 80031bc:	f04f 0200 	mov.w	r2, #0
 80031c0:	f04f 0300 	mov.w	r3, #0
 80031c4:	f04f 0400 	mov.w	r4, #0
 80031c8:	0094      	lsls	r4, r2, #2
 80031ca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80031ce:	008b      	lsls	r3, r1, #2
 80031d0:	461a      	mov	r2, r3
 80031d2:	4623      	mov	r3, r4
 80031d4:	4628      	mov	r0, r5
 80031d6:	4631      	mov	r1, r6
 80031d8:	f7fc fffc 	bl	80001d4 <__aeabi_uldivmod>
 80031dc:	4603      	mov	r3, r0
 80031de:	460c      	mov	r4, r1
 80031e0:	461a      	mov	r2, r3
 80031e2:	4b50      	ldr	r3, [pc, #320]	; (8003324 <UART_SetConfig+0x6f4>)
 80031e4:	fba3 2302 	umull	r2, r3, r3, r2
 80031e8:	095b      	lsrs	r3, r3, #5
 80031ea:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	469b      	mov	fp, r3
 80031f2:	f04f 0c00 	mov.w	ip, #0
 80031f6:	46d9      	mov	r9, fp
 80031f8:	46e2      	mov	sl, ip
 80031fa:	eb19 0309 	adds.w	r3, r9, r9
 80031fe:	eb4a 040a 	adc.w	r4, sl, sl
 8003202:	4699      	mov	r9, r3
 8003204:	46a2      	mov	sl, r4
 8003206:	eb19 090b 	adds.w	r9, r9, fp
 800320a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800320e:	f04f 0100 	mov.w	r1, #0
 8003212:	f04f 0200 	mov.w	r2, #0
 8003216:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800321a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800321e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003222:	4689      	mov	r9, r1
 8003224:	4692      	mov	sl, r2
 8003226:	eb1b 0509 	adds.w	r5, fp, r9
 800322a:	eb4c 060a 	adc.w	r6, ip, sl
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	4619      	mov	r1, r3
 8003234:	f04f 0200 	mov.w	r2, #0
 8003238:	f04f 0300 	mov.w	r3, #0
 800323c:	f04f 0400 	mov.w	r4, #0
 8003240:	0094      	lsls	r4, r2, #2
 8003242:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003246:	008b      	lsls	r3, r1, #2
 8003248:	461a      	mov	r2, r3
 800324a:	4623      	mov	r3, r4
 800324c:	4628      	mov	r0, r5
 800324e:	4631      	mov	r1, r6
 8003250:	f7fc ffc0 	bl	80001d4 <__aeabi_uldivmod>
 8003254:	4603      	mov	r3, r0
 8003256:	460c      	mov	r4, r1
 8003258:	461a      	mov	r2, r3
 800325a:	4b32      	ldr	r3, [pc, #200]	; (8003324 <UART_SetConfig+0x6f4>)
 800325c:	fba3 1302 	umull	r1, r3, r3, r2
 8003260:	095b      	lsrs	r3, r3, #5
 8003262:	2164      	movs	r1, #100	; 0x64
 8003264:	fb01 f303 	mul.w	r3, r1, r3
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	011b      	lsls	r3, r3, #4
 800326c:	3332      	adds	r3, #50	; 0x32
 800326e:	4a2d      	ldr	r2, [pc, #180]	; (8003324 <UART_SetConfig+0x6f4>)
 8003270:	fba2 2303 	umull	r2, r3, r2, r3
 8003274:	095b      	lsrs	r3, r3, #5
 8003276:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800327a:	4498      	add	r8, r3
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	469b      	mov	fp, r3
 8003280:	f04f 0c00 	mov.w	ip, #0
 8003284:	46d9      	mov	r9, fp
 8003286:	46e2      	mov	sl, ip
 8003288:	eb19 0309 	adds.w	r3, r9, r9
 800328c:	eb4a 040a 	adc.w	r4, sl, sl
 8003290:	4699      	mov	r9, r3
 8003292:	46a2      	mov	sl, r4
 8003294:	eb19 090b 	adds.w	r9, r9, fp
 8003298:	eb4a 0a0c 	adc.w	sl, sl, ip
 800329c:	f04f 0100 	mov.w	r1, #0
 80032a0:	f04f 0200 	mov.w	r2, #0
 80032a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032a8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80032ac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80032b0:	4689      	mov	r9, r1
 80032b2:	4692      	mov	sl, r2
 80032b4:	eb1b 0509 	adds.w	r5, fp, r9
 80032b8:	eb4c 060a 	adc.w	r6, ip, sl
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	4619      	mov	r1, r3
 80032c2:	f04f 0200 	mov.w	r2, #0
 80032c6:	f04f 0300 	mov.w	r3, #0
 80032ca:	f04f 0400 	mov.w	r4, #0
 80032ce:	0094      	lsls	r4, r2, #2
 80032d0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80032d4:	008b      	lsls	r3, r1, #2
 80032d6:	461a      	mov	r2, r3
 80032d8:	4623      	mov	r3, r4
 80032da:	4628      	mov	r0, r5
 80032dc:	4631      	mov	r1, r6
 80032de:	f7fc ff79 	bl	80001d4 <__aeabi_uldivmod>
 80032e2:	4603      	mov	r3, r0
 80032e4:	460c      	mov	r4, r1
 80032e6:	461a      	mov	r2, r3
 80032e8:	4b0e      	ldr	r3, [pc, #56]	; (8003324 <UART_SetConfig+0x6f4>)
 80032ea:	fba3 1302 	umull	r1, r3, r3, r2
 80032ee:	095b      	lsrs	r3, r3, #5
 80032f0:	2164      	movs	r1, #100	; 0x64
 80032f2:	fb01 f303 	mul.w	r3, r1, r3
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	011b      	lsls	r3, r3, #4
 80032fa:	3332      	adds	r3, #50	; 0x32
 80032fc:	4a09      	ldr	r2, [pc, #36]	; (8003324 <UART_SetConfig+0x6f4>)
 80032fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003302:	095b      	lsrs	r3, r3, #5
 8003304:	f003 020f 	and.w	r2, r3, #15
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4442      	add	r2, r8
 800330e:	609a      	str	r2, [r3, #8]
}
 8003310:	e7ff      	b.n	8003312 <UART_SetConfig+0x6e2>
 8003312:	bf00      	nop
 8003314:	3714      	adds	r7, #20
 8003316:	46bd      	mov	sp, r7
 8003318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800331c:	40011000 	.word	0x40011000
 8003320:	40011400 	.word	0x40011400
 8003324:	51eb851f 	.word	0x51eb851f

08003328 <__libc_init_array>:
 8003328:	b570      	push	{r4, r5, r6, lr}
 800332a:	4e0d      	ldr	r6, [pc, #52]	; (8003360 <__libc_init_array+0x38>)
 800332c:	4c0d      	ldr	r4, [pc, #52]	; (8003364 <__libc_init_array+0x3c>)
 800332e:	1ba4      	subs	r4, r4, r6
 8003330:	10a4      	asrs	r4, r4, #2
 8003332:	2500      	movs	r5, #0
 8003334:	42a5      	cmp	r5, r4
 8003336:	d109      	bne.n	800334c <__libc_init_array+0x24>
 8003338:	4e0b      	ldr	r6, [pc, #44]	; (8003368 <__libc_init_array+0x40>)
 800333a:	4c0c      	ldr	r4, [pc, #48]	; (800336c <__libc_init_array+0x44>)
 800333c:	f000 f820 	bl	8003380 <_init>
 8003340:	1ba4      	subs	r4, r4, r6
 8003342:	10a4      	asrs	r4, r4, #2
 8003344:	2500      	movs	r5, #0
 8003346:	42a5      	cmp	r5, r4
 8003348:	d105      	bne.n	8003356 <__libc_init_array+0x2e>
 800334a:	bd70      	pop	{r4, r5, r6, pc}
 800334c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003350:	4798      	blx	r3
 8003352:	3501      	adds	r5, #1
 8003354:	e7ee      	b.n	8003334 <__libc_init_array+0xc>
 8003356:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800335a:	4798      	blx	r3
 800335c:	3501      	adds	r5, #1
 800335e:	e7f2      	b.n	8003346 <__libc_init_array+0x1e>
 8003360:	080033cc 	.word	0x080033cc
 8003364:	080033cc 	.word	0x080033cc
 8003368:	080033cc 	.word	0x080033cc
 800336c:	080033d0 	.word	0x080033d0

08003370 <memset>:
 8003370:	4402      	add	r2, r0
 8003372:	4603      	mov	r3, r0
 8003374:	4293      	cmp	r3, r2
 8003376:	d100      	bne.n	800337a <memset+0xa>
 8003378:	4770      	bx	lr
 800337a:	f803 1b01 	strb.w	r1, [r3], #1
 800337e:	e7f9      	b.n	8003374 <memset+0x4>

08003380 <_init>:
 8003380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003382:	bf00      	nop
 8003384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003386:	bc08      	pop	{r3}
 8003388:	469e      	mov	lr, r3
 800338a:	4770      	bx	lr

0800338c <_fini>:
 800338c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800338e:	bf00      	nop
 8003390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003392:	bc08      	pop	{r3}
 8003394:	469e      	mov	lr, r3
 8003396:	4770      	bx	lr
