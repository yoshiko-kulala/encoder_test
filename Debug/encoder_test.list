
encoder_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d3c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002ed0  08002ed0  00012ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002efc  08002efc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002efc  08002efc  00012efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002f04  08002f04  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f04  08002f04  00012f04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f08  08002f08  00012f08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002f0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000022c  2000000c  08002f18  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000238  08002f18  00020238  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009a1c  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000179b  00000000  00000000  00029a58  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b88  00000000  00000000  0002b1f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ac0  00000000  00000000  0002bd80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000153e0  00000000  00000000  0002c840  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007ab2  00000000  00000000  00041c20  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00087f8f  00000000  00000000  000496d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d1661  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003084  00000000  00000000  000d16dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002eb8 	.word	0x08002eb8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08002eb8 	.word	0x08002eb8

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b972 	b.w	80004d0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	4688      	mov	r8, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14b      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000212:	428a      	cmp	r2, r1
 8000214:	4615      	mov	r5, r2
 8000216:	d967      	bls.n	80002e8 <__udivmoddi4+0xe4>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0720 	rsb	r7, r2, #32
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	fa20 f707 	lsr.w	r7, r0, r7
 800022a:	4095      	lsls	r5, r2
 800022c:	ea47 0803 	orr.w	r8, r7, r3
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbb8 f7fe 	udiv	r7, r8, lr
 800023c:	fa1f fc85 	uxth.w	ip, r5
 8000240:	fb0e 8817 	mls	r8, lr, r7, r8
 8000244:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000248:	fb07 f10c 	mul.w	r1, r7, ip
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18eb      	adds	r3, r5, r3
 8000252:	f107 30ff 	add.w	r0, r7, #4294967295
 8000256:	f080 811b 	bcs.w	8000490 <__udivmoddi4+0x28c>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8118 	bls.w	8000490 <__udivmoddi4+0x28c>
 8000260:	3f02      	subs	r7, #2
 8000262:	442b      	add	r3, r5
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0fe 	udiv	r0, r3, lr
 800026c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fc0c 	mul.w	ip, r0, ip
 8000278:	45a4      	cmp	ip, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	192c      	adds	r4, r5, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x290>
 8000286:	45a4      	cmp	ip, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x290>
 800028c:	3802      	subs	r0, #2
 800028e:	442c      	add	r4, r5
 8000290:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000294:	eba4 040c 	sub.w	r4, r4, ip
 8000298:	2700      	movs	r7, #0
 800029a:	b11e      	cbz	r6, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c6 4300 	strd	r4, r3, [r6]
 80002a4:	4639      	mov	r1, r7
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xbe>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80eb 	beq.w	800048a <__udivmoddi4+0x286>
 80002b4:	2700      	movs	r7, #0
 80002b6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ba:	4638      	mov	r0, r7
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f783 	clz	r7, r3
 80002c6:	2f00      	cmp	r7, #0
 80002c8:	d147      	bne.n	800035a <__udivmoddi4+0x156>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd0>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2c4>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	4698      	mov	r8, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa0>
 80002e2:	e9c6 4800 	strd	r4, r8, [r6]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa0>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xe8>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 808f 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f6:	1b49      	subs	r1, r1, r5
 80002f8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002fc:	fa1f f885 	uxth.w	r8, r5
 8000300:	2701      	movs	r7, #1
 8000302:	fbb1 fcfe 	udiv	ip, r1, lr
 8000306:	0c23      	lsrs	r3, r4, #16
 8000308:	fb0e 111c 	mls	r1, lr, ip, r1
 800030c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000310:	fb08 f10c 	mul.w	r1, r8, ip
 8000314:	4299      	cmp	r1, r3
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x124>
 8000318:	18eb      	adds	r3, r5, r3
 800031a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4299      	cmp	r1, r3
 8000322:	f200 80cd 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 8000326:	4684      	mov	ip, r0
 8000328:	1a59      	subs	r1, r3, r1
 800032a:	b2a3      	uxth	r3, r4
 800032c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000330:	fb0e 1410 	mls	r4, lr, r0, r1
 8000334:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000338:	fb08 f800 	mul.w	r8, r8, r0
 800033c:	45a0      	cmp	r8, r4
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x14c>
 8000340:	192c      	adds	r4, r5, r4
 8000342:	f100 33ff 	add.w	r3, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x14a>
 8000348:	45a0      	cmp	r8, r4
 800034a:	f200 80b6 	bhi.w	80004ba <__udivmoddi4+0x2b6>
 800034e:	4618      	mov	r0, r3
 8000350:	eba4 0408 	sub.w	r4, r4, r8
 8000354:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000358:	e79f      	b.n	800029a <__udivmoddi4+0x96>
 800035a:	f1c7 0c20 	rsb	ip, r7, #32
 800035e:	40bb      	lsls	r3, r7
 8000360:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000364:	ea4e 0e03 	orr.w	lr, lr, r3
 8000368:	fa01 f407 	lsl.w	r4, r1, r7
 800036c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000370:	fa21 f30c 	lsr.w	r3, r1, ip
 8000374:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000378:	4325      	orrs	r5, r4
 800037a:	fbb3 f9f8 	udiv	r9, r3, r8
 800037e:	0c2c      	lsrs	r4, r5, #16
 8000380:	fb08 3319 	mls	r3, r8, r9, r3
 8000384:	fa1f fa8e 	uxth.w	sl, lr
 8000388:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800038c:	fb09 f40a 	mul.w	r4, r9, sl
 8000390:	429c      	cmp	r4, r3
 8000392:	fa02 f207 	lsl.w	r2, r2, r7
 8000396:	fa00 f107 	lsl.w	r1, r0, r7
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1e 0303 	adds.w	r3, lr, r3
 80003a0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a4:	f080 8087 	bcs.w	80004b6 <__udivmoddi4+0x2b2>
 80003a8:	429c      	cmp	r4, r3
 80003aa:	f240 8084 	bls.w	80004b6 <__udivmoddi4+0x2b2>
 80003ae:	f1a9 0902 	sub.w	r9, r9, #2
 80003b2:	4473      	add	r3, lr
 80003b4:	1b1b      	subs	r3, r3, r4
 80003b6:	b2ad      	uxth	r5, r5
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c8:	45a2      	cmp	sl, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1e 0404 	adds.w	r4, lr, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	d26b      	bcs.n	80004ae <__udivmoddi4+0x2aa>
 80003d6:	45a2      	cmp	sl, r4
 80003d8:	d969      	bls.n	80004ae <__udivmoddi4+0x2aa>
 80003da:	3802      	subs	r0, #2
 80003dc:	4474      	add	r4, lr
 80003de:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e2:	fba0 8902 	umull	r8, r9, r0, r2
 80003e6:	eba4 040a 	sub.w	r4, r4, sl
 80003ea:	454c      	cmp	r4, r9
 80003ec:	46c2      	mov	sl, r8
 80003ee:	464b      	mov	r3, r9
 80003f0:	d354      	bcc.n	800049c <__udivmoddi4+0x298>
 80003f2:	d051      	beq.n	8000498 <__udivmoddi4+0x294>
 80003f4:	2e00      	cmp	r6, #0
 80003f6:	d069      	beq.n	80004cc <__udivmoddi4+0x2c8>
 80003f8:	ebb1 050a 	subs.w	r5, r1, sl
 80003fc:	eb64 0403 	sbc.w	r4, r4, r3
 8000400:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000404:	40fd      	lsrs	r5, r7
 8000406:	40fc      	lsrs	r4, r7
 8000408:	ea4c 0505 	orr.w	r5, ip, r5
 800040c:	e9c6 5400 	strd	r5, r4, [r6]
 8000410:	2700      	movs	r7, #0
 8000412:	e747      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f703 	lsr.w	r7, r0, r3
 800041c:	4095      	lsls	r5, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	fa21 f303 	lsr.w	r3, r1, r3
 8000426:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042a:	4338      	orrs	r0, r7
 800042c:	0c01      	lsrs	r1, r0, #16
 800042e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000432:	fa1f f885 	uxth.w	r8, r5
 8000436:	fb0e 3317 	mls	r3, lr, r7, r3
 800043a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043e:	fb07 f308 	mul.w	r3, r7, r8
 8000442:	428b      	cmp	r3, r1
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x256>
 800044a:	1869      	adds	r1, r5, r1
 800044c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000450:	d22f      	bcs.n	80004b2 <__udivmoddi4+0x2ae>
 8000452:	428b      	cmp	r3, r1
 8000454:	d92d      	bls.n	80004b2 <__udivmoddi4+0x2ae>
 8000456:	3f02      	subs	r7, #2
 8000458:	4429      	add	r1, r5
 800045a:	1acb      	subs	r3, r1, r3
 800045c:	b281      	uxth	r1, r0
 800045e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000462:	fb0e 3310 	mls	r3, lr, r0, r3
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb00 f308 	mul.w	r3, r0, r8
 800046e:	428b      	cmp	r3, r1
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x27e>
 8000472:	1869      	adds	r1, r5, r1
 8000474:	f100 3cff 	add.w	ip, r0, #4294967295
 8000478:	d217      	bcs.n	80004aa <__udivmoddi4+0x2a6>
 800047a:	428b      	cmp	r3, r1
 800047c:	d915      	bls.n	80004aa <__udivmoddi4+0x2a6>
 800047e:	3802      	subs	r0, #2
 8000480:	4429      	add	r1, r5
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000488:	e73b      	b.n	8000302 <__udivmoddi4+0xfe>
 800048a:	4637      	mov	r7, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e709      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000490:	4607      	mov	r7, r0
 8000492:	e6e7      	b.n	8000264 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x8c>
 8000498:	4541      	cmp	r1, r8
 800049a:	d2ab      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 800049c:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a0:	eb69 020e 	sbc.w	r2, r9, lr
 80004a4:	3801      	subs	r0, #1
 80004a6:	4613      	mov	r3, r2
 80004a8:	e7a4      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004aa:	4660      	mov	r0, ip
 80004ac:	e7e9      	b.n	8000482 <__udivmoddi4+0x27e>
 80004ae:	4618      	mov	r0, r3
 80004b0:	e795      	b.n	80003de <__udivmoddi4+0x1da>
 80004b2:	4667      	mov	r7, ip
 80004b4:	e7d1      	b.n	800045a <__udivmoddi4+0x256>
 80004b6:	4681      	mov	r9, r0
 80004b8:	e77c      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004ba:	3802      	subs	r0, #2
 80004bc:	442c      	add	r4, r5
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0x14c>
 80004c0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c4:	442b      	add	r3, r5
 80004c6:	e72f      	b.n	8000328 <__udivmoddi4+0x124>
 80004c8:	4638      	mov	r0, r7
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xda>
 80004cc:	4637      	mov	r7, r6
 80004ce:	e6e9      	b.n	80002a4 <__udivmoddi4+0xa0>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <uart_putc>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void uart_putc(uint8_t c) {
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b084      	sub	sp, #16
 80004d8:	af00      	add	r7, sp, #0
 80004da:	4603      	mov	r3, r0
 80004dc:	71fb      	strb	r3, [r7, #7]
	char buf[1];
	buf[0] = c;
 80004de:	79fb      	ldrb	r3, [r7, #7]
 80004e0:	733b      	strb	r3, [r7, #12]
	HAL_UART_Transmit(&huart2, (uint8_t*) buf, sizeof(buf), 0xFFFF);
 80004e2:	f107 010c 	add.w	r1, r7, #12
 80004e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004ea:	2201      	movs	r2, #1
 80004ec:	4803      	ldr	r0, [pc, #12]	; (80004fc <uart_putc+0x28>)
 80004ee:	f002 f858 	bl	80025a2 <HAL_UART_Transmit>
}
 80004f2:	bf00      	nop
 80004f4:	3710      	adds	r7, #16
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	200001c8 	.word	0x200001c8

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	xdev_out(uart_putc);
 8000506:	4b3b      	ldr	r3, [pc, #236]	; (80005f4 <main+0xf4>)
 8000508:	4a3b      	ldr	r2, [pc, #236]	; (80005f8 <main+0xf8>)
 800050a:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050c:	f000 fec8 	bl	80012a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000510:	f000 f894 	bl	800063c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000514:	f000 fa82 	bl	8000a1c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000518:	f000 fa56 	bl	80009c8 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800051c:	f000 f9a2 	bl	8000864 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000520:	f000 f8f8 	bl	8000714 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000524:	f000 f94c 	bl	80007c0 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000528:	f000 f9ee 	bl	8000908 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
	if (HAL_TIM_Encoder_Init(&htim1, &sConfig1) != HAL_OK) {
 800052c:	4933      	ldr	r1, [pc, #204]	; (80005fc <main+0xfc>)
 800052e:	4834      	ldr	r0, [pc, #208]	; (8000600 <main+0x100>)
 8000530:	f001 fe0c 	bl	800214c <HAL_TIM_Encoder_Init>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	d001      	beq.n	800053e <main+0x3e>
		Error_Handler();
 800053a:	f000 fadf 	bl	8000afc <Error_Handler>
	}
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 800053e:	213c      	movs	r1, #60	; 0x3c
 8000540:	482f      	ldr	r0, [pc, #188]	; (8000600 <main+0x100>)
 8000542:	f001 fe95 	bl	8002270 <HAL_TIM_Encoder_Start>
	TIM1->CNT = 30000;
 8000546:	4b2f      	ldr	r3, [pc, #188]	; (8000604 <main+0x104>)
 8000548:	f247 5230 	movw	r2, #30000	; 0x7530
 800054c:	625a      	str	r2, [r3, #36]	; 0x24

	if (HAL_TIM_Encoder_Init(&htim2, &sConfig2) != HAL_OK) {
 800054e:	492e      	ldr	r1, [pc, #184]	; (8000608 <main+0x108>)
 8000550:	482e      	ldr	r0, [pc, #184]	; (800060c <main+0x10c>)
 8000552:	f001 fdfb 	bl	800214c <HAL_TIM_Encoder_Init>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <main+0x60>
		Error_Handler();
 800055c:	f000 face 	bl	8000afc <Error_Handler>
	}
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000560:	213c      	movs	r1, #60	; 0x3c
 8000562:	482a      	ldr	r0, [pc, #168]	; (800060c <main+0x10c>)
 8000564:	f001 fe84 	bl	8002270 <HAL_TIM_Encoder_Start>
	TIM2->CNT = 30000;
 8000568:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800056c:	f247 5230 	movw	r2, #30000	; 0x7530
 8000570:	625a      	str	r2, [r3, #36]	; 0x24


	if (HAL_TIM_Encoder_Init(&htim3, &sConfig3) != HAL_OK) {
 8000572:	4927      	ldr	r1, [pc, #156]	; (8000610 <main+0x110>)
 8000574:	4827      	ldr	r0, [pc, #156]	; (8000614 <main+0x114>)
 8000576:	f001 fde9 	bl	800214c <HAL_TIM_Encoder_Init>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <main+0x84>
		Error_Handler();
 8000580:	f000 fabc 	bl	8000afc <Error_Handler>
	}
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000584:	213c      	movs	r1, #60	; 0x3c
 8000586:	4823      	ldr	r0, [pc, #140]	; (8000614 <main+0x114>)
 8000588:	f001 fe72 	bl	8002270 <HAL_TIM_Encoder_Start>
	TIM3->CNT = 30000;
 800058c:	4b22      	ldr	r3, [pc, #136]	; (8000618 <main+0x118>)
 800058e:	f247 5230 	movw	r2, #30000	; 0x7530
 8000592:	625a      	str	r2, [r3, #36]	; 0x24

	if (HAL_TIM_Encoder_Init(&htim4, &sConfig4) != HAL_OK) {
 8000594:	4921      	ldr	r1, [pc, #132]	; (800061c <main+0x11c>)
 8000596:	4822      	ldr	r0, [pc, #136]	; (8000620 <main+0x120>)
 8000598:	f001 fdd8 	bl	800214c <HAL_TIM_Encoder_Init>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <main+0xa6>
		Error_Handler();
 80005a2:	f000 faab 	bl	8000afc <Error_Handler>
	}
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80005a6:	213c      	movs	r1, #60	; 0x3c
 80005a8:	481d      	ldr	r0, [pc, #116]	; (8000620 <main+0x120>)
 80005aa:	f001 fe61 	bl	8002270 <HAL_TIM_Encoder_Start>
	TIM4->CNT = 30000;
 80005ae:	4b1d      	ldr	r3, [pc, #116]	; (8000624 <main+0x124>)
 80005b0:	f247 5230 	movw	r2, #30000	; 0x7530
 80005b4:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		uwDirectionCount1 = TIM1->CNT;
 80005b6:	4b13      	ldr	r3, [pc, #76]	; (8000604 <main+0x104>)
 80005b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005ba:	4a1b      	ldr	r2, [pc, #108]	; (8000628 <main+0x128>)
 80005bc:	6013      	str	r3, [r2, #0]
		uwDirectionCount2 = TIM2->CNT;
 80005be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005c4:	4a19      	ldr	r2, [pc, #100]	; (800062c <main+0x12c>)
 80005c6:	6013      	str	r3, [r2, #0]
		uwDirectionCount3 = TIM3->CNT;
 80005c8:	4b13      	ldr	r3, [pc, #76]	; (8000618 <main+0x118>)
 80005ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005cc:	4a18      	ldr	r2, [pc, #96]	; (8000630 <main+0x130>)
 80005ce:	6013      	str	r3, [r2, #0]
		uwDirectionCount4 = TIM4->CNT;
 80005d0:	4b14      	ldr	r3, [pc, #80]	; (8000624 <main+0x124>)
 80005d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005d4:	4a17      	ldr	r2, [pc, #92]	; (8000634 <main+0x134>)
 80005d6:	6013      	str	r3, [r2, #0]
		xprintf("%d\t,\t%d\t,\t%d\t,\t%d\r\n", uwDirectionCount1,uwDirectionCount2, uwDirectionCount3,uwDirectionCount4);
 80005d8:	4b13      	ldr	r3, [pc, #76]	; (8000628 <main+0x128>)
 80005da:	6819      	ldr	r1, [r3, #0]
 80005dc:	4b13      	ldr	r3, [pc, #76]	; (800062c <main+0x12c>)
 80005de:	681a      	ldr	r2, [r3, #0]
 80005e0:	4b13      	ldr	r3, [pc, #76]	; (8000630 <main+0x130>)
 80005e2:	6818      	ldr	r0, [r3, #0]
 80005e4:	4b13      	ldr	r3, [pc, #76]	; (8000634 <main+0x134>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	4603      	mov	r3, r0
 80005ec:	4812      	ldr	r0, [pc, #72]	; (8000638 <main+0x138>)
 80005ee:	f000 fe1b 	bl	8001228 <xprintf>
		uwDirectionCount1 = TIM1->CNT;
 80005f2:	e7e0      	b.n	80005b6 <main+0xb6>
 80005f4:	20000230 	.word	0x20000230
 80005f8:	080004d5 	.word	0x080004d5
 80005fc:	20000044 	.word	0x20000044
 8000600:	20000148 	.word	0x20000148
 8000604:	40010000 	.word	0x40010000
 8000608:	20000208 	.word	0x20000208
 800060c:	20000188 	.word	0x20000188
 8000610:	200000b8 	.word	0x200000b8
 8000614:	200000dc 	.word	0x200000dc
 8000618:	40000400 	.word	0x40000400
 800061c:	20000124 	.word	0x20000124
 8000620:	20000068 	.word	0x20000068
 8000624:	40000800 	.word	0x40000800
 8000628:	20000028 	.word	0x20000028
 800062c:	2000002c 	.word	0x2000002c
 8000630:	20000030 	.word	0x20000030
 8000634:	20000034 	.word	0x20000034
 8000638:	08002ed0 	.word	0x08002ed0

0800063c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b094      	sub	sp, #80	; 0x50
 8000640:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000642:	f107 0320 	add.w	r3, r7, #32
 8000646:	2230      	movs	r2, #48	; 0x30
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f002 fc2c 	bl	8002ea8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000650:	f107 030c 	add.w	r3, r7, #12
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000660:	2300      	movs	r3, #0
 8000662:	60bb      	str	r3, [r7, #8]
 8000664:	4b29      	ldr	r3, [pc, #164]	; (800070c <SystemClock_Config+0xd0>)
 8000666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000668:	4a28      	ldr	r2, [pc, #160]	; (800070c <SystemClock_Config+0xd0>)
 800066a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800066e:	6413      	str	r3, [r2, #64]	; 0x40
 8000670:	4b26      	ldr	r3, [pc, #152]	; (800070c <SystemClock_Config+0xd0>)
 8000672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000674:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000678:	60bb      	str	r3, [r7, #8]
 800067a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800067c:	2300      	movs	r3, #0
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	4b23      	ldr	r3, [pc, #140]	; (8000710 <SystemClock_Config+0xd4>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000688:	4a21      	ldr	r2, [pc, #132]	; (8000710 <SystemClock_Config+0xd4>)
 800068a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800068e:	6013      	str	r3, [r2, #0]
 8000690:	4b1f      	ldr	r3, [pc, #124]	; (8000710 <SystemClock_Config+0xd4>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800069c:	2302      	movs	r3, #2
 800069e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a0:	2301      	movs	r3, #1
 80006a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a4:	2310      	movs	r3, #16
 80006a6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a8:	2302      	movs	r3, #2
 80006aa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006ac:	2300      	movs	r3, #0
 80006ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006b0:	2310      	movs	r3, #16
 80006b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006b4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006b8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006ba:	2304      	movs	r3, #4
 80006bc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006be:	2307      	movs	r3, #7
 80006c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c2:	f107 0320 	add.w	r3, r7, #32
 80006c6:	4618      	mov	r0, r3
 80006c8:	f001 f8de 	bl	8001888 <HAL_RCC_OscConfig>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006d2:	f000 fa13 	bl	8000afc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d6:	230f      	movs	r3, #15
 80006d8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006da:	2302      	movs	r3, #2
 80006dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006de:	2300      	movs	r3, #0
 80006e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006ec:	f107 030c 	add.w	r3, r7, #12
 80006f0:	2102      	movs	r1, #2
 80006f2:	4618      	mov	r0, r3
 80006f4:	f001 fb38 	bl	8001d68 <HAL_RCC_ClockConfig>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006fe:	f000 f9fd 	bl	8000afc <Error_Handler>
  }
}
 8000702:	bf00      	nop
 8000704:	3750      	adds	r7, #80	; 0x50
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40023800 	.word	0x40023800
 8000710:	40007000 	.word	0x40007000

08000714 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  //TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000718:	4b25      	ldr	r3, [pc, #148]	; (80007b0 <MX_TIM1_Init+0x9c>)
 800071a:	4a26      	ldr	r2, [pc, #152]	; (80007b4 <MX_TIM1_Init+0xa0>)
 800071c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10;
 800071e:	4b24      	ldr	r3, [pc, #144]	; (80007b0 <MX_TIM1_Init+0x9c>)
 8000720:	220a      	movs	r2, #10
 8000722:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000724:	4b22      	ldr	r3, [pc, #136]	; (80007b0 <MX_TIM1_Init+0x9c>)
 8000726:	2200      	movs	r2, #0
 8000728:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 59999;
 800072a:	4b21      	ldr	r3, [pc, #132]	; (80007b0 <MX_TIM1_Init+0x9c>)
 800072c:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8000730:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000732:	4b1f      	ldr	r3, [pc, #124]	; (80007b0 <MX_TIM1_Init+0x9c>)
 8000734:	2200      	movs	r2, #0
 8000736:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000738:	4b1d      	ldr	r3, [pc, #116]	; (80007b0 <MX_TIM1_Init+0x9c>)
 800073a:	2200      	movs	r2, #0
 800073c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800073e:	4b1c      	ldr	r3, [pc, #112]	; (80007b0 <MX_TIM1_Init+0x9c>)
 8000740:	2200      	movs	r2, #0
 8000742:	619a      	str	r2, [r3, #24]
  sConfig1.EncoderMode = TIM_ENCODERMODE_TI1;
 8000744:	4b1c      	ldr	r3, [pc, #112]	; (80007b8 <MX_TIM1_Init+0xa4>)
 8000746:	2201      	movs	r2, #1
 8000748:	601a      	str	r2, [r3, #0]
  sConfig1.IC1Polarity = TIM_ICPOLARITY_RISING;
 800074a:	4b1b      	ldr	r3, [pc, #108]	; (80007b8 <MX_TIM1_Init+0xa4>)
 800074c:	2200      	movs	r2, #0
 800074e:	605a      	str	r2, [r3, #4]
  sConfig1.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000750:	4b19      	ldr	r3, [pc, #100]	; (80007b8 <MX_TIM1_Init+0xa4>)
 8000752:	2201      	movs	r2, #1
 8000754:	609a      	str	r2, [r3, #8]
  sConfig1.IC1Prescaler = TIM_ICPSC_DIV1;
 8000756:	4b18      	ldr	r3, [pc, #96]	; (80007b8 <MX_TIM1_Init+0xa4>)
 8000758:	2200      	movs	r2, #0
 800075a:	60da      	str	r2, [r3, #12]
  sConfig1.IC1Filter = 0;
 800075c:	4b16      	ldr	r3, [pc, #88]	; (80007b8 <MX_TIM1_Init+0xa4>)
 800075e:	2200      	movs	r2, #0
 8000760:	611a      	str	r2, [r3, #16]
  sConfig1.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000762:	4b15      	ldr	r3, [pc, #84]	; (80007b8 <MX_TIM1_Init+0xa4>)
 8000764:	2200      	movs	r2, #0
 8000766:	615a      	str	r2, [r3, #20]
  sConfig1.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000768:	4b13      	ldr	r3, [pc, #76]	; (80007b8 <MX_TIM1_Init+0xa4>)
 800076a:	2201      	movs	r2, #1
 800076c:	619a      	str	r2, [r3, #24]
  sConfig1.IC2Prescaler = TIM_ICPSC_DIV1;
 800076e:	4b12      	ldr	r3, [pc, #72]	; (80007b8 <MX_TIM1_Init+0xa4>)
 8000770:	2200      	movs	r2, #0
 8000772:	61da      	str	r2, [r3, #28]
  sConfig1.IC2Filter = 0;
 8000774:	4b10      	ldr	r3, [pc, #64]	; (80007b8 <MX_TIM1_Init+0xa4>)
 8000776:	2200      	movs	r2, #0
 8000778:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig1) != HAL_OK)
 800077a:	490f      	ldr	r1, [pc, #60]	; (80007b8 <MX_TIM1_Init+0xa4>)
 800077c:	480c      	ldr	r0, [pc, #48]	; (80007b0 <MX_TIM1_Init+0x9c>)
 800077e:	f001 fce5 	bl	800214c <HAL_TIM_Encoder_Init>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000788:	f000 f9b8 	bl	8000afc <Error_Handler>
  }
  sMasterConfig1.MasterOutputTrigger = TIM_TRGO_RESET;
 800078c:	4b0b      	ldr	r3, [pc, #44]	; (80007bc <MX_TIM1_Init+0xa8>)
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
  sMasterConfig1.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000792:	4b0a      	ldr	r3, [pc, #40]	; (80007bc <MX_TIM1_Init+0xa8>)
 8000794:	2200      	movs	r2, #0
 8000796:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig1) != HAL_OK)
 8000798:	4908      	ldr	r1, [pc, #32]	; (80007bc <MX_TIM1_Init+0xa8>)
 800079a:	4805      	ldr	r0, [pc, #20]	; (80007b0 <MX_TIM1_Init+0x9c>)
 800079c:	f001 fe46 	bl	800242c <HAL_TIMEx_MasterConfigSynchronization>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80007a6:	f000 f9a9 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	20000148 	.word	0x20000148
 80007b4:	40010000 	.word	0x40010000
 80007b8:	20000044 	.word	0x20000044
 80007bc:	200000b0 	.word	0x200000b0

080007c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  //TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007c4:	4b24      	ldr	r3, [pc, #144]	; (8000858 <MX_TIM2_Init+0x98>)
 80007c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10;
 80007cc:	4b22      	ldr	r3, [pc, #136]	; (8000858 <MX_TIM2_Init+0x98>)
 80007ce:	220a      	movs	r2, #10
 80007d0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d2:	4b21      	ldr	r3, [pc, #132]	; (8000858 <MX_TIM2_Init+0x98>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 59999;
 80007d8:	4b1f      	ldr	r3, [pc, #124]	; (8000858 <MX_TIM2_Init+0x98>)
 80007da:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80007de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007e0:	4b1d      	ldr	r3, [pc, #116]	; (8000858 <MX_TIM2_Init+0x98>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007e6:	4b1c      	ldr	r3, [pc, #112]	; (8000858 <MX_TIM2_Init+0x98>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	619a      	str	r2, [r3, #24]
  sConfig2.EncoderMode = TIM_ENCODERMODE_TI1;
 80007ec:	4b1b      	ldr	r3, [pc, #108]	; (800085c <MX_TIM2_Init+0x9c>)
 80007ee:	2201      	movs	r2, #1
 80007f0:	601a      	str	r2, [r3, #0]
  sConfig2.IC1Polarity = TIM_ICPOLARITY_RISING;
 80007f2:	4b1a      	ldr	r3, [pc, #104]	; (800085c <MX_TIM2_Init+0x9c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	605a      	str	r2, [r3, #4]
  sConfig2.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80007f8:	4b18      	ldr	r3, [pc, #96]	; (800085c <MX_TIM2_Init+0x9c>)
 80007fa:	2201      	movs	r2, #1
 80007fc:	609a      	str	r2, [r3, #8]
  sConfig2.IC1Prescaler = TIM_ICPSC_DIV1;
 80007fe:	4b17      	ldr	r3, [pc, #92]	; (800085c <MX_TIM2_Init+0x9c>)
 8000800:	2200      	movs	r2, #0
 8000802:	60da      	str	r2, [r3, #12]
  sConfig2.IC1Filter = 0;
 8000804:	4b15      	ldr	r3, [pc, #84]	; (800085c <MX_TIM2_Init+0x9c>)
 8000806:	2200      	movs	r2, #0
 8000808:	611a      	str	r2, [r3, #16]
  sConfig2.IC2Polarity = TIM_ICPOLARITY_RISING;
 800080a:	4b14      	ldr	r3, [pc, #80]	; (800085c <MX_TIM2_Init+0x9c>)
 800080c:	2200      	movs	r2, #0
 800080e:	615a      	str	r2, [r3, #20]
  sConfig2.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000810:	4b12      	ldr	r3, [pc, #72]	; (800085c <MX_TIM2_Init+0x9c>)
 8000812:	2201      	movs	r2, #1
 8000814:	619a      	str	r2, [r3, #24]
  sConfig2.IC2Prescaler = TIM_ICPSC_DIV1;
 8000816:	4b11      	ldr	r3, [pc, #68]	; (800085c <MX_TIM2_Init+0x9c>)
 8000818:	2200      	movs	r2, #0
 800081a:	61da      	str	r2, [r3, #28]
  sConfig2.IC2Filter = 0;
 800081c:	4b0f      	ldr	r3, [pc, #60]	; (800085c <MX_TIM2_Init+0x9c>)
 800081e:	2200      	movs	r2, #0
 8000820:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig2) != HAL_OK)
 8000822:	490e      	ldr	r1, [pc, #56]	; (800085c <MX_TIM2_Init+0x9c>)
 8000824:	480c      	ldr	r0, [pc, #48]	; (8000858 <MX_TIM2_Init+0x98>)
 8000826:	f001 fc91 	bl	800214c <HAL_TIM_Encoder_Init>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000830:	f000 f964 	bl	8000afc <Error_Handler>
  }
  sMasterConfig2.MasterOutputTrigger = TIM_TRGO_RESET;
 8000834:	4b0a      	ldr	r3, [pc, #40]	; (8000860 <MX_TIM2_Init+0xa0>)
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
  sMasterConfig2.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800083a:	4b09      	ldr	r3, [pc, #36]	; (8000860 <MX_TIM2_Init+0xa0>)
 800083c:	2200      	movs	r2, #0
 800083e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig2) != HAL_OK)
 8000840:	4907      	ldr	r1, [pc, #28]	; (8000860 <MX_TIM2_Init+0xa0>)
 8000842:	4805      	ldr	r0, [pc, #20]	; (8000858 <MX_TIM2_Init+0x98>)
 8000844:	f001 fdf2 	bl	800242c <HAL_TIMEx_MasterConfigSynchronization>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800084e:	f000 f955 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	20000188 	.word	0x20000188
 800085c:	20000208 	.word	0x20000208
 8000860:	2000003c 	.word	0x2000003c

08000864 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  //TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000868:	4b23      	ldr	r3, [pc, #140]	; (80008f8 <MX_TIM3_Init+0x94>)
 800086a:	4a24      	ldr	r2, [pc, #144]	; (80008fc <MX_TIM3_Init+0x98>)
 800086c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10;
 800086e:	4b22      	ldr	r3, [pc, #136]	; (80008f8 <MX_TIM3_Init+0x94>)
 8000870:	220a      	movs	r2, #10
 8000872:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000874:	4b20      	ldr	r3, [pc, #128]	; (80008f8 <MX_TIM3_Init+0x94>)
 8000876:	2200      	movs	r2, #0
 8000878:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 59999;
 800087a:	4b1f      	ldr	r3, [pc, #124]	; (80008f8 <MX_TIM3_Init+0x94>)
 800087c:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8000880:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000882:	4b1d      	ldr	r3, [pc, #116]	; (80008f8 <MX_TIM3_Init+0x94>)
 8000884:	2200      	movs	r2, #0
 8000886:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000888:	4b1b      	ldr	r3, [pc, #108]	; (80008f8 <MX_TIM3_Init+0x94>)
 800088a:	2200      	movs	r2, #0
 800088c:	619a      	str	r2, [r3, #24]
  sConfig3.EncoderMode = TIM_ENCODERMODE_TI1;
 800088e:	4b1c      	ldr	r3, [pc, #112]	; (8000900 <MX_TIM3_Init+0x9c>)
 8000890:	2201      	movs	r2, #1
 8000892:	601a      	str	r2, [r3, #0]
  sConfig3.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000894:	4b1a      	ldr	r3, [pc, #104]	; (8000900 <MX_TIM3_Init+0x9c>)
 8000896:	2200      	movs	r2, #0
 8000898:	605a      	str	r2, [r3, #4]
  sConfig3.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800089a:	4b19      	ldr	r3, [pc, #100]	; (8000900 <MX_TIM3_Init+0x9c>)
 800089c:	2201      	movs	r2, #1
 800089e:	609a      	str	r2, [r3, #8]
  sConfig3.IC1Prescaler = TIM_ICPSC_DIV1;
 80008a0:	4b17      	ldr	r3, [pc, #92]	; (8000900 <MX_TIM3_Init+0x9c>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	60da      	str	r2, [r3, #12]
  sConfig3.IC1Filter = 0;
 80008a6:	4b16      	ldr	r3, [pc, #88]	; (8000900 <MX_TIM3_Init+0x9c>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	611a      	str	r2, [r3, #16]
  sConfig3.IC2Polarity = TIM_ICPOLARITY_RISING;
 80008ac:	4b14      	ldr	r3, [pc, #80]	; (8000900 <MX_TIM3_Init+0x9c>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	615a      	str	r2, [r3, #20]
  sConfig3.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80008b2:	4b13      	ldr	r3, [pc, #76]	; (8000900 <MX_TIM3_Init+0x9c>)
 80008b4:	2201      	movs	r2, #1
 80008b6:	619a      	str	r2, [r3, #24]
  sConfig3.IC2Prescaler = TIM_ICPSC_DIV1;
 80008b8:	4b11      	ldr	r3, [pc, #68]	; (8000900 <MX_TIM3_Init+0x9c>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	61da      	str	r2, [r3, #28]
  sConfig3.IC2Filter = 0;
 80008be:	4b10      	ldr	r3, [pc, #64]	; (8000900 <MX_TIM3_Init+0x9c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig3) != HAL_OK)
 80008c4:	490e      	ldr	r1, [pc, #56]	; (8000900 <MX_TIM3_Init+0x9c>)
 80008c6:	480c      	ldr	r0, [pc, #48]	; (80008f8 <MX_TIM3_Init+0x94>)
 80008c8:	f001 fc40 	bl	800214c <HAL_TIM_Encoder_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80008d2:	f000 f913 	bl	8000afc <Error_Handler>
  }
  sMasterConfig3.MasterOutputTrigger = TIM_TRGO_RESET;
 80008d6:	4b0b      	ldr	r3, [pc, #44]	; (8000904 <MX_TIM3_Init+0xa0>)
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
  sMasterConfig3.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008dc:	4b09      	ldr	r3, [pc, #36]	; (8000904 <MX_TIM3_Init+0xa0>)
 80008de:	2200      	movs	r2, #0
 80008e0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig3) != HAL_OK)
 80008e2:	4908      	ldr	r1, [pc, #32]	; (8000904 <MX_TIM3_Init+0xa0>)
 80008e4:	4804      	ldr	r0, [pc, #16]	; (80008f8 <MX_TIM3_Init+0x94>)
 80008e6:	f001 fda1 	bl	800242c <HAL_TIMEx_MasterConfigSynchronization>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80008f0:	f000 f904 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80008f4:	bf00      	nop
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	200000dc 	.word	0x200000dc
 80008fc:	40000400 	.word	0x40000400
 8000900:	200000b8 	.word	0x200000b8
 8000904:	2000011c 	.word	0x2000011c

08000908 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08c      	sub	sp, #48	; 0x30
 800090c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800090e:	f107 030c 	add.w	r3, r7, #12
 8000912:	2224      	movs	r2, #36	; 0x24
 8000914:	2100      	movs	r1, #0
 8000916:	4618      	mov	r0, r3
 8000918:	f002 fac6 	bl	8002ea8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800091c:	1d3b      	adds	r3, r7, #4
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000924:	4b24      	ldr	r3, [pc, #144]	; (80009b8 <MX_TIM4_Init+0xb0>)
 8000926:	4a25      	ldr	r2, [pc, #148]	; (80009bc <MX_TIM4_Init+0xb4>)
 8000928:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10;
 800092a:	4b23      	ldr	r3, [pc, #140]	; (80009b8 <MX_TIM4_Init+0xb0>)
 800092c:	220a      	movs	r2, #10
 800092e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000930:	4b21      	ldr	r3, [pc, #132]	; (80009b8 <MX_TIM4_Init+0xb0>)
 8000932:	2200      	movs	r2, #0
 8000934:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000936:	4b20      	ldr	r3, [pc, #128]	; (80009b8 <MX_TIM4_Init+0xb0>)
 8000938:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800093c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800093e:	4b1e      	ldr	r3, [pc, #120]	; (80009b8 <MX_TIM4_Init+0xb0>)
 8000940:	2200      	movs	r2, #0
 8000942:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000944:	4b1c      	ldr	r3, [pc, #112]	; (80009b8 <MX_TIM4_Init+0xb0>)
 8000946:	2200      	movs	r2, #0
 8000948:	619a      	str	r2, [r3, #24]
  sConfig4.EncoderMode = TIM_ENCODERMODE_TI1;
 800094a:	4b1d      	ldr	r3, [pc, #116]	; (80009c0 <MX_TIM4_Init+0xb8>)
 800094c:	2201      	movs	r2, #1
 800094e:	601a      	str	r2, [r3, #0]
  sConfig4.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000950:	4b1b      	ldr	r3, [pc, #108]	; (80009c0 <MX_TIM4_Init+0xb8>)
 8000952:	2200      	movs	r2, #0
 8000954:	605a      	str	r2, [r3, #4]
  sConfig4.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000956:	4b1a      	ldr	r3, [pc, #104]	; (80009c0 <MX_TIM4_Init+0xb8>)
 8000958:	2201      	movs	r2, #1
 800095a:	609a      	str	r2, [r3, #8]
  sConfig4.IC1Prescaler = TIM_ICPSC_DIV1;
 800095c:	4b18      	ldr	r3, [pc, #96]	; (80009c0 <MX_TIM4_Init+0xb8>)
 800095e:	2200      	movs	r2, #0
 8000960:	60da      	str	r2, [r3, #12]
  sConfig4.IC1Filter = 0;
 8000962:	4b17      	ldr	r3, [pc, #92]	; (80009c0 <MX_TIM4_Init+0xb8>)
 8000964:	2200      	movs	r2, #0
 8000966:	611a      	str	r2, [r3, #16]
  sConfig4.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000968:	4b15      	ldr	r3, [pc, #84]	; (80009c0 <MX_TIM4_Init+0xb8>)
 800096a:	2200      	movs	r2, #0
 800096c:	615a      	str	r2, [r3, #20]
  sConfig4.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800096e:	4b14      	ldr	r3, [pc, #80]	; (80009c0 <MX_TIM4_Init+0xb8>)
 8000970:	2201      	movs	r2, #1
 8000972:	619a      	str	r2, [r3, #24]
  sConfig4.IC2Prescaler = TIM_ICPSC_DIV1;
 8000974:	4b12      	ldr	r3, [pc, #72]	; (80009c0 <MX_TIM4_Init+0xb8>)
 8000976:	2200      	movs	r2, #0
 8000978:	61da      	str	r2, [r3, #28]
  sConfig4.IC2Filter = 0;
 800097a:	4b11      	ldr	r3, [pc, #68]	; (80009c0 <MX_TIM4_Init+0xb8>)
 800097c:	2200      	movs	r2, #0
 800097e:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig4) != HAL_OK)
 8000980:	490f      	ldr	r1, [pc, #60]	; (80009c0 <MX_TIM4_Init+0xb8>)
 8000982:	480d      	ldr	r0, [pc, #52]	; (80009b8 <MX_TIM4_Init+0xb0>)
 8000984:	f001 fbe2 	bl	800214c <HAL_TIM_Encoder_Init>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800098e:	f000 f8b5 	bl	8000afc <Error_Handler>
  }
  sMasterConfig4.MasterOutputTrigger = TIM_TRGO_RESET;
 8000992:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <MX_TIM4_Init+0xbc>)
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
  sMasterConfig4.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000998:	4b0a      	ldr	r3, [pc, #40]	; (80009c4 <MX_TIM4_Init+0xbc>)
 800099a:	2200      	movs	r2, #0
 800099c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig4) != HAL_OK)
 800099e:	4909      	ldr	r1, [pc, #36]	; (80009c4 <MX_TIM4_Init+0xbc>)
 80009a0:	4805      	ldr	r0, [pc, #20]	; (80009b8 <MX_TIM4_Init+0xb0>)
 80009a2:	f001 fd43 	bl	800242c <HAL_TIMEx_MasterConfigSynchronization>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_TIM4_Init+0xa8>
  {
    Error_Handler();
 80009ac:	f000 f8a6 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80009b0:	bf00      	nop
 80009b2:	3730      	adds	r7, #48	; 0x30
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	20000068 	.word	0x20000068
 80009bc:	40000800 	.word	0x40000800
 80009c0:	20000124 	.word	0x20000124
 80009c4:	200000a8 	.word	0x200000a8

080009c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009cc:	4b11      	ldr	r3, [pc, #68]	; (8000a14 <MX_USART2_UART_Init+0x4c>)
 80009ce:	4a12      	ldr	r2, [pc, #72]	; (8000a18 <MX_USART2_UART_Init+0x50>)
 80009d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009d2:	4b10      	ldr	r3, [pc, #64]	; (8000a14 <MX_USART2_UART_Init+0x4c>)
 80009d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009da:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <MX_USART2_UART_Init+0x4c>)
 80009dc:	2200      	movs	r2, #0
 80009de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009e0:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <MX_USART2_UART_Init+0x4c>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009e6:	4b0b      	ldr	r3, [pc, #44]	; (8000a14 <MX_USART2_UART_Init+0x4c>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009ec:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <MX_USART2_UART_Init+0x4c>)
 80009ee:	220c      	movs	r2, #12
 80009f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009f2:	4b08      	ldr	r3, [pc, #32]	; (8000a14 <MX_USART2_UART_Init+0x4c>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009f8:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <MX_USART2_UART_Init+0x4c>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009fe:	4805      	ldr	r0, [pc, #20]	; (8000a14 <MX_USART2_UART_Init+0x4c>)
 8000a00:	f001 fd82 	bl	8002508 <HAL_UART_Init>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a0a:	f000 f877 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	200001c8 	.word	0x200001c8
 8000a18:	40004400 	.word	0x40004400

08000a1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b08a      	sub	sp, #40	; 0x28
 8000a20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a22:	f107 0314 	add.w	r3, r7, #20
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	605a      	str	r2, [r3, #4]
 8000a2c:	609a      	str	r2, [r3, #8]
 8000a2e:	60da      	str	r2, [r3, #12]
 8000a30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	613b      	str	r3, [r7, #16]
 8000a36:	4b2d      	ldr	r3, [pc, #180]	; (8000aec <MX_GPIO_Init+0xd0>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	4a2c      	ldr	r2, [pc, #176]	; (8000aec <MX_GPIO_Init+0xd0>)
 8000a3c:	f043 0304 	orr.w	r3, r3, #4
 8000a40:	6313      	str	r3, [r2, #48]	; 0x30
 8000a42:	4b2a      	ldr	r3, [pc, #168]	; (8000aec <MX_GPIO_Init+0xd0>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	f003 0304 	and.w	r3, r3, #4
 8000a4a:	613b      	str	r3, [r7, #16]
 8000a4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60fb      	str	r3, [r7, #12]
 8000a52:	4b26      	ldr	r3, [pc, #152]	; (8000aec <MX_GPIO_Init+0xd0>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	4a25      	ldr	r2, [pc, #148]	; (8000aec <MX_GPIO_Init+0xd0>)
 8000a58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5e:	4b23      	ldr	r3, [pc, #140]	; (8000aec <MX_GPIO_Init+0xd0>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60bb      	str	r3, [r7, #8]
 8000a6e:	4b1f      	ldr	r3, [pc, #124]	; (8000aec <MX_GPIO_Init+0xd0>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	4a1e      	ldr	r2, [pc, #120]	; (8000aec <MX_GPIO_Init+0xd0>)
 8000a74:	f043 0301 	orr.w	r3, r3, #1
 8000a78:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7a:	4b1c      	ldr	r3, [pc, #112]	; (8000aec <MX_GPIO_Init+0xd0>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	f003 0301 	and.w	r3, r3, #1
 8000a82:	60bb      	str	r3, [r7, #8]
 8000a84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	607b      	str	r3, [r7, #4]
 8000a8a:	4b18      	ldr	r3, [pc, #96]	; (8000aec <MX_GPIO_Init+0xd0>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	4a17      	ldr	r2, [pc, #92]	; (8000aec <MX_GPIO_Init+0xd0>)
 8000a90:	f043 0302 	orr.w	r3, r3, #2
 8000a94:	6313      	str	r3, [r2, #48]	; 0x30
 8000a96:	4b15      	ldr	r3, [pc, #84]	; (8000aec <MX_GPIO_Init+0xd0>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	f003 0302 	and.w	r3, r3, #2
 8000a9e:	607b      	str	r3, [r7, #4]
 8000aa0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	2120      	movs	r1, #32
 8000aa6:	4812      	ldr	r0, [pc, #72]	; (8000af0 <MX_GPIO_Init+0xd4>)
 8000aa8:	f000 fed4 	bl	8001854 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000aac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ab0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ab2:	4b10      	ldr	r3, [pc, #64]	; (8000af4 <MX_GPIO_Init+0xd8>)
 8000ab4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000aba:	f107 0314 	add.w	r3, r7, #20
 8000abe:	4619      	mov	r1, r3
 8000ac0:	480d      	ldr	r0, [pc, #52]	; (8000af8 <MX_GPIO_Init+0xdc>)
 8000ac2:	f000 fd45 	bl	8001550 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ac6:	2320      	movs	r3, #32
 8000ac8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aca:	2301      	movs	r3, #1
 8000acc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ad6:	f107 0314 	add.w	r3, r7, #20
 8000ada:	4619      	mov	r1, r3
 8000adc:	4804      	ldr	r0, [pc, #16]	; (8000af0 <MX_GPIO_Init+0xd4>)
 8000ade:	f000 fd37 	bl	8001550 <HAL_GPIO_Init>

}
 8000ae2:	bf00      	nop
 8000ae4:	3728      	adds	r7, #40	; 0x28
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40023800 	.word	0x40023800
 8000af0:	40020000 	.word	0x40020000
 8000af4:	10210000 	.word	0x10210000
 8000af8:	40020800 	.word	0x40020800

08000afc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
	...

08000b0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	607b      	str	r3, [r7, #4]
 8000b16:	4b10      	ldr	r3, [pc, #64]	; (8000b58 <HAL_MspInit+0x4c>)
 8000b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1a:	4a0f      	ldr	r2, [pc, #60]	; (8000b58 <HAL_MspInit+0x4c>)
 8000b1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b20:	6453      	str	r3, [r2, #68]	; 0x44
 8000b22:	4b0d      	ldr	r3, [pc, #52]	; (8000b58 <HAL_MspInit+0x4c>)
 8000b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b2a:	607b      	str	r3, [r7, #4]
 8000b2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	603b      	str	r3, [r7, #0]
 8000b32:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <HAL_MspInit+0x4c>)
 8000b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b36:	4a08      	ldr	r2, [pc, #32]	; (8000b58 <HAL_MspInit+0x4c>)
 8000b38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b3e:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <HAL_MspInit+0x4c>)
 8000b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b46:	603b      	str	r3, [r7, #0]
 8000b48:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b4a:	2007      	movs	r0, #7
 8000b4c:	f000 fccc 	bl	80014e8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b50:	bf00      	nop
 8000b52:	3708      	adds	r7, #8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40023800 	.word	0x40023800

08000b5c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b090      	sub	sp, #64	; 0x40
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
 8000b70:	60da      	str	r2, [r3, #12]
 8000b72:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a64      	ldr	r2, [pc, #400]	; (8000d0c <HAL_TIM_Encoder_MspInit+0x1b0>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d12d      	bne.n	8000bda <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b82:	4b63      	ldr	r3, [pc, #396]	; (8000d10 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b86:	4a62      	ldr	r2, [pc, #392]	; (8000d10 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000b88:	f043 0301 	orr.w	r3, r3, #1
 8000b8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b8e:	4b60      	ldr	r3, [pc, #384]	; (8000d10 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b98:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	627b      	str	r3, [r7, #36]	; 0x24
 8000b9e:	4b5c      	ldr	r3, [pc, #368]	; (8000d10 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	4a5b      	ldr	r2, [pc, #364]	; (8000d10 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000ba4:	f043 0301 	orr.w	r3, r3, #1
 8000ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8000baa:	4b59      	ldr	r3, [pc, #356]	; (8000d10 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	f003 0301 	and.w	r3, r3, #1
 8000bb2:	627b      	str	r3, [r7, #36]	; 0x24
 8000bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000bb6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bcc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4850      	ldr	r0, [pc, #320]	; (8000d14 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8000bd4:	f000 fcbc 	bl	8001550 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000bd8:	e094      	b.n	8000d04 <HAL_TIM_Encoder_MspInit+0x1a8>
  else if(htim_encoder->Instance==TIM2)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000be2:	d12c      	bne.n	8000c3e <HAL_TIM_Encoder_MspInit+0xe2>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000be4:	2300      	movs	r3, #0
 8000be6:	623b      	str	r3, [r7, #32]
 8000be8:	4b49      	ldr	r3, [pc, #292]	; (8000d10 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bec:	4a48      	ldr	r2, [pc, #288]	; (8000d10 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000bee:	f043 0301 	orr.w	r3, r3, #1
 8000bf2:	6413      	str	r3, [r2, #64]	; 0x40
 8000bf4:	4b46      	ldr	r3, [pc, #280]	; (8000d10 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf8:	f003 0301 	and.w	r3, r3, #1
 8000bfc:	623b      	str	r3, [r7, #32]
 8000bfe:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c00:	2300      	movs	r3, #0
 8000c02:	61fb      	str	r3, [r7, #28]
 8000c04:	4b42      	ldr	r3, [pc, #264]	; (8000d10 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c08:	4a41      	ldr	r2, [pc, #260]	; (8000d10 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000c0a:	f043 0301 	orr.w	r3, r3, #1
 8000c0e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c10:	4b3f      	ldr	r3, [pc, #252]	; (8000d10 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c14:	f003 0301 	and.w	r3, r3, #1
 8000c18:	61fb      	str	r3, [r7, #28]
 8000c1a:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c1c:	2303      	movs	r3, #3
 8000c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c20:	2302      	movs	r3, #2
 8000c22:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c34:	4619      	mov	r1, r3
 8000c36:	4837      	ldr	r0, [pc, #220]	; (8000d14 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8000c38:	f000 fc8a 	bl	8001550 <HAL_GPIO_Init>
}
 8000c3c:	e062      	b.n	8000d04 <HAL_TIM_Encoder_MspInit+0x1a8>
  else if(htim_encoder->Instance==TIM3)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a35      	ldr	r2, [pc, #212]	; (8000d18 <HAL_TIM_Encoder_MspInit+0x1bc>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d12c      	bne.n	8000ca2 <HAL_TIM_Encoder_MspInit+0x146>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c48:	2300      	movs	r3, #0
 8000c4a:	61bb      	str	r3, [r7, #24]
 8000c4c:	4b30      	ldr	r3, [pc, #192]	; (8000d10 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c50:	4a2f      	ldr	r2, [pc, #188]	; (8000d10 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000c52:	f043 0302 	orr.w	r3, r3, #2
 8000c56:	6413      	str	r3, [r2, #64]	; 0x40
 8000c58:	4b2d      	ldr	r3, [pc, #180]	; (8000d10 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5c:	f003 0302 	and.w	r3, r3, #2
 8000c60:	61bb      	str	r3, [r7, #24]
 8000c62:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c64:	2300      	movs	r3, #0
 8000c66:	617b      	str	r3, [r7, #20]
 8000c68:	4b29      	ldr	r3, [pc, #164]	; (8000d10 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6c:	4a28      	ldr	r2, [pc, #160]	; (8000d10 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000c6e:	f043 0301 	orr.w	r3, r3, #1
 8000c72:	6313      	str	r3, [r2, #48]	; 0x30
 8000c74:	4b26      	ldr	r3, [pc, #152]	; (8000d10 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c78:	f003 0301 	and.w	r3, r3, #1
 8000c7c:	617b      	str	r3, [r7, #20]
 8000c7e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c80:	23c0      	movs	r3, #192	; 0xc0
 8000c82:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c84:	2302      	movs	r3, #2
 8000c86:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000c90:	2302      	movs	r3, #2
 8000c92:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c98:	4619      	mov	r1, r3
 8000c9a:	481e      	ldr	r0, [pc, #120]	; (8000d14 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8000c9c:	f000 fc58 	bl	8001550 <HAL_GPIO_Init>
}
 8000ca0:	e030      	b.n	8000d04 <HAL_TIM_Encoder_MspInit+0x1a8>
  else if(htim_encoder->Instance==TIM4)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a1d      	ldr	r2, [pc, #116]	; (8000d1c <HAL_TIM_Encoder_MspInit+0x1c0>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d12b      	bne.n	8000d04 <HAL_TIM_Encoder_MspInit+0x1a8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000cac:	2300      	movs	r3, #0
 8000cae:	613b      	str	r3, [r7, #16]
 8000cb0:	4b17      	ldr	r3, [pc, #92]	; (8000d10 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb4:	4a16      	ldr	r2, [pc, #88]	; (8000d10 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000cb6:	f043 0304 	orr.w	r3, r3, #4
 8000cba:	6413      	str	r3, [r2, #64]	; 0x40
 8000cbc:	4b14      	ldr	r3, [pc, #80]	; (8000d10 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc0:	f003 0304 	and.w	r3, r3, #4
 8000cc4:	613b      	str	r3, [r7, #16]
 8000cc6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc8:	2300      	movs	r3, #0
 8000cca:	60fb      	str	r3, [r7, #12]
 8000ccc:	4b10      	ldr	r3, [pc, #64]	; (8000d10 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd0:	4a0f      	ldr	r2, [pc, #60]	; (8000d10 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000cd2:	f043 0302 	orr.w	r3, r3, #2
 8000cd6:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd8:	4b0d      	ldr	r3, [pc, #52]	; (8000d10 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cdc:	f003 0302 	and.w	r3, r3, #2
 8000ce0:	60fb      	str	r3, [r7, #12]
 8000ce2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ce4:	23c0      	movs	r3, #192	; 0xc0
 8000ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cf8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4808      	ldr	r0, [pc, #32]	; (8000d20 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8000d00:	f000 fc26 	bl	8001550 <HAL_GPIO_Init>
}
 8000d04:	bf00      	nop
 8000d06:	3740      	adds	r7, #64	; 0x40
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	40010000 	.word	0x40010000
 8000d10:	40023800 	.word	0x40023800
 8000d14:	40020000 	.word	0x40020000
 8000d18:	40000400 	.word	0x40000400
 8000d1c:	40000800 	.word	0x40000800
 8000d20:	40020400 	.word	0x40020400

08000d24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b08a      	sub	sp, #40	; 0x28
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2c:	f107 0314 	add.w	r3, r7, #20
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
 8000d3a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a19      	ldr	r2, [pc, #100]	; (8000da8 <HAL_UART_MspInit+0x84>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d12b      	bne.n	8000d9e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	613b      	str	r3, [r7, #16]
 8000d4a:	4b18      	ldr	r3, [pc, #96]	; (8000dac <HAL_UART_MspInit+0x88>)
 8000d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4e:	4a17      	ldr	r2, [pc, #92]	; (8000dac <HAL_UART_MspInit+0x88>)
 8000d50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d54:	6413      	str	r3, [r2, #64]	; 0x40
 8000d56:	4b15      	ldr	r3, [pc, #84]	; (8000dac <HAL_UART_MspInit+0x88>)
 8000d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d5e:	613b      	str	r3, [r7, #16]
 8000d60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	60fb      	str	r3, [r7, #12]
 8000d66:	4b11      	ldr	r3, [pc, #68]	; (8000dac <HAL_UART_MspInit+0x88>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	4a10      	ldr	r2, [pc, #64]	; (8000dac <HAL_UART_MspInit+0x88>)
 8000d6c:	f043 0301 	orr.w	r3, r3, #1
 8000d70:	6313      	str	r3, [r2, #48]	; 0x30
 8000d72:	4b0e      	ldr	r3, [pc, #56]	; (8000dac <HAL_UART_MspInit+0x88>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	f003 0301 	and.w	r3, r3, #1
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d7e:	230c      	movs	r3, #12
 8000d80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d82:	2302      	movs	r3, #2
 8000d84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d8e:	2307      	movs	r3, #7
 8000d90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d92:	f107 0314 	add.w	r3, r7, #20
 8000d96:	4619      	mov	r1, r3
 8000d98:	4805      	ldr	r0, [pc, #20]	; (8000db0 <HAL_UART_MspInit+0x8c>)
 8000d9a:	f000 fbd9 	bl	8001550 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d9e:	bf00      	nop
 8000da0:	3728      	adds	r7, #40	; 0x28
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40004400 	.word	0x40004400
 8000dac:	40023800 	.word	0x40023800
 8000db0:	40020000 	.word	0x40020000

08000db4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr

08000dc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dc6:	e7fe      	b.n	8000dc6 <HardFault_Handler+0x4>

08000dc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dcc:	e7fe      	b.n	8000dcc <MemManage_Handler+0x4>

08000dce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dd2:	e7fe      	b.n	8000dd2 <BusFault_Handler+0x4>

08000dd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dd8:	e7fe      	b.n	8000dd8 <UsageFault_Handler+0x4>

08000dda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dde:	bf00      	nop
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr

08000de8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr

08000df6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr

08000e04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e08:	f000 fa9c 	bl	8001344 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e0c:	bf00      	nop
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e14:	4b08      	ldr	r3, [pc, #32]	; (8000e38 <SystemInit+0x28>)
 8000e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e1a:	4a07      	ldr	r2, [pc, #28]	; (8000e38 <SystemInit+0x28>)
 8000e1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e24:	4b04      	ldr	r3, [pc, #16]	; (8000e38 <SystemInit+0x28>)
 8000e26:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e2a:	609a      	str	r2, [r3, #8]
#endif
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	e000ed00 	.word	0xe000ed00

08000e3c <xputc>:
/*----------------------------------------------*/
/* Put a character                              */
/*----------------------------------------------*/

void xputc (char c)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	71fb      	strb	r3, [r7, #7]
	if (_CR_CRLF && c == '\n') xputc('\r');		/* CR -> CRLF */
 8000e46:	79fb      	ldrb	r3, [r7, #7]
 8000e48:	2b0a      	cmp	r3, #10
 8000e4a:	d102      	bne.n	8000e52 <xputc+0x16>
 8000e4c:	200d      	movs	r0, #13
 8000e4e:	f7ff fff5 	bl	8000e3c <xputc>

	if (outptr) {		/* Destination is memory */
 8000e52:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <xputc+0x48>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d007      	beq.n	8000e6a <xputc+0x2e>
		*outptr++ = (unsigned char)c;
 8000e5a:	4b0a      	ldr	r3, [pc, #40]	; (8000e84 <xputc+0x48>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	1c5a      	adds	r2, r3, #1
 8000e60:	4908      	ldr	r1, [pc, #32]	; (8000e84 <xputc+0x48>)
 8000e62:	600a      	str	r2, [r1, #0]
 8000e64:	79fa      	ldrb	r2, [r7, #7]
 8000e66:	701a      	strb	r2, [r3, #0]
		return;
 8000e68:	e008      	b.n	8000e7c <xputc+0x40>
	}
	if (xfunc_out) {	/* Destination is device */
 8000e6a:	4b07      	ldr	r3, [pc, #28]	; (8000e88 <xputc+0x4c>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d004      	beq.n	8000e7c <xputc+0x40>
		xfunc_out((unsigned char)c);
 8000e72:	4b05      	ldr	r3, [pc, #20]	; (8000e88 <xputc+0x4c>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	79fa      	ldrb	r2, [r7, #7]
 8000e78:	4610      	mov	r0, r2
 8000e7a:	4798      	blx	r3
	}
}
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	20000038 	.word	0x20000038
 8000e88:	20000230 	.word	0x20000230

08000e8c <xputs>:
/*----------------------------------------------*/

void xputs (					/* Put a string to the default device */
	const char* str				/* Pointer to the string */
)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
	while (*str) {
 8000e94:	e006      	b.n	8000ea4 <xputs+0x18>
		xputc(*str++);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	1c5a      	adds	r2, r3, #1
 8000e9a:	607a      	str	r2, [r7, #4]
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff ffcc 	bl	8000e3c <xputc>
	while (*str) {
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d1f4      	bne.n	8000e96 <xputs+0xa>
	}
}
 8000eac:	bf00      	nop
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <xvprintf>:
static
void xvprintf (
	const char*	fmt,	/* Pointer to the format string */
	va_list arp			/* Pointer to arguments */
)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b094      	sub	sp, #80	; 0x50
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	6039      	str	r1, [r7, #0]
	unsigned long vs;
#endif


	for (;;) {
		c = *fmt++;					/* Get a format character */
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	1c5a      	adds	r2, r3, #1
 8000ec2:	607a      	str	r2, [r7, #4]
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!c) break;				/* End of format? */
 8000eca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	f000 81a3 	beq.w	800121a <xvprintf+0x366>
		if (c != '%') {				/* Pass it through if not a % sequense */
 8000ed4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000ed8:	2b25      	cmp	r3, #37	; 0x25
 8000eda:	d005      	beq.n	8000ee8 <xvprintf+0x34>
			xputc(c); continue;
 8000edc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff ffab 	bl	8000e3c <xputc>
 8000ee6:	e197      	b.n	8001218 <xvprintf+0x364>
		}
		f = w = 0;					/* Clear parms */
 8000ee8:	2300      	movs	r3, #0
 8000eea:	643b      	str	r3, [r7, #64]	; 0x40
 8000eec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000eee:	63fb      	str	r3, [r7, #60]	; 0x3c
		c = *fmt++;					/* Get first char of the sequense */
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	1c5a      	adds	r2, r3, #1
 8000ef4:	607a      	str	r2, [r7, #4]
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (c == '0') {				/* Flag: left '0' padded */
 8000efc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000f00:	2b30      	cmp	r3, #48	; 0x30
 8000f02:	d108      	bne.n	8000f16 <xvprintf+0x62>
			f = 1; c = *fmt++;
 8000f04:	2301      	movs	r3, #1
 8000f06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	1c5a      	adds	r2, r3, #1
 8000f0c:	607a      	str	r2, [r7, #4]
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000f14:	e00b      	b.n	8000f2e <xvprintf+0x7a>
		} else {
			if (c == '-') {			/* Flag: left justified */
 8000f16:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000f1a:	2b2d      	cmp	r3, #45	; 0x2d
 8000f1c:	d107      	bne.n	8000f2e <xvprintf+0x7a>
				f = 2; c = *fmt++;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	1c5a      	adds	r2, r3, #1
 8000f26:	607a      	str	r2, [r7, #4]
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			}
		}
		if (c == '*') {				/* Minimum width from an argument */
 8000f2e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000f32:	2b2a      	cmp	r3, #42	; 0x2a
 8000f34:	d126      	bne.n	8000f84 <xvprintf+0xd0>
			n = va_arg(arp, int);
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	1d1a      	adds	r2, r3, #4
 8000f3a:	603a      	str	r2, [r7, #0]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	63bb      	str	r3, [r7, #56]	; 0x38
			if (n < 0) {			/* Flag: left justified */
 8000f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	da04      	bge.n	8000f50 <xvprintf+0x9c>
				n = 0 - n;
 8000f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f48:	425b      	negs	r3, r3
 8000f4a:	63bb      	str	r3, [r7, #56]	; 0x38
				f = 2;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
			}
			w = n; c = *fmt++;
 8000f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f52:	643b      	str	r3, [r7, #64]	; 0x40
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	1c5a      	adds	r2, r3, #1
 8000f58:	607a      	str	r2, [r7, #4]
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000f60:	e018      	b.n	8000f94 <xvprintf+0xe0>
		} else {
			while (c >= '0' && c <= '9') {	/* Minimum width */
				w = w * 10 + c - '0';
 8000f62:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000f64:	4613      	mov	r3, r2
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	4413      	add	r3, r2
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000f72:	4413      	add	r3, r2
 8000f74:	3b30      	subs	r3, #48	; 0x30
 8000f76:	643b      	str	r3, [r7, #64]	; 0x40
				c = *fmt++;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	1c5a      	adds	r2, r3, #1
 8000f7c:	607a      	str	r2, [r7, #4]
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			while (c >= '0' && c <= '9') {	/* Minimum width */
 8000f84:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000f88:	2b2f      	cmp	r3, #47	; 0x2f
 8000f8a:	d903      	bls.n	8000f94 <xvprintf+0xe0>
 8000f8c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000f90:	2b39      	cmp	r3, #57	; 0x39
 8000f92:	d9e6      	bls.n	8000f62 <xvprintf+0xae>
			}
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long */
 8000f94:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000f98:	2b6c      	cmp	r3, #108	; 0x6c
 8000f9a:	d003      	beq.n	8000fa4 <xvprintf+0xf0>
 8000f9c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000fa0:	2b4c      	cmp	r3, #76	; 0x4c
 8000fa2:	d109      	bne.n	8000fb8 <xvprintf+0x104>
			f |= 4; c = *fmt++;
 8000fa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000fa6:	f043 0304 	orr.w	r3, r3, #4
 8000faa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	1c5a      	adds	r2, r3, #1
 8000fb0:	607a      	str	r2, [r7, #4]
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			if (c == 'l' || c == 'L') {	/* Prefix: Size is long long */
				f |= 8; c = *fmt++;
			}
#endif
		}
		if (!c) break;				/* End of format? */
 8000fb8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	f000 812e 	beq.w	800121e <xvprintf+0x36a>
		d = c;
 8000fc2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000fc6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		if (d >= 'a') d -= 0x20;
 8000fca:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000fce:	2b60      	cmp	r3, #96	; 0x60
 8000fd0:	d904      	bls.n	8000fdc <xvprintf+0x128>
 8000fd2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000fd6:	3b20      	subs	r3, #32
 8000fd8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		switch (d) {				/* Type is... */
 8000fdc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000fe0:	3b42      	subs	r3, #66	; 0x42
 8000fe2:	2b16      	cmp	r3, #22
 8000fe4:	d873      	bhi.n	80010ce <xvprintf+0x21a>
 8000fe6:	a201      	add	r2, pc, #4	; (adr r2, 8000fec <xvprintf+0x138>)
 8000fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fec:	080010b7 	.word	0x080010b7
 8000ff0:	080010a5 	.word	0x080010a5
 8000ff4:	080010c3 	.word	0x080010c3
 8000ff8:	080010cf 	.word	0x080010cf
 8000ffc:	080010cf 	.word	0x080010cf
 8001000:	080010cf 	.word	0x080010cf
 8001004:	080010cf 	.word	0x080010cf
 8001008:	080010cf 	.word	0x080010cf
 800100c:	080010cf 	.word	0x080010cf
 8001010:	080010cf 	.word	0x080010cf
 8001014:	080010cf 	.word	0x080010cf
 8001018:	080010cf 	.word	0x080010cf
 800101c:	080010cf 	.word	0x080010cf
 8001020:	080010bd 	.word	0x080010bd
 8001024:	080010cf 	.word	0x080010cf
 8001028:	080010cf 	.word	0x080010cf
 800102c:	080010cf 	.word	0x080010cf
 8001030:	08001049 	.word	0x08001049
 8001034:	080010cf 	.word	0x080010cf
 8001038:	080010c3 	.word	0x080010c3
 800103c:	080010cf 	.word	0x080010cf
 8001040:	080010cf 	.word	0x080010cf
 8001044:	080010c9 	.word	0x080010c9
		case 'S' :					/* String */
			p = va_arg(arp, char*);
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	1d1a      	adds	r2, r3, #4
 800104c:	603a      	str	r2, [r7, #0]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	62bb      	str	r3, [r7, #40]	; 0x28
			for (j = 0; p[j]; j++) ;
 8001052:	2300      	movs	r3, #0
 8001054:	647b      	str	r3, [r7, #68]	; 0x44
 8001056:	e002      	b.n	800105e <xvprintf+0x1aa>
 8001058:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800105a:	3301      	adds	r3, #1
 800105c:	647b      	str	r3, [r7, #68]	; 0x44
 800105e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001060:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001062:	4413      	add	r3, r2
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d1f6      	bne.n	8001058 <xvprintf+0x1a4>
			while (!(f & 2) && j++ < w) xputc(' ');
 800106a:	e002      	b.n	8001072 <xvprintf+0x1be>
 800106c:	2020      	movs	r0, #32
 800106e:	f7ff fee5 	bl	8000e3c <xputc>
 8001072:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001074:	f003 0302 	and.w	r3, r3, #2
 8001078:	2b00      	cmp	r3, #0
 800107a:	d105      	bne.n	8001088 <xvprintf+0x1d4>
 800107c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800107e:	1c5a      	adds	r2, r3, #1
 8001080:	647a      	str	r2, [r7, #68]	; 0x44
 8001082:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001084:	429a      	cmp	r2, r3
 8001086:	d8f1      	bhi.n	800106c <xvprintf+0x1b8>
			xputs(p);
 8001088:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800108a:	f7ff feff 	bl	8000e8c <xputs>
			while (j++ < w) xputc(' ');
 800108e:	e002      	b.n	8001096 <xvprintf+0x1e2>
 8001090:	2020      	movs	r0, #32
 8001092:	f7ff fed3 	bl	8000e3c <xputc>
 8001096:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001098:	1c5a      	adds	r2, r3, #1
 800109a:	647a      	str	r2, [r7, #68]	; 0x44
 800109c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800109e:	429a      	cmp	r2, r3
 80010a0:	d8f6      	bhi.n	8001090 <xvprintf+0x1dc>
			continue;
 80010a2:	e0b9      	b.n	8001218 <xvprintf+0x364>
		case 'C' :					/* Character */
			xputc((char)va_arg(arp, int)); continue;
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	1d1a      	adds	r2, r3, #4
 80010a8:	603a      	str	r2, [r7, #0]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff fec4 	bl	8000e3c <xputc>
 80010b4:	e0b0      	b.n	8001218 <xvprintf+0x364>
		case 'B' :					/* Binary */
			r = 2; break;
 80010b6:	2302      	movs	r3, #2
 80010b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80010ba:	e00e      	b.n	80010da <xvprintf+0x226>
		case 'O' :					/* Octal */
			r = 8; break;
 80010bc:	2308      	movs	r3, #8
 80010be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80010c0:	e00b      	b.n	80010da <xvprintf+0x226>
		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 80010c2:	230a      	movs	r3, #10
 80010c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80010c6:	e008      	b.n	80010da <xvprintf+0x226>
		case 'X' :					/* Hexdecimal */
			r = 16; break;
 80010c8:	2310      	movs	r3, #16
 80010ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80010cc:	e005      	b.n	80010da <xvprintf+0x226>
		default:					/* Unknown type (passthrough) */
			xputc(c); continue;
 80010ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff feb2 	bl	8000e3c <xputc>
 80010d8:	e09e      	b.n	8001218 <xvprintf+0x364>
			} else {		/* int/short/char argument */
				v = (d == 'D') ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int);
			}
		}
#else
		if (f & 4) {	/* long argument? */
 80010da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010dc:	f003 0304 	and.w	r3, r3, #4
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d005      	beq.n	80010f0 <xvprintf+0x23c>
			v = va_arg(arp, long);
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	1d1a      	adds	r2, r3, #4
 80010e8:	603a      	str	r2, [r7, #0]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	633b      	str	r3, [r7, #48]	; 0x30
 80010ee:	e00d      	b.n	800110c <xvprintf+0x258>
		} else {		/* int/short/char argument */
			v = (d == 'D') ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int);
 80010f0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80010f4:	2b44      	cmp	r3, #68	; 0x44
 80010f6:	d104      	bne.n	8001102 <xvprintf+0x24e>
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	1d1a      	adds	r2, r3, #4
 80010fc:	603a      	str	r2, [r7, #0]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	e003      	b.n	800110a <xvprintf+0x256>
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	1d1a      	adds	r2, r3, #4
 8001106:	603a      	str	r2, [r7, #0]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	633b      	str	r3, [r7, #48]	; 0x30
		}
#endif
		if (d == 'D' && v < 0) {	/* Negative value? */
 800110c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001110:	2b44      	cmp	r3, #68	; 0x44
 8001112:	d109      	bne.n	8001128 <xvprintf+0x274>
 8001114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001116:	2b00      	cmp	r3, #0
 8001118:	da06      	bge.n	8001128 <xvprintf+0x274>
			v = 0 - v; f |= 16;
 800111a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800111c:	425b      	negs	r3, r3
 800111e:	633b      	str	r3, [r7, #48]	; 0x30
 8001120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001122:	f043 0310 	orr.w	r3, r3, #16
 8001126:	63fb      	str	r3, [r7, #60]	; 0x3c
		}
		i = 0; vs = v;
 8001128:	2300      	movs	r3, #0
 800112a:	64bb      	str	r3, [r7, #72]	; 0x48
 800112c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800112e:	62fb      	str	r3, [r7, #44]	; 0x2c
		do {
			d = (char)(vs % r); vs /= r;
 8001130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001132:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001134:	fbb3 f2f2 	udiv	r2, r3, r2
 8001138:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800113a:	fb01 f202 	mul.w	r2, r1, r2
 800113e:	1a9b      	subs	r3, r3, r2
 8001140:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001144:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001146:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001148:	fbb2 f3f3 	udiv	r3, r2, r3
 800114c:	62fb      	str	r3, [r7, #44]	; 0x2c
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 800114e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001152:	2b09      	cmp	r3, #9
 8001154:	d90b      	bls.n	800116e <xvprintf+0x2ba>
 8001156:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800115a:	2b78      	cmp	r3, #120	; 0x78
 800115c:	d101      	bne.n	8001162 <xvprintf+0x2ae>
 800115e:	2227      	movs	r2, #39	; 0x27
 8001160:	e000      	b.n	8001164 <xvprintf+0x2b0>
 8001162:	2207      	movs	r2, #7
 8001164:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001168:	4413      	add	r3, r2
 800116a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			s[i++] = d + '0';
 800116e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001170:	1c5a      	adds	r2, r3, #1
 8001172:	64ba      	str	r2, [r7, #72]	; 0x48
 8001174:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8001178:	3230      	adds	r2, #48	; 0x30
 800117a:	b2d2      	uxtb	r2, r2
 800117c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001180:	440b      	add	r3, r1
 8001182:	f803 2c48 	strb.w	r2, [r3, #-72]
		} while (vs != 0 && i < sizeof s);
 8001186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001188:	2b00      	cmp	r3, #0
 800118a:	d002      	beq.n	8001192 <xvprintf+0x2de>
 800118c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800118e:	2b1f      	cmp	r3, #31
 8001190:	d9ce      	bls.n	8001130 <xvprintf+0x27c>
		if (f & 16) s[i++] = '-';
 8001192:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001194:	f003 0310 	and.w	r3, r3, #16
 8001198:	2b00      	cmp	r3, #0
 800119a:	d008      	beq.n	80011ae <xvprintf+0x2fa>
 800119c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800119e:	1c5a      	adds	r2, r3, #1
 80011a0:	64ba      	str	r2, [r7, #72]	; 0x48
 80011a2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80011a6:	4413      	add	r3, r2
 80011a8:	222d      	movs	r2, #45	; 0x2d
 80011aa:	f803 2c48 	strb.w	r2, [r3, #-72]
		j = i; d = (f & 1) ? '0' : ' ';
 80011ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80011b0:	647b      	str	r3, [r7, #68]	; 0x44
 80011b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011b4:	f003 0301 	and.w	r3, r3, #1
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <xvprintf+0x30c>
 80011bc:	2330      	movs	r3, #48	; 0x30
 80011be:	e000      	b.n	80011c2 <xvprintf+0x30e>
 80011c0:	2320      	movs	r3, #32
 80011c2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		while (!(f & 2) && j++ < w) xputc(d);
 80011c6:	e004      	b.n	80011d2 <xvprintf+0x31e>
 80011c8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff fe35 	bl	8000e3c <xputc>
 80011d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011d4:	f003 0302 	and.w	r3, r3, #2
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d105      	bne.n	80011e8 <xvprintf+0x334>
 80011dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011de:	1c5a      	adds	r2, r3, #1
 80011e0:	647a      	str	r2, [r7, #68]	; 0x44
 80011e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d8ef      	bhi.n	80011c8 <xvprintf+0x314>
		do xputc(s[--i]); while (i != 0);
 80011e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80011ea:	3b01      	subs	r3, #1
 80011ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80011ee:	f107 0208 	add.w	r2, r7, #8
 80011f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80011f4:	4413      	add	r3, r2
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff fe1f 	bl	8000e3c <xputc>
 80011fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001200:	2b00      	cmp	r3, #0
 8001202:	d1f1      	bne.n	80011e8 <xvprintf+0x334>
		while (j++ < w) xputc(' ');
 8001204:	e002      	b.n	800120c <xvprintf+0x358>
 8001206:	2020      	movs	r0, #32
 8001208:	f7ff fe18 	bl	8000e3c <xputc>
 800120c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800120e:	1c5a      	adds	r2, r3, #1
 8001210:	647a      	str	r2, [r7, #68]	; 0x44
 8001212:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001214:	429a      	cmp	r2, r3
 8001216:	d8f6      	bhi.n	8001206 <xvprintf+0x352>
		c = *fmt++;					/* Get a format character */
 8001218:	e651      	b.n	8000ebe <xvprintf+0xa>
		if (!c) break;				/* End of format? */
 800121a:	bf00      	nop
 800121c:	e000      	b.n	8001220 <xvprintf+0x36c>
		if (!c) break;				/* End of format? */
 800121e:	bf00      	nop
	}
}
 8001220:	bf00      	nop
 8001222:	3750      	adds	r7, #80	; 0x50
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}

08001228 <xprintf>:

void xprintf (			/* Put a formatted string to the default device */
	const char*	fmt,	/* Pointer to the format string */
	...					/* Optional arguments */
)
{
 8001228:	b40f      	push	{r0, r1, r2, r3}
 800122a:	b580      	push	{r7, lr}
 800122c:	b082      	sub	sp, #8
 800122e:	af00      	add	r7, sp, #0
	va_list arp;


	va_start(arp, fmt);
 8001230:	f107 0314 	add.w	r3, r7, #20
 8001234:	607b      	str	r3, [r7, #4]
	xvprintf(fmt, arp);
 8001236:	6879      	ldr	r1, [r7, #4]
 8001238:	6938      	ldr	r0, [r7, #16]
 800123a:	f7ff fe3b 	bl	8000eb4 <xvprintf>
	va_end(arp);
}
 800123e:	bf00      	nop
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001248:	b004      	add	sp, #16
 800124a:	4770      	bx	lr

0800124c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800124c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001284 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001250:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001252:	e003      	b.n	800125c <LoopCopyDataInit>

08001254 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001254:	4b0c      	ldr	r3, [pc, #48]	; (8001288 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001256:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001258:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800125a:	3104      	adds	r1, #4

0800125c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800125c:	480b      	ldr	r0, [pc, #44]	; (800128c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800125e:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001260:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001262:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001264:	d3f6      	bcc.n	8001254 <CopyDataInit>
  ldr  r2, =_sbss
 8001266:	4a0b      	ldr	r2, [pc, #44]	; (8001294 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001268:	e002      	b.n	8001270 <LoopFillZerobss>

0800126a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800126a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800126c:	f842 3b04 	str.w	r3, [r2], #4

08001270 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001270:	4b09      	ldr	r3, [pc, #36]	; (8001298 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001272:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001274:	d3f9      	bcc.n	800126a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001276:	f7ff fdcb 	bl	8000e10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800127a:	f001 fdf1 	bl	8002e60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800127e:	f7ff f93f 	bl	8000500 <main>
  bx  lr    
 8001282:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001284:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8001288:	08002f0c 	.word	0x08002f0c
  ldr  r0, =_sdata
 800128c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001290:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001294:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001298:	20000238 	.word	0x20000238

0800129c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800129c:	e7fe      	b.n	800129c <ADC_IRQHandler>
	...

080012a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012a4:	4b0e      	ldr	r3, [pc, #56]	; (80012e0 <HAL_Init+0x40>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a0d      	ldr	r2, [pc, #52]	; (80012e0 <HAL_Init+0x40>)
 80012aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012b0:	4b0b      	ldr	r3, [pc, #44]	; (80012e0 <HAL_Init+0x40>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a0a      	ldr	r2, [pc, #40]	; (80012e0 <HAL_Init+0x40>)
 80012b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012bc:	4b08      	ldr	r3, [pc, #32]	; (80012e0 <HAL_Init+0x40>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a07      	ldr	r2, [pc, #28]	; (80012e0 <HAL_Init+0x40>)
 80012c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012c8:	2003      	movs	r0, #3
 80012ca:	f000 f90d 	bl	80014e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012ce:	2000      	movs	r0, #0
 80012d0:	f000 f808 	bl	80012e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012d4:	f7ff fc1a 	bl	8000b0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012d8:	2300      	movs	r3, #0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40023c00 	.word	0x40023c00

080012e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012ec:	4b12      	ldr	r3, [pc, #72]	; (8001338 <HAL_InitTick+0x54>)
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	4b12      	ldr	r3, [pc, #72]	; (800133c <HAL_InitTick+0x58>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	4619      	mov	r1, r3
 80012f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80012fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001302:	4618      	mov	r0, r3
 8001304:	f000 f917 	bl	8001536 <HAL_SYSTICK_Config>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e00e      	b.n	8001330 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2b0f      	cmp	r3, #15
 8001316:	d80a      	bhi.n	800132e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001318:	2200      	movs	r2, #0
 800131a:	6879      	ldr	r1, [r7, #4]
 800131c:	f04f 30ff 	mov.w	r0, #4294967295
 8001320:	f000 f8ed 	bl	80014fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001324:	4a06      	ldr	r2, [pc, #24]	; (8001340 <HAL_InitTick+0x5c>)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800132a:	2300      	movs	r3, #0
 800132c:	e000      	b.n	8001330 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
}
 8001330:	4618      	mov	r0, r3
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	20000000 	.word	0x20000000
 800133c:	20000008 	.word	0x20000008
 8001340:	20000004 	.word	0x20000004

08001344 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001348:	4b06      	ldr	r3, [pc, #24]	; (8001364 <HAL_IncTick+0x20>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	461a      	mov	r2, r3
 800134e:	4b06      	ldr	r3, [pc, #24]	; (8001368 <HAL_IncTick+0x24>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4413      	add	r3, r2
 8001354:	4a04      	ldr	r2, [pc, #16]	; (8001368 <HAL_IncTick+0x24>)
 8001356:	6013      	str	r3, [r2, #0]
}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	20000008 	.word	0x20000008
 8001368:	20000234 	.word	0x20000234

0800136c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  return uwTick;
 8001370:	4b03      	ldr	r3, [pc, #12]	; (8001380 <HAL_GetTick+0x14>)
 8001372:	681b      	ldr	r3, [r3, #0]
}
 8001374:	4618      	mov	r0, r3
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	20000234 	.word	0x20000234

08001384 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001384:	b480      	push	{r7}
 8001386:	b085      	sub	sp, #20
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f003 0307 	and.w	r3, r3, #7
 8001392:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001394:	4b0c      	ldr	r3, [pc, #48]	; (80013c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800139a:	68ba      	ldr	r2, [r7, #8]
 800139c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013a0:	4013      	ands	r3, r2
 80013a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013b6:	4a04      	ldr	r2, [pc, #16]	; (80013c8 <__NVIC_SetPriorityGrouping+0x44>)
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	60d3      	str	r3, [r2, #12]
}
 80013bc:	bf00      	nop
 80013be:	3714      	adds	r7, #20
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	e000ed00 	.word	0xe000ed00

080013cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013d0:	4b04      	ldr	r3, [pc, #16]	; (80013e4 <__NVIC_GetPriorityGrouping+0x18>)
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	0a1b      	lsrs	r3, r3, #8
 80013d6:	f003 0307 	and.w	r3, r3, #7
}
 80013da:	4618      	mov	r0, r3
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	e000ed00 	.word	0xe000ed00

080013e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	6039      	str	r1, [r7, #0]
 80013f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	db0a      	blt.n	8001412 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	b2da      	uxtb	r2, r3
 8001400:	490c      	ldr	r1, [pc, #48]	; (8001434 <__NVIC_SetPriority+0x4c>)
 8001402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001406:	0112      	lsls	r2, r2, #4
 8001408:	b2d2      	uxtb	r2, r2
 800140a:	440b      	add	r3, r1
 800140c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001410:	e00a      	b.n	8001428 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	b2da      	uxtb	r2, r3
 8001416:	4908      	ldr	r1, [pc, #32]	; (8001438 <__NVIC_SetPriority+0x50>)
 8001418:	79fb      	ldrb	r3, [r7, #7]
 800141a:	f003 030f 	and.w	r3, r3, #15
 800141e:	3b04      	subs	r3, #4
 8001420:	0112      	lsls	r2, r2, #4
 8001422:	b2d2      	uxtb	r2, r2
 8001424:	440b      	add	r3, r1
 8001426:	761a      	strb	r2, [r3, #24]
}
 8001428:	bf00      	nop
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr
 8001434:	e000e100 	.word	0xe000e100
 8001438:	e000ed00 	.word	0xe000ed00

0800143c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800143c:	b480      	push	{r7}
 800143e:	b089      	sub	sp, #36	; 0x24
 8001440:	af00      	add	r7, sp, #0
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	60b9      	str	r1, [r7, #8]
 8001446:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	f003 0307 	and.w	r3, r3, #7
 800144e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	f1c3 0307 	rsb	r3, r3, #7
 8001456:	2b04      	cmp	r3, #4
 8001458:	bf28      	it	cs
 800145a:	2304      	movcs	r3, #4
 800145c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	3304      	adds	r3, #4
 8001462:	2b06      	cmp	r3, #6
 8001464:	d902      	bls.n	800146c <NVIC_EncodePriority+0x30>
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	3b03      	subs	r3, #3
 800146a:	e000      	b.n	800146e <NVIC_EncodePriority+0x32>
 800146c:	2300      	movs	r3, #0
 800146e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001470:	f04f 32ff 	mov.w	r2, #4294967295
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	43da      	mvns	r2, r3
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	401a      	ands	r2, r3
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001484:	f04f 31ff 	mov.w	r1, #4294967295
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	fa01 f303 	lsl.w	r3, r1, r3
 800148e:	43d9      	mvns	r1, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001494:	4313      	orrs	r3, r2
         );
}
 8001496:	4618      	mov	r0, r3
 8001498:	3724      	adds	r7, #36	; 0x24
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
	...

080014a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	3b01      	subs	r3, #1
 80014b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014b4:	d301      	bcc.n	80014ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014b6:	2301      	movs	r3, #1
 80014b8:	e00f      	b.n	80014da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014ba:	4a0a      	ldr	r2, [pc, #40]	; (80014e4 <SysTick_Config+0x40>)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	3b01      	subs	r3, #1
 80014c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014c2:	210f      	movs	r1, #15
 80014c4:	f04f 30ff 	mov.w	r0, #4294967295
 80014c8:	f7ff ff8e 	bl	80013e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014cc:	4b05      	ldr	r3, [pc, #20]	; (80014e4 <SysTick_Config+0x40>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014d2:	4b04      	ldr	r3, [pc, #16]	; (80014e4 <SysTick_Config+0x40>)
 80014d4:	2207      	movs	r2, #7
 80014d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	e000e010 	.word	0xe000e010

080014e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f7ff ff47 	bl	8001384 <__NVIC_SetPriorityGrouping>
}
 80014f6:	bf00      	nop
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014fe:	b580      	push	{r7, lr}
 8001500:	b086      	sub	sp, #24
 8001502:	af00      	add	r7, sp, #0
 8001504:	4603      	mov	r3, r0
 8001506:	60b9      	str	r1, [r7, #8]
 8001508:	607a      	str	r2, [r7, #4]
 800150a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800150c:	2300      	movs	r3, #0
 800150e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001510:	f7ff ff5c 	bl	80013cc <__NVIC_GetPriorityGrouping>
 8001514:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	68b9      	ldr	r1, [r7, #8]
 800151a:	6978      	ldr	r0, [r7, #20]
 800151c:	f7ff ff8e 	bl	800143c <NVIC_EncodePriority>
 8001520:	4602      	mov	r2, r0
 8001522:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001526:	4611      	mov	r1, r2
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff ff5d 	bl	80013e8 <__NVIC_SetPriority>
}
 800152e:	bf00      	nop
 8001530:	3718      	adds	r7, #24
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	b082      	sub	sp, #8
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f7ff ffb0 	bl	80014a4 <SysTick_Config>
 8001544:	4603      	mov	r3, r0
}
 8001546:	4618      	mov	r0, r3
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
	...

08001550 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001550:	b480      	push	{r7}
 8001552:	b089      	sub	sp, #36	; 0x24
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800155a:	2300      	movs	r3, #0
 800155c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800155e:	2300      	movs	r3, #0
 8001560:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001562:	2300      	movs	r3, #0
 8001564:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001566:	2300      	movs	r3, #0
 8001568:	61fb      	str	r3, [r7, #28]
 800156a:	e159      	b.n	8001820 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800156c:	2201      	movs	r2, #1
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	697a      	ldr	r2, [r7, #20]
 800157c:	4013      	ands	r3, r2
 800157e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001580:	693a      	ldr	r2, [r7, #16]
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	429a      	cmp	r2, r3
 8001586:	f040 8148 	bne.w	800181a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	2b01      	cmp	r3, #1
 8001590:	d00b      	beq.n	80015aa <HAL_GPIO_Init+0x5a>
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	2b02      	cmp	r3, #2
 8001598:	d007      	beq.n	80015aa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800159e:	2b11      	cmp	r3, #17
 80015a0:	d003      	beq.n	80015aa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	2b12      	cmp	r3, #18
 80015a8:	d130      	bne.n	800160c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	2203      	movs	r2, #3
 80015b6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ba:	43db      	mvns	r3, r3
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	4013      	ands	r3, r2
 80015c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	68da      	ldr	r2, [r3, #12]
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	69ba      	ldr	r2, [r7, #24]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	69ba      	ldr	r2, [r7, #24]
 80015d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015e0:	2201      	movs	r2, #1
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	43db      	mvns	r3, r3
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	4013      	ands	r3, r2
 80015ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	091b      	lsrs	r3, r3, #4
 80015f6:	f003 0201 	and.w	r2, r3, #1
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	4313      	orrs	r3, r2
 8001604:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	2203      	movs	r2, #3
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	43db      	mvns	r3, r3
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	4013      	ands	r3, r2
 8001622:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	689a      	ldr	r2, [r3, #8]
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	fa02 f303 	lsl.w	r3, r2, r3
 8001630:	69ba      	ldr	r2, [r7, #24]
 8001632:	4313      	orrs	r3, r2
 8001634:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	2b02      	cmp	r3, #2
 8001642:	d003      	beq.n	800164c <HAL_GPIO_Init+0xfc>
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	2b12      	cmp	r3, #18
 800164a:	d123      	bne.n	8001694 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	08da      	lsrs	r2, r3, #3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	3208      	adds	r2, #8
 8001654:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001658:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	f003 0307 	and.w	r3, r3, #7
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	220f      	movs	r2, #15
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	43db      	mvns	r3, r3
 800166a:	69ba      	ldr	r2, [r7, #24]
 800166c:	4013      	ands	r3, r2
 800166e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	691a      	ldr	r2, [r3, #16]
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	f003 0307 	and.w	r3, r3, #7
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	4313      	orrs	r3, r2
 8001684:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	08da      	lsrs	r2, r3, #3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	3208      	adds	r2, #8
 800168e:	69b9      	ldr	r1, [r7, #24]
 8001690:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	2203      	movs	r2, #3
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	43db      	mvns	r3, r3
 80016a6:	69ba      	ldr	r2, [r7, #24]
 80016a8:	4013      	ands	r3, r2
 80016aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f003 0203 	and.w	r2, r3, #3
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	4313      	orrs	r3, r2
 80016c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	f000 80a2 	beq.w	800181a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	60fb      	str	r3, [r7, #12]
 80016da:	4b56      	ldr	r3, [pc, #344]	; (8001834 <HAL_GPIO_Init+0x2e4>)
 80016dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016de:	4a55      	ldr	r2, [pc, #340]	; (8001834 <HAL_GPIO_Init+0x2e4>)
 80016e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016e4:	6453      	str	r3, [r2, #68]	; 0x44
 80016e6:	4b53      	ldr	r3, [pc, #332]	; (8001834 <HAL_GPIO_Init+0x2e4>)
 80016e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016f2:	4a51      	ldr	r2, [pc, #324]	; (8001838 <HAL_GPIO_Init+0x2e8>)
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	089b      	lsrs	r3, r3, #2
 80016f8:	3302      	adds	r3, #2
 80016fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	f003 0303 	and.w	r3, r3, #3
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	220f      	movs	r2, #15
 800170a:	fa02 f303 	lsl.w	r3, r2, r3
 800170e:	43db      	mvns	r3, r3
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	4013      	ands	r3, r2
 8001714:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4a48      	ldr	r2, [pc, #288]	; (800183c <HAL_GPIO_Init+0x2ec>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d019      	beq.n	8001752 <HAL_GPIO_Init+0x202>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4a47      	ldr	r2, [pc, #284]	; (8001840 <HAL_GPIO_Init+0x2f0>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d013      	beq.n	800174e <HAL_GPIO_Init+0x1fe>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4a46      	ldr	r2, [pc, #280]	; (8001844 <HAL_GPIO_Init+0x2f4>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d00d      	beq.n	800174a <HAL_GPIO_Init+0x1fa>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4a45      	ldr	r2, [pc, #276]	; (8001848 <HAL_GPIO_Init+0x2f8>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d007      	beq.n	8001746 <HAL_GPIO_Init+0x1f6>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4a44      	ldr	r2, [pc, #272]	; (800184c <HAL_GPIO_Init+0x2fc>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d101      	bne.n	8001742 <HAL_GPIO_Init+0x1f2>
 800173e:	2304      	movs	r3, #4
 8001740:	e008      	b.n	8001754 <HAL_GPIO_Init+0x204>
 8001742:	2307      	movs	r3, #7
 8001744:	e006      	b.n	8001754 <HAL_GPIO_Init+0x204>
 8001746:	2303      	movs	r3, #3
 8001748:	e004      	b.n	8001754 <HAL_GPIO_Init+0x204>
 800174a:	2302      	movs	r3, #2
 800174c:	e002      	b.n	8001754 <HAL_GPIO_Init+0x204>
 800174e:	2301      	movs	r3, #1
 8001750:	e000      	b.n	8001754 <HAL_GPIO_Init+0x204>
 8001752:	2300      	movs	r3, #0
 8001754:	69fa      	ldr	r2, [r7, #28]
 8001756:	f002 0203 	and.w	r2, r2, #3
 800175a:	0092      	lsls	r2, r2, #2
 800175c:	4093      	lsls	r3, r2
 800175e:	69ba      	ldr	r2, [r7, #24]
 8001760:	4313      	orrs	r3, r2
 8001762:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001764:	4934      	ldr	r1, [pc, #208]	; (8001838 <HAL_GPIO_Init+0x2e8>)
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	089b      	lsrs	r3, r3, #2
 800176a:	3302      	adds	r3, #2
 800176c:	69ba      	ldr	r2, [r7, #24]
 800176e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001772:	4b37      	ldr	r3, [pc, #220]	; (8001850 <HAL_GPIO_Init+0x300>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	43db      	mvns	r3, r3
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	4013      	ands	r3, r2
 8001780:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d003      	beq.n	8001796 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	4313      	orrs	r3, r2
 8001794:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001796:	4a2e      	ldr	r2, [pc, #184]	; (8001850 <HAL_GPIO_Init+0x300>)
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800179c:	4b2c      	ldr	r3, [pc, #176]	; (8001850 <HAL_GPIO_Init+0x300>)
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	43db      	mvns	r3, r3
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	4013      	ands	r3, r2
 80017aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d003      	beq.n	80017c0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	4313      	orrs	r3, r2
 80017be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017c0:	4a23      	ldr	r2, [pc, #140]	; (8001850 <HAL_GPIO_Init+0x300>)
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017c6:	4b22      	ldr	r3, [pc, #136]	; (8001850 <HAL_GPIO_Init+0x300>)
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	43db      	mvns	r3, r3
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	4013      	ands	r3, r2
 80017d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d003      	beq.n	80017ea <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80017e2:	69ba      	ldr	r2, [r7, #24]
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017ea:	4a19      	ldr	r2, [pc, #100]	; (8001850 <HAL_GPIO_Init+0x300>)
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017f0:	4b17      	ldr	r3, [pc, #92]	; (8001850 <HAL_GPIO_Init+0x300>)
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	43db      	mvns	r3, r3
 80017fa:	69ba      	ldr	r2, [r7, #24]
 80017fc:	4013      	ands	r3, r2
 80017fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001808:	2b00      	cmp	r3, #0
 800180a:	d003      	beq.n	8001814 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	4313      	orrs	r3, r2
 8001812:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001814:	4a0e      	ldr	r2, [pc, #56]	; (8001850 <HAL_GPIO_Init+0x300>)
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	3301      	adds	r3, #1
 800181e:	61fb      	str	r3, [r7, #28]
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	2b0f      	cmp	r3, #15
 8001824:	f67f aea2 	bls.w	800156c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001828:	bf00      	nop
 800182a:	3724      	adds	r7, #36	; 0x24
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	40023800 	.word	0x40023800
 8001838:	40013800 	.word	0x40013800
 800183c:	40020000 	.word	0x40020000
 8001840:	40020400 	.word	0x40020400
 8001844:	40020800 	.word	0x40020800
 8001848:	40020c00 	.word	0x40020c00
 800184c:	40021000 	.word	0x40021000
 8001850:	40013c00 	.word	0x40013c00

08001854 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	460b      	mov	r3, r1
 800185e:	807b      	strh	r3, [r7, #2]
 8001860:	4613      	mov	r3, r2
 8001862:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001864:	787b      	ldrb	r3, [r7, #1]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d003      	beq.n	8001872 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800186a:	887a      	ldrh	r2, [r7, #2]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001870:	e003      	b.n	800187a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001872:	887b      	ldrh	r3, [r7, #2]
 8001874:	041a      	lsls	r2, r3, #16
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	619a      	str	r2, [r3, #24]
}
 800187a:	bf00      	nop
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
	...

08001888 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d101      	bne.n	800189a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e25b      	b.n	8001d52 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d075      	beq.n	8001992 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018a6:	4ba3      	ldr	r3, [pc, #652]	; (8001b34 <HAL_RCC_OscConfig+0x2ac>)
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f003 030c 	and.w	r3, r3, #12
 80018ae:	2b04      	cmp	r3, #4
 80018b0:	d00c      	beq.n	80018cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018b2:	4ba0      	ldr	r3, [pc, #640]	; (8001b34 <HAL_RCC_OscConfig+0x2ac>)
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018ba:	2b08      	cmp	r3, #8
 80018bc:	d112      	bne.n	80018e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018be:	4b9d      	ldr	r3, [pc, #628]	; (8001b34 <HAL_RCC_OscConfig+0x2ac>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018ca:	d10b      	bne.n	80018e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018cc:	4b99      	ldr	r3, [pc, #612]	; (8001b34 <HAL_RCC_OscConfig+0x2ac>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d05b      	beq.n	8001990 <HAL_RCC_OscConfig+0x108>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d157      	bne.n	8001990 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e236      	b.n	8001d52 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018ec:	d106      	bne.n	80018fc <HAL_RCC_OscConfig+0x74>
 80018ee:	4b91      	ldr	r3, [pc, #580]	; (8001b34 <HAL_RCC_OscConfig+0x2ac>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a90      	ldr	r2, [pc, #576]	; (8001b34 <HAL_RCC_OscConfig+0x2ac>)
 80018f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018f8:	6013      	str	r3, [r2, #0]
 80018fa:	e01d      	b.n	8001938 <HAL_RCC_OscConfig+0xb0>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001904:	d10c      	bne.n	8001920 <HAL_RCC_OscConfig+0x98>
 8001906:	4b8b      	ldr	r3, [pc, #556]	; (8001b34 <HAL_RCC_OscConfig+0x2ac>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a8a      	ldr	r2, [pc, #552]	; (8001b34 <HAL_RCC_OscConfig+0x2ac>)
 800190c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001910:	6013      	str	r3, [r2, #0]
 8001912:	4b88      	ldr	r3, [pc, #544]	; (8001b34 <HAL_RCC_OscConfig+0x2ac>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a87      	ldr	r2, [pc, #540]	; (8001b34 <HAL_RCC_OscConfig+0x2ac>)
 8001918:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800191c:	6013      	str	r3, [r2, #0]
 800191e:	e00b      	b.n	8001938 <HAL_RCC_OscConfig+0xb0>
 8001920:	4b84      	ldr	r3, [pc, #528]	; (8001b34 <HAL_RCC_OscConfig+0x2ac>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a83      	ldr	r2, [pc, #524]	; (8001b34 <HAL_RCC_OscConfig+0x2ac>)
 8001926:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800192a:	6013      	str	r3, [r2, #0]
 800192c:	4b81      	ldr	r3, [pc, #516]	; (8001b34 <HAL_RCC_OscConfig+0x2ac>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a80      	ldr	r2, [pc, #512]	; (8001b34 <HAL_RCC_OscConfig+0x2ac>)
 8001932:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001936:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d013      	beq.n	8001968 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001940:	f7ff fd14 	bl	800136c <HAL_GetTick>
 8001944:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001946:	e008      	b.n	800195a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001948:	f7ff fd10 	bl	800136c <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b64      	cmp	r3, #100	; 0x64
 8001954:	d901      	bls.n	800195a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e1fb      	b.n	8001d52 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800195a:	4b76      	ldr	r3, [pc, #472]	; (8001b34 <HAL_RCC_OscConfig+0x2ac>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d0f0      	beq.n	8001948 <HAL_RCC_OscConfig+0xc0>
 8001966:	e014      	b.n	8001992 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001968:	f7ff fd00 	bl	800136c <HAL_GetTick>
 800196c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800196e:	e008      	b.n	8001982 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001970:	f7ff fcfc 	bl	800136c <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	2b64      	cmp	r3, #100	; 0x64
 800197c:	d901      	bls.n	8001982 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e1e7      	b.n	8001d52 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001982:	4b6c      	ldr	r3, [pc, #432]	; (8001b34 <HAL_RCC_OscConfig+0x2ac>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d1f0      	bne.n	8001970 <HAL_RCC_OscConfig+0xe8>
 800198e:	e000      	b.n	8001992 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001990:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	2b00      	cmp	r3, #0
 800199c:	d063      	beq.n	8001a66 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800199e:	4b65      	ldr	r3, [pc, #404]	; (8001b34 <HAL_RCC_OscConfig+0x2ac>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f003 030c 	and.w	r3, r3, #12
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d00b      	beq.n	80019c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019aa:	4b62      	ldr	r3, [pc, #392]	; (8001b34 <HAL_RCC_OscConfig+0x2ac>)
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019b2:	2b08      	cmp	r3, #8
 80019b4:	d11c      	bne.n	80019f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019b6:	4b5f      	ldr	r3, [pc, #380]	; (8001b34 <HAL_RCC_OscConfig+0x2ac>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d116      	bne.n	80019f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019c2:	4b5c      	ldr	r3, [pc, #368]	; (8001b34 <HAL_RCC_OscConfig+0x2ac>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d005      	beq.n	80019da <HAL_RCC_OscConfig+0x152>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	68db      	ldr	r3, [r3, #12]
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d001      	beq.n	80019da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e1bb      	b.n	8001d52 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019da:	4b56      	ldr	r3, [pc, #344]	; (8001b34 <HAL_RCC_OscConfig+0x2ac>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	691b      	ldr	r3, [r3, #16]
 80019e6:	00db      	lsls	r3, r3, #3
 80019e8:	4952      	ldr	r1, [pc, #328]	; (8001b34 <HAL_RCC_OscConfig+0x2ac>)
 80019ea:	4313      	orrs	r3, r2
 80019ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ee:	e03a      	b.n	8001a66 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d020      	beq.n	8001a3a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019f8:	4b4f      	ldr	r3, [pc, #316]	; (8001b38 <HAL_RCC_OscConfig+0x2b0>)
 80019fa:	2201      	movs	r2, #1
 80019fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019fe:	f7ff fcb5 	bl	800136c <HAL_GetTick>
 8001a02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a04:	e008      	b.n	8001a18 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a06:	f7ff fcb1 	bl	800136c <HAL_GetTick>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d901      	bls.n	8001a18 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a14:	2303      	movs	r3, #3
 8001a16:	e19c      	b.n	8001d52 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a18:	4b46      	ldr	r3, [pc, #280]	; (8001b34 <HAL_RCC_OscConfig+0x2ac>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0302 	and.w	r3, r3, #2
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d0f0      	beq.n	8001a06 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a24:	4b43      	ldr	r3, [pc, #268]	; (8001b34 <HAL_RCC_OscConfig+0x2ac>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	691b      	ldr	r3, [r3, #16]
 8001a30:	00db      	lsls	r3, r3, #3
 8001a32:	4940      	ldr	r1, [pc, #256]	; (8001b34 <HAL_RCC_OscConfig+0x2ac>)
 8001a34:	4313      	orrs	r3, r2
 8001a36:	600b      	str	r3, [r1, #0]
 8001a38:	e015      	b.n	8001a66 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a3a:	4b3f      	ldr	r3, [pc, #252]	; (8001b38 <HAL_RCC_OscConfig+0x2b0>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a40:	f7ff fc94 	bl	800136c <HAL_GetTick>
 8001a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a46:	e008      	b.n	8001a5a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a48:	f7ff fc90 	bl	800136c <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d901      	bls.n	8001a5a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e17b      	b.n	8001d52 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a5a:	4b36      	ldr	r3, [pc, #216]	; (8001b34 <HAL_RCC_OscConfig+0x2ac>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0302 	and.w	r3, r3, #2
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d1f0      	bne.n	8001a48 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0308 	and.w	r3, r3, #8
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d030      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	695b      	ldr	r3, [r3, #20]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d016      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a7a:	4b30      	ldr	r3, [pc, #192]	; (8001b3c <HAL_RCC_OscConfig+0x2b4>)
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a80:	f7ff fc74 	bl	800136c <HAL_GetTick>
 8001a84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a86:	e008      	b.n	8001a9a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a88:	f7ff fc70 	bl	800136c <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d901      	bls.n	8001a9a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e15b      	b.n	8001d52 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a9a:	4b26      	ldr	r3, [pc, #152]	; (8001b34 <HAL_RCC_OscConfig+0x2ac>)
 8001a9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d0f0      	beq.n	8001a88 <HAL_RCC_OscConfig+0x200>
 8001aa6:	e015      	b.n	8001ad4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001aa8:	4b24      	ldr	r3, [pc, #144]	; (8001b3c <HAL_RCC_OscConfig+0x2b4>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aae:	f7ff fc5d 	bl	800136c <HAL_GetTick>
 8001ab2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ab4:	e008      	b.n	8001ac8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ab6:	f7ff fc59 	bl	800136c <HAL_GetTick>
 8001aba:	4602      	mov	r2, r0
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d901      	bls.n	8001ac8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e144      	b.n	8001d52 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ac8:	4b1a      	ldr	r3, [pc, #104]	; (8001b34 <HAL_RCC_OscConfig+0x2ac>)
 8001aca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001acc:	f003 0302 	and.w	r3, r3, #2
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d1f0      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0304 	and.w	r3, r3, #4
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	f000 80a0 	beq.w	8001c22 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ae6:	4b13      	ldr	r3, [pc, #76]	; (8001b34 <HAL_RCC_OscConfig+0x2ac>)
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d10f      	bne.n	8001b12 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	60bb      	str	r3, [r7, #8]
 8001af6:	4b0f      	ldr	r3, [pc, #60]	; (8001b34 <HAL_RCC_OscConfig+0x2ac>)
 8001af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afa:	4a0e      	ldr	r2, [pc, #56]	; (8001b34 <HAL_RCC_OscConfig+0x2ac>)
 8001afc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b00:	6413      	str	r3, [r2, #64]	; 0x40
 8001b02:	4b0c      	ldr	r3, [pc, #48]	; (8001b34 <HAL_RCC_OscConfig+0x2ac>)
 8001b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b0a:	60bb      	str	r3, [r7, #8]
 8001b0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b12:	4b0b      	ldr	r3, [pc, #44]	; (8001b40 <HAL_RCC_OscConfig+0x2b8>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d121      	bne.n	8001b62 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b1e:	4b08      	ldr	r3, [pc, #32]	; (8001b40 <HAL_RCC_OscConfig+0x2b8>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a07      	ldr	r2, [pc, #28]	; (8001b40 <HAL_RCC_OscConfig+0x2b8>)
 8001b24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b2a:	f7ff fc1f 	bl	800136c <HAL_GetTick>
 8001b2e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b30:	e011      	b.n	8001b56 <HAL_RCC_OscConfig+0x2ce>
 8001b32:	bf00      	nop
 8001b34:	40023800 	.word	0x40023800
 8001b38:	42470000 	.word	0x42470000
 8001b3c:	42470e80 	.word	0x42470e80
 8001b40:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b44:	f7ff fc12 	bl	800136c <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e0fd      	b.n	8001d52 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b56:	4b81      	ldr	r3, [pc, #516]	; (8001d5c <HAL_RCC_OscConfig+0x4d4>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d0f0      	beq.n	8001b44 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d106      	bne.n	8001b78 <HAL_RCC_OscConfig+0x2f0>
 8001b6a:	4b7d      	ldr	r3, [pc, #500]	; (8001d60 <HAL_RCC_OscConfig+0x4d8>)
 8001b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b6e:	4a7c      	ldr	r2, [pc, #496]	; (8001d60 <HAL_RCC_OscConfig+0x4d8>)
 8001b70:	f043 0301 	orr.w	r3, r3, #1
 8001b74:	6713      	str	r3, [r2, #112]	; 0x70
 8001b76:	e01c      	b.n	8001bb2 <HAL_RCC_OscConfig+0x32a>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	2b05      	cmp	r3, #5
 8001b7e:	d10c      	bne.n	8001b9a <HAL_RCC_OscConfig+0x312>
 8001b80:	4b77      	ldr	r3, [pc, #476]	; (8001d60 <HAL_RCC_OscConfig+0x4d8>)
 8001b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b84:	4a76      	ldr	r2, [pc, #472]	; (8001d60 <HAL_RCC_OscConfig+0x4d8>)
 8001b86:	f043 0304 	orr.w	r3, r3, #4
 8001b8a:	6713      	str	r3, [r2, #112]	; 0x70
 8001b8c:	4b74      	ldr	r3, [pc, #464]	; (8001d60 <HAL_RCC_OscConfig+0x4d8>)
 8001b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b90:	4a73      	ldr	r2, [pc, #460]	; (8001d60 <HAL_RCC_OscConfig+0x4d8>)
 8001b92:	f043 0301 	orr.w	r3, r3, #1
 8001b96:	6713      	str	r3, [r2, #112]	; 0x70
 8001b98:	e00b      	b.n	8001bb2 <HAL_RCC_OscConfig+0x32a>
 8001b9a:	4b71      	ldr	r3, [pc, #452]	; (8001d60 <HAL_RCC_OscConfig+0x4d8>)
 8001b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b9e:	4a70      	ldr	r2, [pc, #448]	; (8001d60 <HAL_RCC_OscConfig+0x4d8>)
 8001ba0:	f023 0301 	bic.w	r3, r3, #1
 8001ba4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ba6:	4b6e      	ldr	r3, [pc, #440]	; (8001d60 <HAL_RCC_OscConfig+0x4d8>)
 8001ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001baa:	4a6d      	ldr	r2, [pc, #436]	; (8001d60 <HAL_RCC_OscConfig+0x4d8>)
 8001bac:	f023 0304 	bic.w	r3, r3, #4
 8001bb0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d015      	beq.n	8001be6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bba:	f7ff fbd7 	bl	800136c <HAL_GetTick>
 8001bbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bc0:	e00a      	b.n	8001bd8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bc2:	f7ff fbd3 	bl	800136c <HAL_GetTick>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d901      	bls.n	8001bd8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	e0bc      	b.n	8001d52 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bd8:	4b61      	ldr	r3, [pc, #388]	; (8001d60 <HAL_RCC_OscConfig+0x4d8>)
 8001bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bdc:	f003 0302 	and.w	r3, r3, #2
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d0ee      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x33a>
 8001be4:	e014      	b.n	8001c10 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001be6:	f7ff fbc1 	bl	800136c <HAL_GetTick>
 8001bea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bec:	e00a      	b.n	8001c04 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bee:	f7ff fbbd 	bl	800136c <HAL_GetTick>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d901      	bls.n	8001c04 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e0a6      	b.n	8001d52 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c04:	4b56      	ldr	r3, [pc, #344]	; (8001d60 <HAL_RCC_OscConfig+0x4d8>)
 8001c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c08:	f003 0302 	and.w	r3, r3, #2
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d1ee      	bne.n	8001bee <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c10:	7dfb      	ldrb	r3, [r7, #23]
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d105      	bne.n	8001c22 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c16:	4b52      	ldr	r3, [pc, #328]	; (8001d60 <HAL_RCC_OscConfig+0x4d8>)
 8001c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1a:	4a51      	ldr	r2, [pc, #324]	; (8001d60 <HAL_RCC_OscConfig+0x4d8>)
 8001c1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c20:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	699b      	ldr	r3, [r3, #24]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	f000 8092 	beq.w	8001d50 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c2c:	4b4c      	ldr	r3, [pc, #304]	; (8001d60 <HAL_RCC_OscConfig+0x4d8>)
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	f003 030c 	and.w	r3, r3, #12
 8001c34:	2b08      	cmp	r3, #8
 8001c36:	d05c      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	699b      	ldr	r3, [r3, #24]
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d141      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c40:	4b48      	ldr	r3, [pc, #288]	; (8001d64 <HAL_RCC_OscConfig+0x4dc>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c46:	f7ff fb91 	bl	800136c <HAL_GetTick>
 8001c4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c4c:	e008      	b.n	8001c60 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c4e:	f7ff fb8d 	bl	800136c <HAL_GetTick>
 8001c52:	4602      	mov	r2, r0
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d901      	bls.n	8001c60 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	e078      	b.n	8001d52 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c60:	4b3f      	ldr	r3, [pc, #252]	; (8001d60 <HAL_RCC_OscConfig+0x4d8>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d1f0      	bne.n	8001c4e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	69da      	ldr	r2, [r3, #28]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6a1b      	ldr	r3, [r3, #32]
 8001c74:	431a      	orrs	r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7a:	019b      	lsls	r3, r3, #6
 8001c7c:	431a      	orrs	r2, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c82:	085b      	lsrs	r3, r3, #1
 8001c84:	3b01      	subs	r3, #1
 8001c86:	041b      	lsls	r3, r3, #16
 8001c88:	431a      	orrs	r2, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c8e:	061b      	lsls	r3, r3, #24
 8001c90:	4933      	ldr	r1, [pc, #204]	; (8001d60 <HAL_RCC_OscConfig+0x4d8>)
 8001c92:	4313      	orrs	r3, r2
 8001c94:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c96:	4b33      	ldr	r3, [pc, #204]	; (8001d64 <HAL_RCC_OscConfig+0x4dc>)
 8001c98:	2201      	movs	r2, #1
 8001c9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c9c:	f7ff fb66 	bl	800136c <HAL_GetTick>
 8001ca0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ca2:	e008      	b.n	8001cb6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ca4:	f7ff fb62 	bl	800136c <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e04d      	b.n	8001d52 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cb6:	4b2a      	ldr	r3, [pc, #168]	; (8001d60 <HAL_RCC_OscConfig+0x4d8>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d0f0      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x41c>
 8001cc2:	e045      	b.n	8001d50 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cc4:	4b27      	ldr	r3, [pc, #156]	; (8001d64 <HAL_RCC_OscConfig+0x4dc>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cca:	f7ff fb4f 	bl	800136c <HAL_GetTick>
 8001cce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cd0:	e008      	b.n	8001ce4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cd2:	f7ff fb4b 	bl	800136c <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d901      	bls.n	8001ce4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e036      	b.n	8001d52 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ce4:	4b1e      	ldr	r3, [pc, #120]	; (8001d60 <HAL_RCC_OscConfig+0x4d8>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d1f0      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x44a>
 8001cf0:	e02e      	b.n	8001d50 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	699b      	ldr	r3, [r3, #24]
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d101      	bne.n	8001cfe <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e029      	b.n	8001d52 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001cfe:	4b18      	ldr	r3, [pc, #96]	; (8001d60 <HAL_RCC_OscConfig+0x4d8>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	69db      	ldr	r3, [r3, #28]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d11c      	bne.n	8001d4c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d115      	bne.n	8001d4c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001d20:	68fa      	ldr	r2, [r7, #12]
 8001d22:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d26:	4013      	ands	r3, r2
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d10d      	bne.n	8001d4c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d106      	bne.n	8001d4c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d001      	beq.n	8001d50 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e000      	b.n	8001d52 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3718      	adds	r7, #24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	40007000 	.word	0x40007000
 8001d60:	40023800 	.word	0x40023800
 8001d64:	42470060 	.word	0x42470060

08001d68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d101      	bne.n	8001d7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e0cc      	b.n	8001f16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d7c:	4b68      	ldr	r3, [pc, #416]	; (8001f20 <HAL_RCC_ClockConfig+0x1b8>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 030f 	and.w	r3, r3, #15
 8001d84:	683a      	ldr	r2, [r7, #0]
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d90c      	bls.n	8001da4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d8a:	4b65      	ldr	r3, [pc, #404]	; (8001f20 <HAL_RCC_ClockConfig+0x1b8>)
 8001d8c:	683a      	ldr	r2, [r7, #0]
 8001d8e:	b2d2      	uxtb	r2, r2
 8001d90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d92:	4b63      	ldr	r3, [pc, #396]	; (8001f20 <HAL_RCC_ClockConfig+0x1b8>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 030f 	and.w	r3, r3, #15
 8001d9a:	683a      	ldr	r2, [r7, #0]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d001      	beq.n	8001da4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e0b8      	b.n	8001f16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0302 	and.w	r3, r3, #2
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d020      	beq.n	8001df2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0304 	and.w	r3, r3, #4
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d005      	beq.n	8001dc8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001dbc:	4b59      	ldr	r3, [pc, #356]	; (8001f24 <HAL_RCC_ClockConfig+0x1bc>)
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	4a58      	ldr	r2, [pc, #352]	; (8001f24 <HAL_RCC_ClockConfig+0x1bc>)
 8001dc2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001dc6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0308 	and.w	r3, r3, #8
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d005      	beq.n	8001de0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001dd4:	4b53      	ldr	r3, [pc, #332]	; (8001f24 <HAL_RCC_ClockConfig+0x1bc>)
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	4a52      	ldr	r2, [pc, #328]	; (8001f24 <HAL_RCC_ClockConfig+0x1bc>)
 8001dda:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001dde:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001de0:	4b50      	ldr	r3, [pc, #320]	; (8001f24 <HAL_RCC_ClockConfig+0x1bc>)
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	494d      	ldr	r1, [pc, #308]	; (8001f24 <HAL_RCC_ClockConfig+0x1bc>)
 8001dee:	4313      	orrs	r3, r2
 8001df0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d044      	beq.n	8001e88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d107      	bne.n	8001e16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e06:	4b47      	ldr	r3, [pc, #284]	; (8001f24 <HAL_RCC_ClockConfig+0x1bc>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d119      	bne.n	8001e46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e07f      	b.n	8001f16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d003      	beq.n	8001e26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e22:	2b03      	cmp	r3, #3
 8001e24:	d107      	bne.n	8001e36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e26:	4b3f      	ldr	r3, [pc, #252]	; (8001f24 <HAL_RCC_ClockConfig+0x1bc>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d109      	bne.n	8001e46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e06f      	b.n	8001f16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e36:	4b3b      	ldr	r3, [pc, #236]	; (8001f24 <HAL_RCC_ClockConfig+0x1bc>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d101      	bne.n	8001e46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e067      	b.n	8001f16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e46:	4b37      	ldr	r3, [pc, #220]	; (8001f24 <HAL_RCC_ClockConfig+0x1bc>)
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	f023 0203 	bic.w	r2, r3, #3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	4934      	ldr	r1, [pc, #208]	; (8001f24 <HAL_RCC_ClockConfig+0x1bc>)
 8001e54:	4313      	orrs	r3, r2
 8001e56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e58:	f7ff fa88 	bl	800136c <HAL_GetTick>
 8001e5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e5e:	e00a      	b.n	8001e76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e60:	f7ff fa84 	bl	800136c <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e04f      	b.n	8001f16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e76:	4b2b      	ldr	r3, [pc, #172]	; (8001f24 <HAL_RCC_ClockConfig+0x1bc>)
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	f003 020c 	and.w	r2, r3, #12
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d1eb      	bne.n	8001e60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e88:	4b25      	ldr	r3, [pc, #148]	; (8001f20 <HAL_RCC_ClockConfig+0x1b8>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 030f 	and.w	r3, r3, #15
 8001e90:	683a      	ldr	r2, [r7, #0]
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d20c      	bcs.n	8001eb0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e96:	4b22      	ldr	r3, [pc, #136]	; (8001f20 <HAL_RCC_ClockConfig+0x1b8>)
 8001e98:	683a      	ldr	r2, [r7, #0]
 8001e9a:	b2d2      	uxtb	r2, r2
 8001e9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e9e:	4b20      	ldr	r3, [pc, #128]	; (8001f20 <HAL_RCC_ClockConfig+0x1b8>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 030f 	and.w	r3, r3, #15
 8001ea6:	683a      	ldr	r2, [r7, #0]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d001      	beq.n	8001eb0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e032      	b.n	8001f16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0304 	and.w	r3, r3, #4
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d008      	beq.n	8001ece <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ebc:	4b19      	ldr	r3, [pc, #100]	; (8001f24 <HAL_RCC_ClockConfig+0x1bc>)
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	4916      	ldr	r1, [pc, #88]	; (8001f24 <HAL_RCC_ClockConfig+0x1bc>)
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0308 	and.w	r3, r3, #8
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d009      	beq.n	8001eee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001eda:	4b12      	ldr	r3, [pc, #72]	; (8001f24 <HAL_RCC_ClockConfig+0x1bc>)
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	490e      	ldr	r1, [pc, #56]	; (8001f24 <HAL_RCC_ClockConfig+0x1bc>)
 8001eea:	4313      	orrs	r3, r2
 8001eec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001eee:	f000 f821 	bl	8001f34 <HAL_RCC_GetSysClockFreq>
 8001ef2:	4601      	mov	r1, r0
 8001ef4:	4b0b      	ldr	r3, [pc, #44]	; (8001f24 <HAL_RCC_ClockConfig+0x1bc>)
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	091b      	lsrs	r3, r3, #4
 8001efa:	f003 030f 	and.w	r3, r3, #15
 8001efe:	4a0a      	ldr	r2, [pc, #40]	; (8001f28 <HAL_RCC_ClockConfig+0x1c0>)
 8001f00:	5cd3      	ldrb	r3, [r2, r3]
 8001f02:	fa21 f303 	lsr.w	r3, r1, r3
 8001f06:	4a09      	ldr	r2, [pc, #36]	; (8001f2c <HAL_RCC_ClockConfig+0x1c4>)
 8001f08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f0a:	4b09      	ldr	r3, [pc, #36]	; (8001f30 <HAL_RCC_ClockConfig+0x1c8>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff f9e8 	bl	80012e4 <HAL_InitTick>

  return HAL_OK;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3710      	adds	r7, #16
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	40023c00 	.word	0x40023c00
 8001f24:	40023800 	.word	0x40023800
 8001f28:	08002ee4 	.word	0x08002ee4
 8001f2c:	20000000 	.word	0x20000000
 8001f30:	20000004 	.word	0x20000004

08001f34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f36:	b085      	sub	sp, #20
 8001f38:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	607b      	str	r3, [r7, #4]
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60fb      	str	r3, [r7, #12]
 8001f42:	2300      	movs	r3, #0
 8001f44:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001f46:	2300      	movs	r3, #0
 8001f48:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f4a:	4b63      	ldr	r3, [pc, #396]	; (80020d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f003 030c 	and.w	r3, r3, #12
 8001f52:	2b04      	cmp	r3, #4
 8001f54:	d007      	beq.n	8001f66 <HAL_RCC_GetSysClockFreq+0x32>
 8001f56:	2b08      	cmp	r3, #8
 8001f58:	d008      	beq.n	8001f6c <HAL_RCC_GetSysClockFreq+0x38>
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	f040 80b4 	bne.w	80020c8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f60:	4b5e      	ldr	r3, [pc, #376]	; (80020dc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001f62:	60bb      	str	r3, [r7, #8]
       break;
 8001f64:	e0b3      	b.n	80020ce <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f66:	4b5e      	ldr	r3, [pc, #376]	; (80020e0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001f68:	60bb      	str	r3, [r7, #8]
      break;
 8001f6a:	e0b0      	b.n	80020ce <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f6c:	4b5a      	ldr	r3, [pc, #360]	; (80020d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f74:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f76:	4b58      	ldr	r3, [pc, #352]	; (80020d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d04a      	beq.n	8002018 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f82:	4b55      	ldr	r3, [pc, #340]	; (80020d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	099b      	lsrs	r3, r3, #6
 8001f88:	f04f 0400 	mov.w	r4, #0
 8001f8c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001f90:	f04f 0200 	mov.w	r2, #0
 8001f94:	ea03 0501 	and.w	r5, r3, r1
 8001f98:	ea04 0602 	and.w	r6, r4, r2
 8001f9c:	4629      	mov	r1, r5
 8001f9e:	4632      	mov	r2, r6
 8001fa0:	f04f 0300 	mov.w	r3, #0
 8001fa4:	f04f 0400 	mov.w	r4, #0
 8001fa8:	0154      	lsls	r4, r2, #5
 8001faa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001fae:	014b      	lsls	r3, r1, #5
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4622      	mov	r2, r4
 8001fb4:	1b49      	subs	r1, r1, r5
 8001fb6:	eb62 0206 	sbc.w	r2, r2, r6
 8001fba:	f04f 0300 	mov.w	r3, #0
 8001fbe:	f04f 0400 	mov.w	r4, #0
 8001fc2:	0194      	lsls	r4, r2, #6
 8001fc4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001fc8:	018b      	lsls	r3, r1, #6
 8001fca:	1a5b      	subs	r3, r3, r1
 8001fcc:	eb64 0402 	sbc.w	r4, r4, r2
 8001fd0:	f04f 0100 	mov.w	r1, #0
 8001fd4:	f04f 0200 	mov.w	r2, #0
 8001fd8:	00e2      	lsls	r2, r4, #3
 8001fda:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001fde:	00d9      	lsls	r1, r3, #3
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	4614      	mov	r4, r2
 8001fe4:	195b      	adds	r3, r3, r5
 8001fe6:	eb44 0406 	adc.w	r4, r4, r6
 8001fea:	f04f 0100 	mov.w	r1, #0
 8001fee:	f04f 0200 	mov.w	r2, #0
 8001ff2:	0262      	lsls	r2, r4, #9
 8001ff4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001ff8:	0259      	lsls	r1, r3, #9
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	4614      	mov	r4, r2
 8001ffe:	4618      	mov	r0, r3
 8002000:	4621      	mov	r1, r4
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f04f 0400 	mov.w	r4, #0
 8002008:	461a      	mov	r2, r3
 800200a:	4623      	mov	r3, r4
 800200c:	f7fe f8e2 	bl	80001d4 <__aeabi_uldivmod>
 8002010:	4603      	mov	r3, r0
 8002012:	460c      	mov	r4, r1
 8002014:	60fb      	str	r3, [r7, #12]
 8002016:	e049      	b.n	80020ac <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002018:	4b2f      	ldr	r3, [pc, #188]	; (80020d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	099b      	lsrs	r3, r3, #6
 800201e:	f04f 0400 	mov.w	r4, #0
 8002022:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002026:	f04f 0200 	mov.w	r2, #0
 800202a:	ea03 0501 	and.w	r5, r3, r1
 800202e:	ea04 0602 	and.w	r6, r4, r2
 8002032:	4629      	mov	r1, r5
 8002034:	4632      	mov	r2, r6
 8002036:	f04f 0300 	mov.w	r3, #0
 800203a:	f04f 0400 	mov.w	r4, #0
 800203e:	0154      	lsls	r4, r2, #5
 8002040:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002044:	014b      	lsls	r3, r1, #5
 8002046:	4619      	mov	r1, r3
 8002048:	4622      	mov	r2, r4
 800204a:	1b49      	subs	r1, r1, r5
 800204c:	eb62 0206 	sbc.w	r2, r2, r6
 8002050:	f04f 0300 	mov.w	r3, #0
 8002054:	f04f 0400 	mov.w	r4, #0
 8002058:	0194      	lsls	r4, r2, #6
 800205a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800205e:	018b      	lsls	r3, r1, #6
 8002060:	1a5b      	subs	r3, r3, r1
 8002062:	eb64 0402 	sbc.w	r4, r4, r2
 8002066:	f04f 0100 	mov.w	r1, #0
 800206a:	f04f 0200 	mov.w	r2, #0
 800206e:	00e2      	lsls	r2, r4, #3
 8002070:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002074:	00d9      	lsls	r1, r3, #3
 8002076:	460b      	mov	r3, r1
 8002078:	4614      	mov	r4, r2
 800207a:	195b      	adds	r3, r3, r5
 800207c:	eb44 0406 	adc.w	r4, r4, r6
 8002080:	f04f 0100 	mov.w	r1, #0
 8002084:	f04f 0200 	mov.w	r2, #0
 8002088:	02a2      	lsls	r2, r4, #10
 800208a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800208e:	0299      	lsls	r1, r3, #10
 8002090:	460b      	mov	r3, r1
 8002092:	4614      	mov	r4, r2
 8002094:	4618      	mov	r0, r3
 8002096:	4621      	mov	r1, r4
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f04f 0400 	mov.w	r4, #0
 800209e:	461a      	mov	r2, r3
 80020a0:	4623      	mov	r3, r4
 80020a2:	f7fe f897 	bl	80001d4 <__aeabi_uldivmod>
 80020a6:	4603      	mov	r3, r0
 80020a8:	460c      	mov	r4, r1
 80020aa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80020ac:	4b0a      	ldr	r3, [pc, #40]	; (80020d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	0c1b      	lsrs	r3, r3, #16
 80020b2:	f003 0303 	and.w	r3, r3, #3
 80020b6:	3301      	adds	r3, #1
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80020bc:	68fa      	ldr	r2, [r7, #12]
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80020c4:	60bb      	str	r3, [r7, #8]
      break;
 80020c6:	e002      	b.n	80020ce <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020c8:	4b04      	ldr	r3, [pc, #16]	; (80020dc <HAL_RCC_GetSysClockFreq+0x1a8>)
 80020ca:	60bb      	str	r3, [r7, #8]
      break;
 80020cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020ce:	68bb      	ldr	r3, [r7, #8]
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3714      	adds	r7, #20
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020d8:	40023800 	.word	0x40023800
 80020dc:	00f42400 	.word	0x00f42400
 80020e0:	007a1200 	.word	0x007a1200

080020e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020e8:	4b03      	ldr	r3, [pc, #12]	; (80020f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80020ea:	681b      	ldr	r3, [r3, #0]
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	20000000 	.word	0x20000000

080020fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002100:	f7ff fff0 	bl	80020e4 <HAL_RCC_GetHCLKFreq>
 8002104:	4601      	mov	r1, r0
 8002106:	4b05      	ldr	r3, [pc, #20]	; (800211c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	0a9b      	lsrs	r3, r3, #10
 800210c:	f003 0307 	and.w	r3, r3, #7
 8002110:	4a03      	ldr	r2, [pc, #12]	; (8002120 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002112:	5cd3      	ldrb	r3, [r2, r3]
 8002114:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002118:	4618      	mov	r0, r3
 800211a:	bd80      	pop	{r7, pc}
 800211c:	40023800 	.word	0x40023800
 8002120:	08002ef4 	.word	0x08002ef4

08002124 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002128:	f7ff ffdc 	bl	80020e4 <HAL_RCC_GetHCLKFreq>
 800212c:	4601      	mov	r1, r0
 800212e:	4b05      	ldr	r3, [pc, #20]	; (8002144 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	0b5b      	lsrs	r3, r3, #13
 8002134:	f003 0307 	and.w	r3, r3, #7
 8002138:	4a03      	ldr	r2, [pc, #12]	; (8002148 <HAL_RCC_GetPCLK2Freq+0x24>)
 800213a:	5cd3      	ldrb	r3, [r2, r3]
 800213c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002140:	4618      	mov	r0, r3
 8002142:	bd80      	pop	{r7, pc}
 8002144:	40023800 	.word	0x40023800
 8002148:	08002ef4 	.word	0x08002ef4

0800214c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b086      	sub	sp, #24
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d101      	bne.n	8002160 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e083      	b.n	8002268 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002166:	b2db      	uxtb	r3, r3
 8002168:	2b00      	cmp	r3, #0
 800216a:	d106      	bne.n	800217a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f7fe fcf1 	bl	8000b5c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2202      	movs	r2, #2
 800217e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	6812      	ldr	r2, [r2, #0]
 800218c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002190:	f023 0307 	bic.w	r3, r3, #7
 8002194:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	3304      	adds	r3, #4
 800219e:	4619      	mov	r1, r3
 80021a0:	4610      	mov	r0, r2
 80021a2:	f000 f89d 	bl	80022e0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	699b      	ldr	r3, [r3, #24]
 80021b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	6a1b      	ldr	r3, [r3, #32]
 80021bc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	697a      	ldr	r2, [r7, #20]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021ce:	f023 0303 	bic.w	r3, r3, #3
 80021d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	689a      	ldr	r2, [r3, #8]
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	021b      	lsls	r3, r3, #8
 80021de:	4313      	orrs	r3, r2
 80021e0:	693a      	ldr	r2, [r7, #16]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80021ec:	f023 030c 	bic.w	r3, r3, #12
 80021f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80021f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80021fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	68da      	ldr	r2, [r3, #12]
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	69db      	ldr	r3, [r3, #28]
 8002206:	021b      	lsls	r3, r3, #8
 8002208:	4313      	orrs	r3, r2
 800220a:	693a      	ldr	r2, [r7, #16]
 800220c:	4313      	orrs	r3, r2
 800220e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	691b      	ldr	r3, [r3, #16]
 8002214:	011a      	lsls	r2, r3, #4
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	6a1b      	ldr	r3, [r3, #32]
 800221a:	031b      	lsls	r3, r3, #12
 800221c:	4313      	orrs	r3, r2
 800221e:	693a      	ldr	r2, [r7, #16]
 8002220:	4313      	orrs	r3, r2
 8002222:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800222a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8002232:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685a      	ldr	r2, [r3, #4]
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	695b      	ldr	r3, [r3, #20]
 800223c:	011b      	lsls	r3, r3, #4
 800223e:	4313      	orrs	r3, r2
 8002240:	68fa      	ldr	r2, [r7, #12]
 8002242:	4313      	orrs	r3, r2
 8002244:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	697a      	ldr	r2, [r7, #20]
 800224c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	693a      	ldr	r2, [r7, #16]
 8002254:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	68fa      	ldr	r2, [r7, #12]
 800225c:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2201      	movs	r2, #1
 8002262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002266:	2300      	movs	r3, #0
}
 8002268:	4618      	mov	r0, r3
 800226a:	3718      	adds	r7, #24
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d002      	beq.n	8002286 <HAL_TIM_Encoder_Start+0x16>
 8002280:	2b04      	cmp	r3, #4
 8002282:	d008      	beq.n	8002296 <HAL_TIM_Encoder_Start+0x26>
 8002284:	e00f      	b.n	80022a6 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2201      	movs	r2, #1
 800228c:	2100      	movs	r1, #0
 800228e:	4618      	mov	r0, r3
 8002290:	f000 f8a6 	bl	80023e0 <TIM_CCxChannelCmd>
      break;
 8002294:	e016      	b.n	80022c4 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2201      	movs	r2, #1
 800229c:	2104      	movs	r1, #4
 800229e:	4618      	mov	r0, r3
 80022a0:	f000 f89e 	bl	80023e0 <TIM_CCxChannelCmd>
      break;
 80022a4:	e00e      	b.n	80022c4 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2201      	movs	r2, #1
 80022ac:	2100      	movs	r1, #0
 80022ae:	4618      	mov	r0, r3
 80022b0:	f000 f896 	bl	80023e0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2201      	movs	r2, #1
 80022ba:	2104      	movs	r1, #4
 80022bc:	4618      	mov	r0, r3
 80022be:	f000 f88f 	bl	80023e0 <TIM_CCxChannelCmd>
      break;
 80022c2:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f042 0201 	orr.w	r2, r2, #1
 80022d2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
	...

080022e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	4a34      	ldr	r2, [pc, #208]	; (80023c4 <TIM_Base_SetConfig+0xe4>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d00f      	beq.n	8002318 <TIM_Base_SetConfig+0x38>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022fe:	d00b      	beq.n	8002318 <TIM_Base_SetConfig+0x38>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	4a31      	ldr	r2, [pc, #196]	; (80023c8 <TIM_Base_SetConfig+0xe8>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d007      	beq.n	8002318 <TIM_Base_SetConfig+0x38>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	4a30      	ldr	r2, [pc, #192]	; (80023cc <TIM_Base_SetConfig+0xec>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d003      	beq.n	8002318 <TIM_Base_SetConfig+0x38>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	4a2f      	ldr	r2, [pc, #188]	; (80023d0 <TIM_Base_SetConfig+0xf0>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d108      	bne.n	800232a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800231e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	68fa      	ldr	r2, [r7, #12]
 8002326:	4313      	orrs	r3, r2
 8002328:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a25      	ldr	r2, [pc, #148]	; (80023c4 <TIM_Base_SetConfig+0xe4>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d01b      	beq.n	800236a <TIM_Base_SetConfig+0x8a>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002338:	d017      	beq.n	800236a <TIM_Base_SetConfig+0x8a>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a22      	ldr	r2, [pc, #136]	; (80023c8 <TIM_Base_SetConfig+0xe8>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d013      	beq.n	800236a <TIM_Base_SetConfig+0x8a>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a21      	ldr	r2, [pc, #132]	; (80023cc <TIM_Base_SetConfig+0xec>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d00f      	beq.n	800236a <TIM_Base_SetConfig+0x8a>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a20      	ldr	r2, [pc, #128]	; (80023d0 <TIM_Base_SetConfig+0xf0>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d00b      	beq.n	800236a <TIM_Base_SetConfig+0x8a>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a1f      	ldr	r2, [pc, #124]	; (80023d4 <TIM_Base_SetConfig+0xf4>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d007      	beq.n	800236a <TIM_Base_SetConfig+0x8a>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a1e      	ldr	r2, [pc, #120]	; (80023d8 <TIM_Base_SetConfig+0xf8>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d003      	beq.n	800236a <TIM_Base_SetConfig+0x8a>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a1d      	ldr	r2, [pc, #116]	; (80023dc <TIM_Base_SetConfig+0xfc>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d108      	bne.n	800237c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002370:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	68fa      	ldr	r2, [r7, #12]
 8002378:	4313      	orrs	r3, r2
 800237a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	695b      	ldr	r3, [r3, #20]
 8002386:	4313      	orrs	r3, r2
 8002388:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	68fa      	ldr	r2, [r7, #12]
 800238e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	689a      	ldr	r2, [r3, #8]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	4a08      	ldr	r2, [pc, #32]	; (80023c4 <TIM_Base_SetConfig+0xe4>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d103      	bne.n	80023b0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	691a      	ldr	r2, [r3, #16]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	615a      	str	r2, [r3, #20]
}
 80023b6:	bf00      	nop
 80023b8:	3714      	adds	r7, #20
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	40010000 	.word	0x40010000
 80023c8:	40000400 	.word	0x40000400
 80023cc:	40000800 	.word	0x40000800
 80023d0:	40000c00 	.word	0x40000c00
 80023d4:	40014000 	.word	0x40014000
 80023d8:	40014400 	.word	0x40014400
 80023dc:	40014800 	.word	0x40014800

080023e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b087      	sub	sp, #28
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	60b9      	str	r1, [r7, #8]
 80023ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	f003 031f 	and.w	r3, r3, #31
 80023f2:	2201      	movs	r2, #1
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6a1a      	ldr	r2, [r3, #32]
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	43db      	mvns	r3, r3
 8002402:	401a      	ands	r2, r3
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6a1a      	ldr	r2, [r3, #32]
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	f003 031f 	and.w	r3, r3, #31
 8002412:	6879      	ldr	r1, [r7, #4]
 8002414:	fa01 f303 	lsl.w	r3, r1, r3
 8002418:	431a      	orrs	r2, r3
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	621a      	str	r2, [r3, #32]
}
 800241e:	bf00      	nop
 8002420:	371c      	adds	r7, #28
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
	...

0800242c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800242c:	b480      	push	{r7}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800243c:	2b01      	cmp	r3, #1
 800243e:	d101      	bne.n	8002444 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002440:	2302      	movs	r3, #2
 8002442:	e050      	b.n	80024e6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2202      	movs	r2, #2
 8002450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800246a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	68fa      	ldr	r2, [r7, #12]
 8002472:	4313      	orrs	r3, r2
 8002474:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	68fa      	ldr	r2, [r7, #12]
 800247c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a1c      	ldr	r2, [pc, #112]	; (80024f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d018      	beq.n	80024ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002490:	d013      	beq.n	80024ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a18      	ldr	r2, [pc, #96]	; (80024f8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d00e      	beq.n	80024ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a16      	ldr	r2, [pc, #88]	; (80024fc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d009      	beq.n	80024ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a15      	ldr	r2, [pc, #84]	; (8002500 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d004      	beq.n	80024ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a13      	ldr	r2, [pc, #76]	; (8002504 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d10c      	bne.n	80024d4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80024c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	68ba      	ldr	r2, [r7, #8]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	68ba      	ldr	r2, [r7, #8]
 80024d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3714      	adds	r7, #20
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	40010000 	.word	0x40010000
 80024f8:	40000400 	.word	0x40000400
 80024fc:	40000800 	.word	0x40000800
 8002500:	40000c00 	.word	0x40000c00
 8002504:	40014000 	.word	0x40014000

08002508 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d101      	bne.n	800251a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e03f      	b.n	800259a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002520:	b2db      	uxtb	r3, r3
 8002522:	2b00      	cmp	r3, #0
 8002524:	d106      	bne.n	8002534 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f7fe fbf8 	bl	8000d24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2224      	movs	r2, #36	; 0x24
 8002538:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	68da      	ldr	r2, [r3, #12]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800254a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f000 f90b 	bl	8002768 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	691a      	ldr	r2, [r3, #16]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002560:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	695a      	ldr	r2, [r3, #20]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002570:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68da      	ldr	r2, [r3, #12]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002580:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2220      	movs	r2, #32
 800258c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2220      	movs	r2, #32
 8002594:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b088      	sub	sp, #32
 80025a6:	af02      	add	r7, sp, #8
 80025a8:	60f8      	str	r0, [r7, #12]
 80025aa:	60b9      	str	r1, [r7, #8]
 80025ac:	603b      	str	r3, [r7, #0]
 80025ae:	4613      	mov	r3, r2
 80025b0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80025b2:	2300      	movs	r3, #0
 80025b4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b20      	cmp	r3, #32
 80025c0:	f040 8083 	bne.w	80026ca <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d002      	beq.n	80025d0 <HAL_UART_Transmit+0x2e>
 80025ca:	88fb      	ldrh	r3, [r7, #6]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d101      	bne.n	80025d4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e07b      	b.n	80026cc <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d101      	bne.n	80025e2 <HAL_UART_Transmit+0x40>
 80025de:	2302      	movs	r3, #2
 80025e0:	e074      	b.n	80026cc <HAL_UART_Transmit+0x12a>
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2201      	movs	r2, #1
 80025e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2200      	movs	r2, #0
 80025ee:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2221      	movs	r2, #33	; 0x21
 80025f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80025f8:	f7fe feb8 	bl	800136c <HAL_GetTick>
 80025fc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	88fa      	ldrh	r2, [r7, #6]
 8002602:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	88fa      	ldrh	r2, [r7, #6]
 8002608:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2200      	movs	r2, #0
 800260e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002612:	e042      	b.n	800269a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002618:	b29b      	uxth	r3, r3
 800261a:	3b01      	subs	r3, #1
 800261c:	b29a      	uxth	r2, r3
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800262a:	d122      	bne.n	8002672 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	9300      	str	r3, [sp, #0]
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	2200      	movs	r2, #0
 8002634:	2180      	movs	r1, #128	; 0x80
 8002636:	68f8      	ldr	r0, [r7, #12]
 8002638:	f000 f84c 	bl	80026d4 <UART_WaitOnFlagUntilTimeout>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e042      	b.n	80026cc <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	881b      	ldrh	r3, [r3, #0]
 800264e:	461a      	mov	r2, r3
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002658:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d103      	bne.n	800266a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	3302      	adds	r3, #2
 8002666:	60bb      	str	r3, [r7, #8]
 8002668:	e017      	b.n	800269a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	3301      	adds	r3, #1
 800266e:	60bb      	str	r3, [r7, #8]
 8002670:	e013      	b.n	800269a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	9300      	str	r3, [sp, #0]
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	2200      	movs	r2, #0
 800267a:	2180      	movs	r1, #128	; 0x80
 800267c:	68f8      	ldr	r0, [r7, #12]
 800267e:	f000 f829 	bl	80026d4 <UART_WaitOnFlagUntilTimeout>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002688:	2303      	movs	r3, #3
 800268a:	e01f      	b.n	80026cc <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	1c5a      	adds	r2, r3, #1
 8002690:	60ba      	str	r2, [r7, #8]
 8002692:	781a      	ldrb	r2, [r3, #0]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800269e:	b29b      	uxth	r3, r3
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d1b7      	bne.n	8002614 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	9300      	str	r3, [sp, #0]
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	2200      	movs	r2, #0
 80026ac:	2140      	movs	r1, #64	; 0x40
 80026ae:	68f8      	ldr	r0, [r7, #12]
 80026b0:	f000 f810 	bl	80026d4 <UART_WaitOnFlagUntilTimeout>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e006      	b.n	80026cc <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2220      	movs	r2, #32
 80026c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80026c6:	2300      	movs	r3, #0
 80026c8:	e000      	b.n	80026cc <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80026ca:	2302      	movs	r3, #2
  }
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3718      	adds	r7, #24
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	603b      	str	r3, [r7, #0]
 80026e0:	4613      	mov	r3, r2
 80026e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026e4:	e02c      	b.n	8002740 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ec:	d028      	beq.n	8002740 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d007      	beq.n	8002704 <UART_WaitOnFlagUntilTimeout+0x30>
 80026f4:	f7fe fe3a 	bl	800136c <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	69ba      	ldr	r2, [r7, #24]
 8002700:	429a      	cmp	r2, r3
 8002702:	d21d      	bcs.n	8002740 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	68da      	ldr	r2, [r3, #12]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002712:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	695a      	ldr	r2, [r3, #20]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f022 0201 	bic.w	r2, r2, #1
 8002722:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2220      	movs	r2, #32
 8002728:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2220      	movs	r2, #32
 8002730:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2200      	movs	r2, #0
 8002738:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e00f      	b.n	8002760 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	4013      	ands	r3, r2
 800274a:	68ba      	ldr	r2, [r7, #8]
 800274c:	429a      	cmp	r2, r3
 800274e:	bf0c      	ite	eq
 8002750:	2301      	moveq	r3, #1
 8002752:	2300      	movne	r3, #0
 8002754:	b2db      	uxtb	r3, r3
 8002756:	461a      	mov	r2, r3
 8002758:	79fb      	ldrb	r3, [r7, #7]
 800275a:	429a      	cmp	r2, r3
 800275c:	d0c3      	beq.n	80026e6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800275e:	2300      	movs	r3, #0
}
 8002760:	4618      	mov	r0, r3
 8002762:	3710      	adds	r7, #16
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}

08002768 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800276c:	b085      	sub	sp, #20
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	691b      	ldr	r3, [r3, #16]
 8002778:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	68da      	ldr	r2, [r3, #12]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	430a      	orrs	r2, r1
 8002786:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	689a      	ldr	r2, [r3, #8]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	691b      	ldr	r3, [r3, #16]
 8002790:	431a      	orrs	r2, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	695b      	ldr	r3, [r3, #20]
 8002796:	431a      	orrs	r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	69db      	ldr	r3, [r3, #28]
 800279c:	4313      	orrs	r3, r2
 800279e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80027aa:	f023 030c 	bic.w	r3, r3, #12
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	6812      	ldr	r2, [r2, #0]
 80027b2:	68f9      	ldr	r1, [r7, #12]
 80027b4:	430b      	orrs	r3, r1
 80027b6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	695b      	ldr	r3, [r3, #20]
 80027be:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	699a      	ldr	r2, [r3, #24]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	430a      	orrs	r2, r1
 80027cc:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	69db      	ldr	r3, [r3, #28]
 80027d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027d6:	f040 818b 	bne.w	8002af0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4ac1      	ldr	r2, [pc, #772]	; (8002ae4 <UART_SetConfig+0x37c>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d005      	beq.n	80027f0 <UART_SetConfig+0x88>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4abf      	ldr	r2, [pc, #764]	; (8002ae8 <UART_SetConfig+0x380>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	f040 80bd 	bne.w	800296a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80027f0:	f7ff fc98 	bl	8002124 <HAL_RCC_GetPCLK2Freq>
 80027f4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	461d      	mov	r5, r3
 80027fa:	f04f 0600 	mov.w	r6, #0
 80027fe:	46a8      	mov	r8, r5
 8002800:	46b1      	mov	r9, r6
 8002802:	eb18 0308 	adds.w	r3, r8, r8
 8002806:	eb49 0409 	adc.w	r4, r9, r9
 800280a:	4698      	mov	r8, r3
 800280c:	46a1      	mov	r9, r4
 800280e:	eb18 0805 	adds.w	r8, r8, r5
 8002812:	eb49 0906 	adc.w	r9, r9, r6
 8002816:	f04f 0100 	mov.w	r1, #0
 800281a:	f04f 0200 	mov.w	r2, #0
 800281e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002822:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002826:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800282a:	4688      	mov	r8, r1
 800282c:	4691      	mov	r9, r2
 800282e:	eb18 0005 	adds.w	r0, r8, r5
 8002832:	eb49 0106 	adc.w	r1, r9, r6
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	461d      	mov	r5, r3
 800283c:	f04f 0600 	mov.w	r6, #0
 8002840:	196b      	adds	r3, r5, r5
 8002842:	eb46 0406 	adc.w	r4, r6, r6
 8002846:	461a      	mov	r2, r3
 8002848:	4623      	mov	r3, r4
 800284a:	f7fd fcc3 	bl	80001d4 <__aeabi_uldivmod>
 800284e:	4603      	mov	r3, r0
 8002850:	460c      	mov	r4, r1
 8002852:	461a      	mov	r2, r3
 8002854:	4ba5      	ldr	r3, [pc, #660]	; (8002aec <UART_SetConfig+0x384>)
 8002856:	fba3 2302 	umull	r2, r3, r3, r2
 800285a:	095b      	lsrs	r3, r3, #5
 800285c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	461d      	mov	r5, r3
 8002864:	f04f 0600 	mov.w	r6, #0
 8002868:	46a9      	mov	r9, r5
 800286a:	46b2      	mov	sl, r6
 800286c:	eb19 0309 	adds.w	r3, r9, r9
 8002870:	eb4a 040a 	adc.w	r4, sl, sl
 8002874:	4699      	mov	r9, r3
 8002876:	46a2      	mov	sl, r4
 8002878:	eb19 0905 	adds.w	r9, r9, r5
 800287c:	eb4a 0a06 	adc.w	sl, sl, r6
 8002880:	f04f 0100 	mov.w	r1, #0
 8002884:	f04f 0200 	mov.w	r2, #0
 8002888:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800288c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002890:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002894:	4689      	mov	r9, r1
 8002896:	4692      	mov	sl, r2
 8002898:	eb19 0005 	adds.w	r0, r9, r5
 800289c:	eb4a 0106 	adc.w	r1, sl, r6
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	461d      	mov	r5, r3
 80028a6:	f04f 0600 	mov.w	r6, #0
 80028aa:	196b      	adds	r3, r5, r5
 80028ac:	eb46 0406 	adc.w	r4, r6, r6
 80028b0:	461a      	mov	r2, r3
 80028b2:	4623      	mov	r3, r4
 80028b4:	f7fd fc8e 	bl	80001d4 <__aeabi_uldivmod>
 80028b8:	4603      	mov	r3, r0
 80028ba:	460c      	mov	r4, r1
 80028bc:	461a      	mov	r2, r3
 80028be:	4b8b      	ldr	r3, [pc, #556]	; (8002aec <UART_SetConfig+0x384>)
 80028c0:	fba3 1302 	umull	r1, r3, r3, r2
 80028c4:	095b      	lsrs	r3, r3, #5
 80028c6:	2164      	movs	r1, #100	; 0x64
 80028c8:	fb01 f303 	mul.w	r3, r1, r3
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	3332      	adds	r3, #50	; 0x32
 80028d2:	4a86      	ldr	r2, [pc, #536]	; (8002aec <UART_SetConfig+0x384>)
 80028d4:	fba2 2303 	umull	r2, r3, r2, r3
 80028d8:	095b      	lsrs	r3, r3, #5
 80028da:	005b      	lsls	r3, r3, #1
 80028dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80028e0:	4498      	add	r8, r3
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	461d      	mov	r5, r3
 80028e6:	f04f 0600 	mov.w	r6, #0
 80028ea:	46a9      	mov	r9, r5
 80028ec:	46b2      	mov	sl, r6
 80028ee:	eb19 0309 	adds.w	r3, r9, r9
 80028f2:	eb4a 040a 	adc.w	r4, sl, sl
 80028f6:	4699      	mov	r9, r3
 80028f8:	46a2      	mov	sl, r4
 80028fa:	eb19 0905 	adds.w	r9, r9, r5
 80028fe:	eb4a 0a06 	adc.w	sl, sl, r6
 8002902:	f04f 0100 	mov.w	r1, #0
 8002906:	f04f 0200 	mov.w	r2, #0
 800290a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800290e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002912:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002916:	4689      	mov	r9, r1
 8002918:	4692      	mov	sl, r2
 800291a:	eb19 0005 	adds.w	r0, r9, r5
 800291e:	eb4a 0106 	adc.w	r1, sl, r6
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	461d      	mov	r5, r3
 8002928:	f04f 0600 	mov.w	r6, #0
 800292c:	196b      	adds	r3, r5, r5
 800292e:	eb46 0406 	adc.w	r4, r6, r6
 8002932:	461a      	mov	r2, r3
 8002934:	4623      	mov	r3, r4
 8002936:	f7fd fc4d 	bl	80001d4 <__aeabi_uldivmod>
 800293a:	4603      	mov	r3, r0
 800293c:	460c      	mov	r4, r1
 800293e:	461a      	mov	r2, r3
 8002940:	4b6a      	ldr	r3, [pc, #424]	; (8002aec <UART_SetConfig+0x384>)
 8002942:	fba3 1302 	umull	r1, r3, r3, r2
 8002946:	095b      	lsrs	r3, r3, #5
 8002948:	2164      	movs	r1, #100	; 0x64
 800294a:	fb01 f303 	mul.w	r3, r1, r3
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	00db      	lsls	r3, r3, #3
 8002952:	3332      	adds	r3, #50	; 0x32
 8002954:	4a65      	ldr	r2, [pc, #404]	; (8002aec <UART_SetConfig+0x384>)
 8002956:	fba2 2303 	umull	r2, r3, r2, r3
 800295a:	095b      	lsrs	r3, r3, #5
 800295c:	f003 0207 	and.w	r2, r3, #7
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4442      	add	r2, r8
 8002966:	609a      	str	r2, [r3, #8]
 8002968:	e26f      	b.n	8002e4a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800296a:	f7ff fbc7 	bl	80020fc <HAL_RCC_GetPCLK1Freq>
 800296e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	461d      	mov	r5, r3
 8002974:	f04f 0600 	mov.w	r6, #0
 8002978:	46a8      	mov	r8, r5
 800297a:	46b1      	mov	r9, r6
 800297c:	eb18 0308 	adds.w	r3, r8, r8
 8002980:	eb49 0409 	adc.w	r4, r9, r9
 8002984:	4698      	mov	r8, r3
 8002986:	46a1      	mov	r9, r4
 8002988:	eb18 0805 	adds.w	r8, r8, r5
 800298c:	eb49 0906 	adc.w	r9, r9, r6
 8002990:	f04f 0100 	mov.w	r1, #0
 8002994:	f04f 0200 	mov.w	r2, #0
 8002998:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800299c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80029a0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80029a4:	4688      	mov	r8, r1
 80029a6:	4691      	mov	r9, r2
 80029a8:	eb18 0005 	adds.w	r0, r8, r5
 80029ac:	eb49 0106 	adc.w	r1, r9, r6
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	461d      	mov	r5, r3
 80029b6:	f04f 0600 	mov.w	r6, #0
 80029ba:	196b      	adds	r3, r5, r5
 80029bc:	eb46 0406 	adc.w	r4, r6, r6
 80029c0:	461a      	mov	r2, r3
 80029c2:	4623      	mov	r3, r4
 80029c4:	f7fd fc06 	bl	80001d4 <__aeabi_uldivmod>
 80029c8:	4603      	mov	r3, r0
 80029ca:	460c      	mov	r4, r1
 80029cc:	461a      	mov	r2, r3
 80029ce:	4b47      	ldr	r3, [pc, #284]	; (8002aec <UART_SetConfig+0x384>)
 80029d0:	fba3 2302 	umull	r2, r3, r3, r2
 80029d4:	095b      	lsrs	r3, r3, #5
 80029d6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	461d      	mov	r5, r3
 80029de:	f04f 0600 	mov.w	r6, #0
 80029e2:	46a9      	mov	r9, r5
 80029e4:	46b2      	mov	sl, r6
 80029e6:	eb19 0309 	adds.w	r3, r9, r9
 80029ea:	eb4a 040a 	adc.w	r4, sl, sl
 80029ee:	4699      	mov	r9, r3
 80029f0:	46a2      	mov	sl, r4
 80029f2:	eb19 0905 	adds.w	r9, r9, r5
 80029f6:	eb4a 0a06 	adc.w	sl, sl, r6
 80029fa:	f04f 0100 	mov.w	r1, #0
 80029fe:	f04f 0200 	mov.w	r2, #0
 8002a02:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a06:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002a0a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002a0e:	4689      	mov	r9, r1
 8002a10:	4692      	mov	sl, r2
 8002a12:	eb19 0005 	adds.w	r0, r9, r5
 8002a16:	eb4a 0106 	adc.w	r1, sl, r6
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	461d      	mov	r5, r3
 8002a20:	f04f 0600 	mov.w	r6, #0
 8002a24:	196b      	adds	r3, r5, r5
 8002a26:	eb46 0406 	adc.w	r4, r6, r6
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	4623      	mov	r3, r4
 8002a2e:	f7fd fbd1 	bl	80001d4 <__aeabi_uldivmod>
 8002a32:	4603      	mov	r3, r0
 8002a34:	460c      	mov	r4, r1
 8002a36:	461a      	mov	r2, r3
 8002a38:	4b2c      	ldr	r3, [pc, #176]	; (8002aec <UART_SetConfig+0x384>)
 8002a3a:	fba3 1302 	umull	r1, r3, r3, r2
 8002a3e:	095b      	lsrs	r3, r3, #5
 8002a40:	2164      	movs	r1, #100	; 0x64
 8002a42:	fb01 f303 	mul.w	r3, r1, r3
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	00db      	lsls	r3, r3, #3
 8002a4a:	3332      	adds	r3, #50	; 0x32
 8002a4c:	4a27      	ldr	r2, [pc, #156]	; (8002aec <UART_SetConfig+0x384>)
 8002a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a52:	095b      	lsrs	r3, r3, #5
 8002a54:	005b      	lsls	r3, r3, #1
 8002a56:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002a5a:	4498      	add	r8, r3
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	461d      	mov	r5, r3
 8002a60:	f04f 0600 	mov.w	r6, #0
 8002a64:	46a9      	mov	r9, r5
 8002a66:	46b2      	mov	sl, r6
 8002a68:	eb19 0309 	adds.w	r3, r9, r9
 8002a6c:	eb4a 040a 	adc.w	r4, sl, sl
 8002a70:	4699      	mov	r9, r3
 8002a72:	46a2      	mov	sl, r4
 8002a74:	eb19 0905 	adds.w	r9, r9, r5
 8002a78:	eb4a 0a06 	adc.w	sl, sl, r6
 8002a7c:	f04f 0100 	mov.w	r1, #0
 8002a80:	f04f 0200 	mov.w	r2, #0
 8002a84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a88:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002a8c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002a90:	4689      	mov	r9, r1
 8002a92:	4692      	mov	sl, r2
 8002a94:	eb19 0005 	adds.w	r0, r9, r5
 8002a98:	eb4a 0106 	adc.w	r1, sl, r6
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	461d      	mov	r5, r3
 8002aa2:	f04f 0600 	mov.w	r6, #0
 8002aa6:	196b      	adds	r3, r5, r5
 8002aa8:	eb46 0406 	adc.w	r4, r6, r6
 8002aac:	461a      	mov	r2, r3
 8002aae:	4623      	mov	r3, r4
 8002ab0:	f7fd fb90 	bl	80001d4 <__aeabi_uldivmod>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	460c      	mov	r4, r1
 8002ab8:	461a      	mov	r2, r3
 8002aba:	4b0c      	ldr	r3, [pc, #48]	; (8002aec <UART_SetConfig+0x384>)
 8002abc:	fba3 1302 	umull	r1, r3, r3, r2
 8002ac0:	095b      	lsrs	r3, r3, #5
 8002ac2:	2164      	movs	r1, #100	; 0x64
 8002ac4:	fb01 f303 	mul.w	r3, r1, r3
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	3332      	adds	r3, #50	; 0x32
 8002ace:	4a07      	ldr	r2, [pc, #28]	; (8002aec <UART_SetConfig+0x384>)
 8002ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad4:	095b      	lsrs	r3, r3, #5
 8002ad6:	f003 0207 	and.w	r2, r3, #7
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4442      	add	r2, r8
 8002ae0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002ae2:	e1b2      	b.n	8002e4a <UART_SetConfig+0x6e2>
 8002ae4:	40011000 	.word	0x40011000
 8002ae8:	40011400 	.word	0x40011400
 8002aec:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4ad7      	ldr	r2, [pc, #860]	; (8002e54 <UART_SetConfig+0x6ec>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d005      	beq.n	8002b06 <UART_SetConfig+0x39e>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4ad6      	ldr	r2, [pc, #856]	; (8002e58 <UART_SetConfig+0x6f0>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	f040 80d1 	bne.w	8002ca8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002b06:	f7ff fb0d 	bl	8002124 <HAL_RCC_GetPCLK2Freq>
 8002b0a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	469a      	mov	sl, r3
 8002b10:	f04f 0b00 	mov.w	fp, #0
 8002b14:	46d0      	mov	r8, sl
 8002b16:	46d9      	mov	r9, fp
 8002b18:	eb18 0308 	adds.w	r3, r8, r8
 8002b1c:	eb49 0409 	adc.w	r4, r9, r9
 8002b20:	4698      	mov	r8, r3
 8002b22:	46a1      	mov	r9, r4
 8002b24:	eb18 080a 	adds.w	r8, r8, sl
 8002b28:	eb49 090b 	adc.w	r9, r9, fp
 8002b2c:	f04f 0100 	mov.w	r1, #0
 8002b30:	f04f 0200 	mov.w	r2, #0
 8002b34:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002b38:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002b3c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002b40:	4688      	mov	r8, r1
 8002b42:	4691      	mov	r9, r2
 8002b44:	eb1a 0508 	adds.w	r5, sl, r8
 8002b48:	eb4b 0609 	adc.w	r6, fp, r9
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	4619      	mov	r1, r3
 8002b52:	f04f 0200 	mov.w	r2, #0
 8002b56:	f04f 0300 	mov.w	r3, #0
 8002b5a:	f04f 0400 	mov.w	r4, #0
 8002b5e:	0094      	lsls	r4, r2, #2
 8002b60:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002b64:	008b      	lsls	r3, r1, #2
 8002b66:	461a      	mov	r2, r3
 8002b68:	4623      	mov	r3, r4
 8002b6a:	4628      	mov	r0, r5
 8002b6c:	4631      	mov	r1, r6
 8002b6e:	f7fd fb31 	bl	80001d4 <__aeabi_uldivmod>
 8002b72:	4603      	mov	r3, r0
 8002b74:	460c      	mov	r4, r1
 8002b76:	461a      	mov	r2, r3
 8002b78:	4bb8      	ldr	r3, [pc, #736]	; (8002e5c <UART_SetConfig+0x6f4>)
 8002b7a:	fba3 2302 	umull	r2, r3, r3, r2
 8002b7e:	095b      	lsrs	r3, r3, #5
 8002b80:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	469b      	mov	fp, r3
 8002b88:	f04f 0c00 	mov.w	ip, #0
 8002b8c:	46d9      	mov	r9, fp
 8002b8e:	46e2      	mov	sl, ip
 8002b90:	eb19 0309 	adds.w	r3, r9, r9
 8002b94:	eb4a 040a 	adc.w	r4, sl, sl
 8002b98:	4699      	mov	r9, r3
 8002b9a:	46a2      	mov	sl, r4
 8002b9c:	eb19 090b 	adds.w	r9, r9, fp
 8002ba0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002ba4:	f04f 0100 	mov.w	r1, #0
 8002ba8:	f04f 0200 	mov.w	r2, #0
 8002bac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002bb0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002bb4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002bb8:	4689      	mov	r9, r1
 8002bba:	4692      	mov	sl, r2
 8002bbc:	eb1b 0509 	adds.w	r5, fp, r9
 8002bc0:	eb4c 060a 	adc.w	r6, ip, sl
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	4619      	mov	r1, r3
 8002bca:	f04f 0200 	mov.w	r2, #0
 8002bce:	f04f 0300 	mov.w	r3, #0
 8002bd2:	f04f 0400 	mov.w	r4, #0
 8002bd6:	0094      	lsls	r4, r2, #2
 8002bd8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002bdc:	008b      	lsls	r3, r1, #2
 8002bde:	461a      	mov	r2, r3
 8002be0:	4623      	mov	r3, r4
 8002be2:	4628      	mov	r0, r5
 8002be4:	4631      	mov	r1, r6
 8002be6:	f7fd faf5 	bl	80001d4 <__aeabi_uldivmod>
 8002bea:	4603      	mov	r3, r0
 8002bec:	460c      	mov	r4, r1
 8002bee:	461a      	mov	r2, r3
 8002bf0:	4b9a      	ldr	r3, [pc, #616]	; (8002e5c <UART_SetConfig+0x6f4>)
 8002bf2:	fba3 1302 	umull	r1, r3, r3, r2
 8002bf6:	095b      	lsrs	r3, r3, #5
 8002bf8:	2164      	movs	r1, #100	; 0x64
 8002bfa:	fb01 f303 	mul.w	r3, r1, r3
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	011b      	lsls	r3, r3, #4
 8002c02:	3332      	adds	r3, #50	; 0x32
 8002c04:	4a95      	ldr	r2, [pc, #596]	; (8002e5c <UART_SetConfig+0x6f4>)
 8002c06:	fba2 2303 	umull	r2, r3, r2, r3
 8002c0a:	095b      	lsrs	r3, r3, #5
 8002c0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c10:	4498      	add	r8, r3
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	469b      	mov	fp, r3
 8002c16:	f04f 0c00 	mov.w	ip, #0
 8002c1a:	46d9      	mov	r9, fp
 8002c1c:	46e2      	mov	sl, ip
 8002c1e:	eb19 0309 	adds.w	r3, r9, r9
 8002c22:	eb4a 040a 	adc.w	r4, sl, sl
 8002c26:	4699      	mov	r9, r3
 8002c28:	46a2      	mov	sl, r4
 8002c2a:	eb19 090b 	adds.w	r9, r9, fp
 8002c2e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002c32:	f04f 0100 	mov.w	r1, #0
 8002c36:	f04f 0200 	mov.w	r2, #0
 8002c3a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c3e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002c42:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002c46:	4689      	mov	r9, r1
 8002c48:	4692      	mov	sl, r2
 8002c4a:	eb1b 0509 	adds.w	r5, fp, r9
 8002c4e:	eb4c 060a 	adc.w	r6, ip, sl
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	4619      	mov	r1, r3
 8002c58:	f04f 0200 	mov.w	r2, #0
 8002c5c:	f04f 0300 	mov.w	r3, #0
 8002c60:	f04f 0400 	mov.w	r4, #0
 8002c64:	0094      	lsls	r4, r2, #2
 8002c66:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002c6a:	008b      	lsls	r3, r1, #2
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	4623      	mov	r3, r4
 8002c70:	4628      	mov	r0, r5
 8002c72:	4631      	mov	r1, r6
 8002c74:	f7fd faae 	bl	80001d4 <__aeabi_uldivmod>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	460c      	mov	r4, r1
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	4b77      	ldr	r3, [pc, #476]	; (8002e5c <UART_SetConfig+0x6f4>)
 8002c80:	fba3 1302 	umull	r1, r3, r3, r2
 8002c84:	095b      	lsrs	r3, r3, #5
 8002c86:	2164      	movs	r1, #100	; 0x64
 8002c88:	fb01 f303 	mul.w	r3, r1, r3
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	011b      	lsls	r3, r3, #4
 8002c90:	3332      	adds	r3, #50	; 0x32
 8002c92:	4a72      	ldr	r2, [pc, #456]	; (8002e5c <UART_SetConfig+0x6f4>)
 8002c94:	fba2 2303 	umull	r2, r3, r2, r3
 8002c98:	095b      	lsrs	r3, r3, #5
 8002c9a:	f003 020f 	and.w	r2, r3, #15
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4442      	add	r2, r8
 8002ca4:	609a      	str	r2, [r3, #8]
 8002ca6:	e0d0      	b.n	8002e4a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002ca8:	f7ff fa28 	bl	80020fc <HAL_RCC_GetPCLK1Freq>
 8002cac:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	469a      	mov	sl, r3
 8002cb2:	f04f 0b00 	mov.w	fp, #0
 8002cb6:	46d0      	mov	r8, sl
 8002cb8:	46d9      	mov	r9, fp
 8002cba:	eb18 0308 	adds.w	r3, r8, r8
 8002cbe:	eb49 0409 	adc.w	r4, r9, r9
 8002cc2:	4698      	mov	r8, r3
 8002cc4:	46a1      	mov	r9, r4
 8002cc6:	eb18 080a 	adds.w	r8, r8, sl
 8002cca:	eb49 090b 	adc.w	r9, r9, fp
 8002cce:	f04f 0100 	mov.w	r1, #0
 8002cd2:	f04f 0200 	mov.w	r2, #0
 8002cd6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002cda:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002cde:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002ce2:	4688      	mov	r8, r1
 8002ce4:	4691      	mov	r9, r2
 8002ce6:	eb1a 0508 	adds.w	r5, sl, r8
 8002cea:	eb4b 0609 	adc.w	r6, fp, r9
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	f04f 0200 	mov.w	r2, #0
 8002cf8:	f04f 0300 	mov.w	r3, #0
 8002cfc:	f04f 0400 	mov.w	r4, #0
 8002d00:	0094      	lsls	r4, r2, #2
 8002d02:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002d06:	008b      	lsls	r3, r1, #2
 8002d08:	461a      	mov	r2, r3
 8002d0a:	4623      	mov	r3, r4
 8002d0c:	4628      	mov	r0, r5
 8002d0e:	4631      	mov	r1, r6
 8002d10:	f7fd fa60 	bl	80001d4 <__aeabi_uldivmod>
 8002d14:	4603      	mov	r3, r0
 8002d16:	460c      	mov	r4, r1
 8002d18:	461a      	mov	r2, r3
 8002d1a:	4b50      	ldr	r3, [pc, #320]	; (8002e5c <UART_SetConfig+0x6f4>)
 8002d1c:	fba3 2302 	umull	r2, r3, r3, r2
 8002d20:	095b      	lsrs	r3, r3, #5
 8002d22:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	469b      	mov	fp, r3
 8002d2a:	f04f 0c00 	mov.w	ip, #0
 8002d2e:	46d9      	mov	r9, fp
 8002d30:	46e2      	mov	sl, ip
 8002d32:	eb19 0309 	adds.w	r3, r9, r9
 8002d36:	eb4a 040a 	adc.w	r4, sl, sl
 8002d3a:	4699      	mov	r9, r3
 8002d3c:	46a2      	mov	sl, r4
 8002d3e:	eb19 090b 	adds.w	r9, r9, fp
 8002d42:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002d46:	f04f 0100 	mov.w	r1, #0
 8002d4a:	f04f 0200 	mov.w	r2, #0
 8002d4e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d52:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002d56:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002d5a:	4689      	mov	r9, r1
 8002d5c:	4692      	mov	sl, r2
 8002d5e:	eb1b 0509 	adds.w	r5, fp, r9
 8002d62:	eb4c 060a 	adc.w	r6, ip, sl
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	f04f 0200 	mov.w	r2, #0
 8002d70:	f04f 0300 	mov.w	r3, #0
 8002d74:	f04f 0400 	mov.w	r4, #0
 8002d78:	0094      	lsls	r4, r2, #2
 8002d7a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002d7e:	008b      	lsls	r3, r1, #2
 8002d80:	461a      	mov	r2, r3
 8002d82:	4623      	mov	r3, r4
 8002d84:	4628      	mov	r0, r5
 8002d86:	4631      	mov	r1, r6
 8002d88:	f7fd fa24 	bl	80001d4 <__aeabi_uldivmod>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	460c      	mov	r4, r1
 8002d90:	461a      	mov	r2, r3
 8002d92:	4b32      	ldr	r3, [pc, #200]	; (8002e5c <UART_SetConfig+0x6f4>)
 8002d94:	fba3 1302 	umull	r1, r3, r3, r2
 8002d98:	095b      	lsrs	r3, r3, #5
 8002d9a:	2164      	movs	r1, #100	; 0x64
 8002d9c:	fb01 f303 	mul.w	r3, r1, r3
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	011b      	lsls	r3, r3, #4
 8002da4:	3332      	adds	r3, #50	; 0x32
 8002da6:	4a2d      	ldr	r2, [pc, #180]	; (8002e5c <UART_SetConfig+0x6f4>)
 8002da8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dac:	095b      	lsrs	r3, r3, #5
 8002dae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002db2:	4498      	add	r8, r3
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	469b      	mov	fp, r3
 8002db8:	f04f 0c00 	mov.w	ip, #0
 8002dbc:	46d9      	mov	r9, fp
 8002dbe:	46e2      	mov	sl, ip
 8002dc0:	eb19 0309 	adds.w	r3, r9, r9
 8002dc4:	eb4a 040a 	adc.w	r4, sl, sl
 8002dc8:	4699      	mov	r9, r3
 8002dca:	46a2      	mov	sl, r4
 8002dcc:	eb19 090b 	adds.w	r9, r9, fp
 8002dd0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002dd4:	f04f 0100 	mov.w	r1, #0
 8002dd8:	f04f 0200 	mov.w	r2, #0
 8002ddc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002de0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002de4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002de8:	4689      	mov	r9, r1
 8002dea:	4692      	mov	sl, r2
 8002dec:	eb1b 0509 	adds.w	r5, fp, r9
 8002df0:	eb4c 060a 	adc.w	r6, ip, sl
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	4619      	mov	r1, r3
 8002dfa:	f04f 0200 	mov.w	r2, #0
 8002dfe:	f04f 0300 	mov.w	r3, #0
 8002e02:	f04f 0400 	mov.w	r4, #0
 8002e06:	0094      	lsls	r4, r2, #2
 8002e08:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002e0c:	008b      	lsls	r3, r1, #2
 8002e0e:	461a      	mov	r2, r3
 8002e10:	4623      	mov	r3, r4
 8002e12:	4628      	mov	r0, r5
 8002e14:	4631      	mov	r1, r6
 8002e16:	f7fd f9dd 	bl	80001d4 <__aeabi_uldivmod>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	460c      	mov	r4, r1
 8002e1e:	461a      	mov	r2, r3
 8002e20:	4b0e      	ldr	r3, [pc, #56]	; (8002e5c <UART_SetConfig+0x6f4>)
 8002e22:	fba3 1302 	umull	r1, r3, r3, r2
 8002e26:	095b      	lsrs	r3, r3, #5
 8002e28:	2164      	movs	r1, #100	; 0x64
 8002e2a:	fb01 f303 	mul.w	r3, r1, r3
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	011b      	lsls	r3, r3, #4
 8002e32:	3332      	adds	r3, #50	; 0x32
 8002e34:	4a09      	ldr	r2, [pc, #36]	; (8002e5c <UART_SetConfig+0x6f4>)
 8002e36:	fba2 2303 	umull	r2, r3, r2, r3
 8002e3a:	095b      	lsrs	r3, r3, #5
 8002e3c:	f003 020f 	and.w	r2, r3, #15
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4442      	add	r2, r8
 8002e46:	609a      	str	r2, [r3, #8]
}
 8002e48:	e7ff      	b.n	8002e4a <UART_SetConfig+0x6e2>
 8002e4a:	bf00      	nop
 8002e4c:	3714      	adds	r7, #20
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e54:	40011000 	.word	0x40011000
 8002e58:	40011400 	.word	0x40011400
 8002e5c:	51eb851f 	.word	0x51eb851f

08002e60 <__libc_init_array>:
 8002e60:	b570      	push	{r4, r5, r6, lr}
 8002e62:	4e0d      	ldr	r6, [pc, #52]	; (8002e98 <__libc_init_array+0x38>)
 8002e64:	4c0d      	ldr	r4, [pc, #52]	; (8002e9c <__libc_init_array+0x3c>)
 8002e66:	1ba4      	subs	r4, r4, r6
 8002e68:	10a4      	asrs	r4, r4, #2
 8002e6a:	2500      	movs	r5, #0
 8002e6c:	42a5      	cmp	r5, r4
 8002e6e:	d109      	bne.n	8002e84 <__libc_init_array+0x24>
 8002e70:	4e0b      	ldr	r6, [pc, #44]	; (8002ea0 <__libc_init_array+0x40>)
 8002e72:	4c0c      	ldr	r4, [pc, #48]	; (8002ea4 <__libc_init_array+0x44>)
 8002e74:	f000 f820 	bl	8002eb8 <_init>
 8002e78:	1ba4      	subs	r4, r4, r6
 8002e7a:	10a4      	asrs	r4, r4, #2
 8002e7c:	2500      	movs	r5, #0
 8002e7e:	42a5      	cmp	r5, r4
 8002e80:	d105      	bne.n	8002e8e <__libc_init_array+0x2e>
 8002e82:	bd70      	pop	{r4, r5, r6, pc}
 8002e84:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e88:	4798      	blx	r3
 8002e8a:	3501      	adds	r5, #1
 8002e8c:	e7ee      	b.n	8002e6c <__libc_init_array+0xc>
 8002e8e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e92:	4798      	blx	r3
 8002e94:	3501      	adds	r5, #1
 8002e96:	e7f2      	b.n	8002e7e <__libc_init_array+0x1e>
 8002e98:	08002f04 	.word	0x08002f04
 8002e9c:	08002f04 	.word	0x08002f04
 8002ea0:	08002f04 	.word	0x08002f04
 8002ea4:	08002f08 	.word	0x08002f08

08002ea8 <memset>:
 8002ea8:	4402      	add	r2, r0
 8002eaa:	4603      	mov	r3, r0
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d100      	bne.n	8002eb2 <memset+0xa>
 8002eb0:	4770      	bx	lr
 8002eb2:	f803 1b01 	strb.w	r1, [r3], #1
 8002eb6:	e7f9      	b.n	8002eac <memset+0x4>

08002eb8 <_init>:
 8002eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eba:	bf00      	nop
 8002ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ebe:	bc08      	pop	{r3}
 8002ec0:	469e      	mov	lr, r3
 8002ec2:	4770      	bx	lr

08002ec4 <_fini>:
 8002ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ec6:	bf00      	nop
 8002ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eca:	bc08      	pop	{r3}
 8002ecc:	469e      	mov	lr, r3
 8002ece:	4770      	bx	lr
